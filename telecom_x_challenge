{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMIZXxYSl/2nmNH5yhNYx1o",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aynara-codes/Telecom_X_Challenge/blob/main/telecom_x_challenge\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Challenge Telecom X**"
      ],
      "metadata": {
        "id": "FMx6N_LQWxna"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Diccionario\n",
        "\n",
        "------------------\n",
        "\n",
        "* customerID: número de identificación único de cada cliente\n",
        "* Churn: si el cliente dejó o no la empresa\n",
        "* gender: género (masculino y femenino)\n",
        "* SeniorCitizen: información sobre si un cliente tiene o no una edad igual o mayor a 65 años\n",
        "* Partner: si el cliente tiene o no una pareja\n",
        "* Dependents: si el cliente tiene o no dependientes\n",
        "* tenure: meses de contrato del cliente\n",
        "* PhoneService: suscripción al servicio telefónico\n",
        "* MultipleLines: suscripción a más de una línea telefónica\n",
        "* InternetService: suscripción a un proveedor de internet\n",
        "* OnlineSecurity: suscripción adicional de seguridad en línea\n",
        "* OnlineBackup: suscripción adicional de respaldo en línea\n",
        "* DeviceProtection: suscripción adicional de protección del dispositivo\n",
        "* TechSupport: suscripción adicional de soporte técnico, menor tiempo de espera\n",
        "* StreamingTV: suscripción de televisión por cable\n",
        "* StreamingMovies: suscripción de streaming de películas\n",
        "* Contract: tipo de contrato\n",
        "* PaperlessBilling: si el cliente prefiere recibir la factura en línea\n",
        "* PaymentMethod: forma de pago\n",
        "* Charges.Monthly: total de todos los servicios del cliente por mes\n",
        "* Charges.Total: total gastado por el cliente"
      ],
      "metadata": {
        "id": "kya8k44sW_yI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##📌 Extracción"
      ],
      "metadata": {
        "id": "uSFhJxTQXP6f"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hnYJ_7kxWw35"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "archivo = \"/content/TelecomX_Data.json\""
      ],
      "metadata": {
        "id": "RSV5rXcgXYZJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datos = pd.read_json(archivo)\n",
        "datos.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5hx684mSXhvr",
        "outputId": "53f48149-69c6-4fbb-be9f-e5cb3117730c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID Churn                                           customer  \\\n",
              "0  0002-ORFBO    No  {'gender': 'Female', 'SeniorCitizen': 0, 'Part...   \n",
              "1  0003-MKNFE    No  {'gender': 'Male', 'SeniorCitizen': 0, 'Partne...   \n",
              "2  0004-TLHLJ   Yes  {'gender': 'Male', 'SeniorCitizen': 0, 'Partne...   \n",
              "3  0011-IGKFF   Yes  {'gender': 'Male', 'SeniorCitizen': 1, 'Partne...   \n",
              "4  0013-EXCHZ   Yes  {'gender': 'Female', 'SeniorCitizen': 1, 'Part...   \n",
              "\n",
              "                                             phone  \\\n",
              "0   {'PhoneService': 'Yes', 'MultipleLines': 'No'}   \n",
              "1  {'PhoneService': 'Yes', 'MultipleLines': 'Yes'}   \n",
              "2   {'PhoneService': 'Yes', 'MultipleLines': 'No'}   \n",
              "3   {'PhoneService': 'Yes', 'MultipleLines': 'No'}   \n",
              "4   {'PhoneService': 'Yes', 'MultipleLines': 'No'}   \n",
              "\n",
              "                                            internet  \\\n",
              "0  {'InternetService': 'DSL', 'OnlineSecurity': '...   \n",
              "1  {'InternetService': 'DSL', 'OnlineSecurity': '...   \n",
              "2  {'InternetService': 'Fiber optic', 'OnlineSecu...   \n",
              "3  {'InternetService': 'Fiber optic', 'OnlineSecu...   \n",
              "4  {'InternetService': 'Fiber optic', 'OnlineSecu...   \n",
              "\n",
              "                                             account  \n",
              "0  {'Contract': 'One year', 'PaperlessBilling': '...  \n",
              "1  {'Contract': 'Month-to-month', 'PaperlessBilli...  \n",
              "2  {'Contract': 'Month-to-month', 'PaperlessBilli...  \n",
              "3  {'Contract': 'Month-to-month', 'PaperlessBilli...  \n",
              "4  {'Contract': 'Month-to-month', 'PaperlessBilli...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e499730e-e8a3-4e3c-af08-9f1d37e6aa99\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>Churn</th>\n",
              "      <th>customer</th>\n",
              "      <th>phone</th>\n",
              "      <th>internet</th>\n",
              "      <th>account</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0002-ORFBO</td>\n",
              "      <td>No</td>\n",
              "      <td>{'gender': 'Female', 'SeniorCitizen': 0, 'Part...</td>\n",
              "      <td>{'PhoneService': 'Yes', 'MultipleLines': 'No'}</td>\n",
              "      <td>{'InternetService': 'DSL', 'OnlineSecurity': '...</td>\n",
              "      <td>{'Contract': 'One year', 'PaperlessBilling': '...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0003-MKNFE</td>\n",
              "      <td>No</td>\n",
              "      <td>{'gender': 'Male', 'SeniorCitizen': 0, 'Partne...</td>\n",
              "      <td>{'PhoneService': 'Yes', 'MultipleLines': 'Yes'}</td>\n",
              "      <td>{'InternetService': 'DSL', 'OnlineSecurity': '...</td>\n",
              "      <td>{'Contract': 'Month-to-month', 'PaperlessBilli...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0004-TLHLJ</td>\n",
              "      <td>Yes</td>\n",
              "      <td>{'gender': 'Male', 'SeniorCitizen': 0, 'Partne...</td>\n",
              "      <td>{'PhoneService': 'Yes', 'MultipleLines': 'No'}</td>\n",
              "      <td>{'InternetService': 'Fiber optic', 'OnlineSecu...</td>\n",
              "      <td>{'Contract': 'Month-to-month', 'PaperlessBilli...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0011-IGKFF</td>\n",
              "      <td>Yes</td>\n",
              "      <td>{'gender': 'Male', 'SeniorCitizen': 1, 'Partne...</td>\n",
              "      <td>{'PhoneService': 'Yes', 'MultipleLines': 'No'}</td>\n",
              "      <td>{'InternetService': 'Fiber optic', 'OnlineSecu...</td>\n",
              "      <td>{'Contract': 'Month-to-month', 'PaperlessBilli...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0013-EXCHZ</td>\n",
              "      <td>Yes</td>\n",
              "      <td>{'gender': 'Female', 'SeniorCitizen': 1, 'Part...</td>\n",
              "      <td>{'PhoneService': 'Yes', 'MultipleLines': 'No'}</td>\n",
              "      <td>{'InternetService': 'Fiber optic', 'OnlineSecu...</td>\n",
              "      <td>{'Contract': 'Month-to-month', 'PaperlessBilli...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e499730e-e8a3-4e3c-af08-9f1d37e6aa99')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e499730e-e8a3-4e3c-af08-9f1d37e6aa99 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e499730e-e8a3-4e3c-af08-9f1d37e6aa99');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-cf498537-43aa-4d68-9012-c5d96420fdcd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf498537-43aa-4d68-9012-c5d96420fdcd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-cf498537-43aa-4d68-9012-c5d96420fdcd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "datos",
              "summary": "{\n  \"name\": \"datos\",\n  \"rows\": 7267,\n  \"fields\": [\n    {\n      \"column\": \"customerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7267,\n        \"samples\": [\n          \"2038-OEQZH\",\n          \"6322-HRPFA\",\n          \"3969-JQABI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"No\",\n          \"Yes\",\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"phone\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"internet\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"account\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 242
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Normalizacion de los datos anidados"
      ],
      "metadata": {
        "id": "AbjfriIIXp80"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_customer = pd.json_normalize(datos['customer'])\n",
        "data_customer.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MHBT9_5tXl7j",
        "outputId": "0cca7a7a-1946-4dfb-8b17-695887b66442"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 243
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_phone = pd.json_normalize(datos['phone'])\n",
        "data_customer.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SltU0ZlHX1Ah",
        "outputId": "9ca0bbe9-eed6-4364-9285-66ca0b6e30ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 244
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_internet = pd.json_normalize(datos['internet'])\n",
        "data_customer.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7gF7DyFrX3hg",
        "outputId": "d2ad2d48-0078-4fb9-ad41-8ae06cbb8758"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 245
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_account = pd.json_normalize(datos['account'])\n",
        "data_customer.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rs6hawHlX5hF",
        "outputId": "66fa73e0-0bb4-4fb6-d883-133a5392ec35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 246
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom = datos[['customerID', 'Churn']].copy()\n",
        "\n",
        "datos_telecom = datos_telecom.merge(data_customer, left_index=True, right_index=True)\n",
        "\n",
        "datos_telecom = datos_telecom.merge(data_phone, left_index=True, right_index=True)\n",
        "\n",
        "datos_telecom = datos_telecom.merge(data_internet, left_index=True, right_index=True)\n",
        "\n",
        "datos_telecom = datos_telecom.merge(data_account, left_index=True, right_index=True)\n",
        "\n",
        "\n",
        "# Display the info of the combined DataFrame to check column names and data types\n",
        "display(datos_telecom.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6LTz-N3kX9HX",
        "outputId": "f31bfae5-b45a-443a-c0ec-cf8b2a3ed6ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7267 entries, 0 to 7266\n",
            "Data columns (total 21 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   customerID        7267 non-null   object \n",
            " 1   Churn             7267 non-null   object \n",
            " 2   gender            7267 non-null   object \n",
            " 3   SeniorCitizen     7267 non-null   int64  \n",
            " 4   Partner           7267 non-null   object \n",
            " 5   Dependents        7267 non-null   object \n",
            " 6   tenure            7267 non-null   int64  \n",
            " 7   PhoneService      7267 non-null   object \n",
            " 8   MultipleLines     7267 non-null   object \n",
            " 9   InternetService   7267 non-null   object \n",
            " 10  OnlineSecurity    7267 non-null   object \n",
            " 11  OnlineBackup      7267 non-null   object \n",
            " 12  DeviceProtection  7267 non-null   object \n",
            " 13  TechSupport       7267 non-null   object \n",
            " 14  StreamingTV       7267 non-null   object \n",
            " 15  StreamingMovies   7267 non-null   object \n",
            " 16  Contract          7267 non-null   object \n",
            " 17  PaperlessBilling  7267 non-null   object \n",
            " 18  PaymentMethod     7267 non-null   object \n",
            " 19  Charges.Monthly   7267 non-null   float64\n",
            " 20  Charges.Total     7267 non-null   object \n",
            "dtypes: float64(1), int64(2), object(18)\n",
            "memory usage: 1.2+ MB\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "None"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 🔧 Transformación"
      ],
      "metadata": {
        "id": "DUkezC4MaCdv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Conociendo el conjunto de datos"
      ],
      "metadata": {
        "id": "_fOMbCxDaFc3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MtzGWPRPZrC9",
        "outputId": "4a461fb4-ea57-4980-a757-fdc165e812f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['customerID', 'Churn', 'gender', 'SeniorCitizen', 'Partner',\n",
              "       'Dependents', 'tenure', 'PhoneService', 'MultipleLines',\n",
              "       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n",
              "       'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract',\n",
              "       'PaperlessBilling', 'PaymentMethod', 'Charges.Monthly',\n",
              "       'Charges.Total'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 248
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UaAUAYMFaLjE",
        "outputId": "eaa85235-2d01-46e4-f8e4-d8257680063b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7267, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 249
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mteNiOj7aQIs",
        "outputId": "daf36b36-5dd6-41f9-a87a-9cee8c0c81ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7267 entries, 0 to 7266\n",
            "Data columns (total 21 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   customerID        7267 non-null   object \n",
            " 1   Churn             7267 non-null   object \n",
            " 2   gender            7267 non-null   object \n",
            " 3   SeniorCitizen     7267 non-null   int64  \n",
            " 4   Partner           7267 non-null   object \n",
            " 5   Dependents        7267 non-null   object \n",
            " 6   tenure            7267 non-null   int64  \n",
            " 7   PhoneService      7267 non-null   object \n",
            " 8   MultipleLines     7267 non-null   object \n",
            " 9   InternetService   7267 non-null   object \n",
            " 10  OnlineSecurity    7267 non-null   object \n",
            " 11  OnlineBackup      7267 non-null   object \n",
            " 12  DeviceProtection  7267 non-null   object \n",
            " 13  TechSupport       7267 non-null   object \n",
            " 14  StreamingTV       7267 non-null   object \n",
            " 15  StreamingMovies   7267 non-null   object \n",
            " 16  Contract          7267 non-null   object \n",
            " 17  PaperlessBilling  7267 non-null   object \n",
            " 18  PaymentMethod     7267 non-null   object \n",
            " 19  Charges.Monthly   7267 non-null   float64\n",
            " 20  Charges.Total     7267 non-null   object \n",
            "dtypes: float64(1), int64(2), object(18)\n",
            "memory usage: 1.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Comprobando incoherencias"
      ],
      "metadata": {
        "id": "qR2F17VOadLb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def comprobar_incoherencias(datos):\n",
        "  for columna in datos.columns:\n",
        "    valores_unicos = datos[columna].unique()\n",
        "    print(f\"Valores únicos en la columna '{columna}':\")\n",
        "    print(valores_unicos)\n",
        "    print()"
      ],
      "metadata": {
        "id": "zAJDEdSNabNq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "comprobar_incoherencias(datos_telecom)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l904267parjB",
        "outputId": "46736ec2-36f3-4abf-95c8-2d295a15a082"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valores únicos en la columna 'customerID':\n",
            "['0002-ORFBO' '0003-MKNFE' '0004-TLHLJ' ... '9992-UJOEL' '9993-LHIEB'\n",
            " '9995-HOTOH']\n",
            "\n",
            "Valores únicos en la columna 'Churn':\n",
            "['No' 'Yes' '']\n",
            "\n",
            "Valores únicos en la columna 'gender':\n",
            "['Female' 'Male']\n",
            "\n",
            "Valores únicos en la columna 'SeniorCitizen':\n",
            "[0 1]\n",
            "\n",
            "Valores únicos en la columna 'Partner':\n",
            "['Yes' 'No']\n",
            "\n",
            "Valores únicos en la columna 'Dependents':\n",
            "['Yes' 'No']\n",
            "\n",
            "Valores únicos en la columna 'tenure':\n",
            "[ 9  4 13  3 71 63  7 65 54 72  5 56 34  1 45 50 23 55 26 69 11 37 49 66\n",
            " 67 20 43 59 12 27  2 25 29 14 35 64 39 40  6 30 70 57 58 16 32 33 10 21\n",
            " 61 15 44 22 24 19 47 62 46 52  8 60 48 28 41 53 68 51 31 36 17 18 38 42\n",
            "  0]\n",
            "\n",
            "Valores únicos en la columna 'PhoneService':\n",
            "['Yes' 'No']\n",
            "\n",
            "Valores únicos en la columna 'MultipleLines':\n",
            "['No' 'Yes' 'No phone service']\n",
            "\n",
            "Valores únicos en la columna 'InternetService':\n",
            "['DSL' 'Fiber optic' 'No']\n",
            "\n",
            "Valores únicos en la columna 'OnlineSecurity':\n",
            "['No' 'Yes' 'No internet service']\n",
            "\n",
            "Valores únicos en la columna 'OnlineBackup':\n",
            "['Yes' 'No' 'No internet service']\n",
            "\n",
            "Valores únicos en la columna 'DeviceProtection':\n",
            "['No' 'Yes' 'No internet service']\n",
            "\n",
            "Valores únicos en la columna 'TechSupport':\n",
            "['Yes' 'No' 'No internet service']\n",
            "\n",
            "Valores únicos en la columna 'StreamingTV':\n",
            "['Yes' 'No' 'No internet service']\n",
            "\n",
            "Valores únicos en la columna 'StreamingMovies':\n",
            "['No' 'Yes' 'No internet service']\n",
            "\n",
            "Valores únicos en la columna 'Contract':\n",
            "['One year' 'Month-to-month' 'Two year']\n",
            "\n",
            "Valores únicos en la columna 'PaperlessBilling':\n",
            "['Yes' 'No']\n",
            "\n",
            "Valores únicos en la columna 'PaymentMethod':\n",
            "['Mailed check' 'Electronic check' 'Credit card (automatic)'\n",
            " 'Bank transfer (automatic)']\n",
            "\n",
            "Valores únicos en la columna 'Charges.Monthly':\n",
            "[65.6  59.9  73.9  ... 91.75 68.8  67.85]\n",
            "\n",
            "Valores únicos en la columna 'Charges.Total':\n",
            "['593.3' '542.4' '280.85' ... '742.9' '4627.65' '3707.6']\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# en churn ademas de \"Yes\" y \"No\" tenemos otro valor unico que esta vacio\n",
        "# asi que vamos a ver cuantos estan asi\n",
        "\n",
        "datos_telecom['Churn'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "klUw6WxxatWM",
        "outputId": "80e9f9c7-9ec1-4212-9414-0d8a0b171ff8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Churn\n",
              "No     5174\n",
              "Yes    1869\n",
              "        224\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>5174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1869</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <td>224</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 253
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# vemos cuanto equivalen esos datos vacios, en caso de ser menos del 5% del\n",
        "# total\n",
        "datos_churn = (datos_telecom['Churn'].value_counts() / len(datos_telecom)) * 100\n",
        "datos_churn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QgF8R2UHfIFS",
        "outputId": "73cff335-5fb0-4b2c-b205-4e8418a379c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Churn\n",
              "No     71.198569\n",
              "Yes    25.719004\n",
              "        3.082427\n",
              "Name: count, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>71.198569</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>25.719004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <td>3.082427</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 254
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# comprobamos si hay nulos\n",
        "\n",
        "def comprobar_nulos(datos):\n",
        "  for columna in datos.columns:\n",
        "    valores_nulos = datos[columna].isnull().sum()\n",
        "    print(f\"Valores nulos en la columna '{columna}':\")\n",
        "    print(valores_nulos)\n",
        "    print()"
      ],
      "metadata": {
        "id": "nIarnvr_bGSk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "comprobar_nulos(datos_telecom)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2rxgIVa4bZN8",
        "outputId": "062b9dda-88bb-47ff-bb89-08f8f9f66efa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valores nulos en la columna 'customerID':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'Churn':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'gender':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'SeniorCitizen':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'Partner':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'Dependents':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'tenure':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'PhoneService':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'MultipleLines':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'InternetService':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'OnlineSecurity':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'OnlineBackup':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'DeviceProtection':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'TechSupport':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'StreamingTV':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'StreamingMovies':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'Contract':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'PaperlessBilling':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'PaymentMethod':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'Charges.Monthly':\n",
            "0\n",
            "\n",
            "Valores nulos en la columna 'Charges.Total':\n",
            "0\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# vamos a ver si hay datos duplicados\n",
        "\n",
        "datos_telecom.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8AUpyYZubcCa",
        "outputId": "3535be12-1039-4e7a-f580-9bf71abd41e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.int64(0)"
            ]
          },
          "metadata": {},
          "execution_count": 257
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Manejo de inconsistencias"
      ],
      "metadata": {
        "id": "gIJ99YL4brLI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dczln3FwEGBf",
        "outputId": "5d9683e8-8df8-4686-cdd5-42da3ac9b86d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7267 entries, 0 to 7266\n",
            "Data columns (total 21 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   customerID        7267 non-null   object \n",
            " 1   Churn             7267 non-null   object \n",
            " 2   gender            7267 non-null   object \n",
            " 3   SeniorCitizen     7267 non-null   int64  \n",
            " 4   Partner           7267 non-null   object \n",
            " 5   Dependents        7267 non-null   object \n",
            " 6   tenure            7267 non-null   int64  \n",
            " 7   PhoneService      7267 non-null   object \n",
            " 8   MultipleLines     7267 non-null   object \n",
            " 9   InternetService   7267 non-null   object \n",
            " 10  OnlineSecurity    7267 non-null   object \n",
            " 11  OnlineBackup      7267 non-null   object \n",
            " 12  DeviceProtection  7267 non-null   object \n",
            " 13  TechSupport       7267 non-null   object \n",
            " 14  StreamingTV       7267 non-null   object \n",
            " 15  StreamingMovies   7267 non-null   object \n",
            " 16  Contract          7267 non-null   object \n",
            " 17  PaperlessBilling  7267 non-null   object \n",
            " 18  PaymentMethod     7267 non-null   object \n",
            " 19  Charges.Monthly   7267 non-null   float64\n",
            " 20  Charges.Total     7267 non-null   object \n",
            "dtypes: float64(1), int64(2), object(18)\n",
            "memory usage: 1.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# normalizando\n",
        "\n",
        "datos_telecom['SeniorCitizen'] = datos_telecom['SeniorCitizen'].replace({1: 'Yes', 0 : 'No'})"
      ],
      "metadata": {
        "id": "5O9pJi7thyRn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom['Charges.Total'] = pd.to_numeric(datos_telecom['Charges.Total'], errors='coerce')"
      ],
      "metadata": {
        "id": "3cFZOYxjELz6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# decidi que voy a eliminar los que salen vacios ya que conforman el 3.08%\n",
        "# de los datos totales"
      ],
      "metadata": {
        "id": "OzCGn4Wtbl1k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom['Churn'] = datos_telecom['Churn'].replace('', 'Nan')"
      ],
      "metadata": {
        "id": "2VrcAUpJqxeK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom['Churn'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gOQVa53Fr9xB",
        "outputId": "c506cadf-809c-41e1-c861-c6c544facc1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['No', 'Yes', 'Nan'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 263
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos_cleaned = datos_telecom[datos_telecom['Churn'] != 'Nan'].copy()\n",
        "print(\"Shape of original data:\", datos_telecom.shape)\n",
        "print(\"Shape of data after removing 'Nan' churn values:\", datos_cleaned.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VDohIhs0sE_e",
        "outputId": "34bf924b-5b9b-4806-bdaa-9c5d26aeeb1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of original data: (7267, 21)\n",
            "Shape of data after removing 'Nan' churn values: (7043, 21)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos_cleaned['Churn'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DiLq6teJsKHk",
        "outputId": "7c318c12-b9c0-4099-f65a-9b2f4495688d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['No', 'Yes'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 265
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom = datos_cleaned.copy()"
      ],
      "metadata": {
        "id": "vQMmpeXlsXiD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TvjuE9Yds-QA",
        "outputId": "f2e28e31-c790-42dd-97f8-9fa6566034e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7043, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 267
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Creacion de columna de cuentas diarias"
      ],
      "metadata": {
        "id": "CGsiJhSntHJK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "odF_Eqj_u97I",
        "outputId": "c2585c37-37b4-4966-fa39-91367c27dadb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['customerID', 'Churn', 'gender', 'SeniorCitizen', 'Partner',\n",
              "       'Dependents', 'tenure', 'PhoneService', 'MultipleLines',\n",
              "       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n",
              "       'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract',\n",
              "       'PaperlessBilling', 'PaymentMethod', 'Charges.Monthly',\n",
              "       'Charges.Total'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 268
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom['Charges.Daily'] = datos_telecom['Charges.Monthly'] / 30\n",
        "print(datos_telecom[['Charges.Monthly', 'Charges.Daily']].head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ajAaumKjtBM1",
        "outputId": "ba70fc85-b9e9-44d3-bf53-6e16bcd4980e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Charges.Monthly  Charges.Daily\n",
            "0             65.6       2.186667\n",
            "1             59.9       1.996667\n",
            "2             73.9       2.463333\n",
            "3             98.0       3.266667\n",
            "4             83.9       2.796667\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 📊 Carga y análisis"
      ],
      "metadata": {
        "id": "-ekzjPSCvcdI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Analisis descriptivo"
      ],
      "metadata": {
        "id": "Vpv_TaL8vorq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom_describe = datos_telecom.describe()\n",
        "datos_telecom_describe"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gM7tOWdnu55j",
        "outputId": "76293fe9-506e-4a02-f41a-a9689befeb27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            tenure  Charges.Monthly  Charges.Total  Charges.Daily\n",
              "count  7043.000000      7043.000000    7032.000000    7043.000000\n",
              "mean     32.371149        64.761692    2283.300441       2.158723\n",
              "std      24.559481        30.090047    2266.771362       1.003002\n",
              "min       0.000000        18.250000      18.800000       0.608333\n",
              "25%       9.000000        35.500000     401.450000       1.183333\n",
              "50%      29.000000        70.350000    1397.475000       2.345000\n",
              "75%      55.000000        89.850000    3794.737500       2.995000\n",
              "max      72.000000       118.750000    8684.800000       3.958333"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d0100c8-aa6a-4a1c-af6d-31951536f369\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tenure</th>\n",
              "      <th>Charges.Monthly</th>\n",
              "      <th>Charges.Total</th>\n",
              "      <th>Charges.Daily</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>7043.000000</td>\n",
              "      <td>7043.000000</td>\n",
              "      <td>7032.000000</td>\n",
              "      <td>7043.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>32.371149</td>\n",
              "      <td>64.761692</td>\n",
              "      <td>2283.300441</td>\n",
              "      <td>2.158723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>24.559481</td>\n",
              "      <td>30.090047</td>\n",
              "      <td>2266.771362</td>\n",
              "      <td>1.003002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.250000</td>\n",
              "      <td>18.800000</td>\n",
              "      <td>0.608333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.000000</td>\n",
              "      <td>35.500000</td>\n",
              "      <td>401.450000</td>\n",
              "      <td>1.183333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>29.000000</td>\n",
              "      <td>70.350000</td>\n",
              "      <td>1397.475000</td>\n",
              "      <td>2.345000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>55.000000</td>\n",
              "      <td>89.850000</td>\n",
              "      <td>3794.737500</td>\n",
              "      <td>2.995000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>72.000000</td>\n",
              "      <td>118.750000</td>\n",
              "      <td>8684.800000</td>\n",
              "      <td>3.958333</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d0100c8-aa6a-4a1c-af6d-31951536f369')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2d0100c8-aa6a-4a1c-af6d-31951536f369 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2d0100c8-aa6a-4a1c-af6d-31951536f369');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-33655342-2518-4fa8-b9f5-5fd4dcb0ba25\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33655342-2518-4fa8-b9f5-5fd4dcb0ba25')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-33655342-2518-4fa8-b9f5-5fd4dcb0ba25 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_696a5595-4ed5-43aa-8858-b5ee4cf148cb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('datos_telecom_describe')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_696a5595-4ed5-43aa-8858-b5ee4cf148cb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('datos_telecom_describe');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "datos_telecom_describe",
              "summary": "{\n  \"name\": \"datos_telecom_describe\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2478.9752758409018,\n        \"min\": 0.0,\n        \"max\": 7043.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.37114865824223,\n          29.0,\n          7043.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Charges.Monthly\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2468.7047672837775,\n        \"min\": 18.25,\n        \"max\": 7043.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          64.76169246059918,\n          70.35,\n          7043.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Charges.Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3117.312944742373,\n        \"min\": 18.8,\n        \"max\": 8684.8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2283.3004408418656,\n          1397.475,\n          7032.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Charges.Daily\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2489.3569547105258,\n        \"min\": 0.6083333333333333,\n        \"max\": 7043.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.1587230820199723,\n          2.3449999999999998,\n          7043.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 270
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Distribucion de evasion"
      ],
      "metadata": {
        "id": "-sRdZ9qP0ax4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom['Churn'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8EU-glhgwqQN",
        "outputId": "f4b95a98-3ed9-4e5f-de18-d6de36fe676c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Churn\n",
              "No     5174\n",
              "Yes    1869\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>5174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1869</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 271
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "nH7OwL7M0xko"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "colors = ['#66b3ff', '#ff9999']\n",
        "fig, ax = plt.subplots()\n",
        "ax.pie(datos_telecom['Churn'].value_counts(), labels=datos_telecom['Churn'].unique(),\n",
        "       autopct='%1.1f%%', colors=colors)\n",
        "ax.set_title('Evasion de clientes')\n",
        "ax.set_xlabel('')\n",
        "ax.set_ylabel('')\n",
        "ax.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WgSLe5Fi2cHM",
        "outputId": "f5ad864e-7c05-4fc3-ea1a-ffc99db17b75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Recuento de evasión por variables categóricas"
      ],
      "metadata": {
        "id": "DNSAmmWZ3dkJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos_telecom.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PBxpmhHx08BQ",
        "outputId": "0176cd62-00d5-4344-d5fd-29ade207611d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['customerID', 'Churn', 'gender', 'SeniorCitizen', 'Partner',\n",
              "       'Dependents', 'tenure', 'PhoneService', 'MultipleLines',\n",
              "       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n",
              "       'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract',\n",
              "       'PaperlessBilling', 'PaymentMethod', 'Charges.Monthly', 'Charges.Total',\n",
              "       'Charges.Daily'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 274
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Recuentos de datos personales del cliente\n",
        "\n",
        "print(\"Recuento de evasión por género:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['gender']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si es mayor de 65 años:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['SeniorCitizen']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene pareja:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['Partner']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene dependientes:\")\n",
        "pd.crosstab(datos_telecom['Churn'], datos_telecom['Dependents'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        },
        "id": "XVDRmiq18dWI",
        "outputId": "a2a2c71b-50c5-4890-97e0-9accd8a420af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recuento de evasión por género:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "gender  Female  Male\n",
              "Churn               \n",
              "No        2549  2625\n",
              "Yes        939   930"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69ca4ca9-ff6a-4678-b382-9c2029ad52dc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>gender</th>\n",
              "      <th>Female</th>\n",
              "      <th>Male</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2549</td>\n",
              "      <td>2625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>939</td>\n",
              "      <td>930</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69ca4ca9-ff6a-4678-b382-9c2029ad52dc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-69ca4ca9-ff6a-4678-b382-9c2029ad52dc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-69ca4ca9-ff6a-4678-b382-9c2029ad52dc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1dfc6a0d-df32-4f1d-bdbd-654dcef4a0c1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1dfc6a0d-df32-4f1d-bdbd-654dcef4a0c1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1dfc6a0d-df32-4f1d-bdbd-654dcef4a0c1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1138,\n        \"min\": 939,\n        \"max\": 2549,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          939,\n          2549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1198,\n        \"min\": 930,\n        \"max\": 2625,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          930,\n          2625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si es mayor de 65 años:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "SeniorCitizen    No  Yes\n",
              "Churn                   \n",
              "No             4508  666\n",
              "Yes            1393  476"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7652ef82-6e31-410a-8bdf-003aa883be99\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>No</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>4508</td>\n",
              "      <td>666</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1393</td>\n",
              "      <td>476</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7652ef82-6e31-410a-8bdf-003aa883be99')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7652ef82-6e31-410a-8bdf-003aa883be99 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7652ef82-6e31-410a-8bdf-003aa883be99');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-688303a2-295e-4d7b-9672-852fd267428a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-688303a2-295e-4d7b-9672-852fd267428a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-688303a2-295e-4d7b-9672-852fd267428a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2202,\n        \"min\": 1393,\n        \"max\": 4508,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1393,\n          4508\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134,\n        \"min\": 476,\n        \"max\": 666,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          476,\n          666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene pareja:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Partner    No   Yes\n",
              "Churn              \n",
              "No       2441  2733\n",
              "Yes      1200   669"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b4f22fba-9c4e-4aa4-b7ba-c3ba69dcbbc0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Partner</th>\n",
              "      <th>No</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2441</td>\n",
              "      <td>2733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1200</td>\n",
              "      <td>669</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4f22fba-9c4e-4aa4-b7ba-c3ba69dcbbc0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b4f22fba-9c4e-4aa4-b7ba-c3ba69dcbbc0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b4f22fba-9c4e-4aa4-b7ba-c3ba69dcbbc0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6edc3cdc-32b1-4cd8-8797-3bda00208d66\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6edc3cdc-32b1-4cd8-8797-3bda00208d66')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6edc3cdc-32b1-4cd8-8797-3bda00208d66 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 877,\n        \"min\": 1200,\n        \"max\": 2441,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1200,\n          2441\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1459,\n        \"min\": 669,\n        \"max\": 2733,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          669,\n          2733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene dependientes:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Dependents    No   Yes\n",
              "Churn                 \n",
              "No          3390  1784\n",
              "Yes         1543   326"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-350ba820-f397-4330-af6c-43c9010ba6a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Dependents</th>\n",
              "      <th>No</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>3390</td>\n",
              "      <td>1784</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1543</td>\n",
              "      <td>326</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-350ba820-f397-4330-af6c-43c9010ba6a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-350ba820-f397-4330-af6c-43c9010ba6a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-350ba820-f397-4330-af6c-43c9010ba6a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-95566a5b-5d7f-45c8-8732-850edde02e3c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95566a5b-5d7f-45c8-8732-850edde02e3c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-95566a5b-5d7f-45c8-8732-850edde02e3c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1306,\n        \"min\": 1543,\n        \"max\": 3390,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1543,\n          3390\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1030,\n        \"min\": 326,\n        \"max\": 1784,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          326,\n          1784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 275
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axs = plt.subplots(2, 2, figsize=(10, 10))\n",
        "\n",
        "fig.suptitle('Distribución de variables categóricas', fontsize=18)\n",
        "\n",
        "sns.countplot(data=datos_telecom, x='gender', hue='Churn', ax=axs[0, 0])\n",
        "axs[0, 0].set_title('Evasion por género')\n",
        "\n",
        "sns.countplot(data=datos_telecom, x='SeniorCitizen', hue='Churn', ax=axs[0, 1])\n",
        "axs[0, 1].set_title('Evasion por si es mayor de 65 años')\n",
        "\n",
        "sns.countplot(data=datos_telecom, x='Partner', hue='Churn', ax=axs[1, 0])\n",
        "axs[1, 0].set_title('Evasion por si tiene pareja')\n",
        "\n",
        "sns.countplot(data=datos_telecom, x='Dependents', hue='Churn', ax=axs[1, 1])\n",
        "axs[1, 1].set_title('Evasion por si tiene dependientes')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        },
        "id": "YLkElTICg1ba",
        "outputId": "1c618d01-8f58-467b-c9fe-a5a490d092db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 4 Axes>"
            ],
            "image/png": "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PrPTp087vC/u/cfRo0etbfZiv3PF9RnnJ+cTEoqyfR85ckSS4x/Fzpff53vs2DHrrJDCfjfz2waKug1n7w/Lly+vUqVKXdS8Rd32AwIC9NFHH+mBBx7Qzp079eSTT0qS/P391bJlS917772677775OnpWaQ+Afjv40g3gGJ18uRJ63Ex1157baHnq1y5sn744QctW7ZMTz31lBo3bqysrCytX79eAwcOVPXq1bV69epLis1Zp+M6W36PWEPespOC4OBgmXP3Lrngq6BHueWlS5cu8vX11cmTJ/XZZ59Z07OPcjdq1EgRERG55nvooYf0559/qkqVKvr444919OhRnTp1SocPH1ZiYqL++usvq25BR9GKui3v2rVL/fr1U1ZWlu655x59//33OnPmjI4fP67ExEQlJiZqzJgxF1x+ccv+zJo1a1bozyyn4t5/XMp3rrg+4/zkvBTi9OnThVpXeR25dvV+pajbcFHjvtRtv127dtq3b59mz56t2NhYXXfddUpJSdGXX36p7t27q2HDhg6fLQDkRNINoFgtW7bM+lFY0PNV8+Lm5qaYmBi9/fbb2rJli44dO6Y5c+aocuXKOn78uB544IFiP+W8KAr6YZVd5uHh4XBkLfuob/ZpoXnJ79rHkJAQ6/85TxO9FNlHmf755598n8Ut/d9plsV1lkBh5FxWYdb1+bLX1z///OO06y9Lly6tO++8U9L/JdqZmZnWtbZ5HeU+ePCgdWrsRx99pLvvvjvX0deiXON7MT755BNlZmaqdu3amjdvnpo2bSovL6+LjuFCyUV2eWG3m+zP7FK27+LcfwQGBlpHLS8mpsvxGV/q/qBChQqSHI+Yny+/zzcwMNBKlgs6NT5nWXHvO4r6/S6Obb9UqVLq3r27Zs6cqV9//VV//vmnRo0aJW9vb4cj4ABwPpJuAMUmPT1dr732mqRzp9117tz5ktorU6aMHnjgAb333nuSzp1KuX37dqs85/Wyl/OoXF43zzq/rF69eg6nGpYtW1bSuVMt80tyN23alOf0ypUrW6dyfvnll0WK+XxNmjSRdO40+K+//jrfeitXrpQkNW3atFiWWxiNGjWyPtuC1nV+Ry6zrxXNzMzU0qVLiz/A/y/njdgSExOtfz08PPTAAw/kqn/w4EHr//ndDC97fTtLdgz169fP83rzwsawZcsWnTx5Ms+y3377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yys1NVXe3t5q0KCBBg4cqF27dummm27KNe/EiRM1dOhQRUZGSpIOHDigP/74I8/Tv4tLs2bNtGXLFvXo0UP+/v46e/asrrnmGj3yyCPavn17vtexNmjQQJs2bVLXrl0VFBSkrKwslS9fXnFxcdq2bVued7vOqVq1atq6dasmTZqkVq1aqWzZsjpx4oQCAgIUFRWlESNGqH///hfVl/79+2vLli168MEHFRYWpn///Vc+Pj5q3ry5xo4dq82bNxf4aCFnevTRR7V+/Xp16tRJgYGBSktLU3h4uAYNGqTvv//euk4+Py1atNCvv/6qt956Sy1btlRAQICSk5Pl7u6u2rVr68EHH9ScOXM0bty4IscYGRmpBg0aWO/vueceeXt751v/tttu07p169SxY0cFBATo7NmzKl++vB566CElJCRYz5t2puw+16tXT3a7XZmZmYqMjNTIkSO1fv16lS5dulDtfPTRR5o0aZIaNmyos2fPqlSpUoqKitLs2bM1a9asIp1q27lzZ/3222965ZVXdP3116t06dJKTk6W3W5X/fr19fDDD+uzzz7Tc889Z81zKfuPCylfvrzWrl2rDz/8UB06dFCFChV06tQp+fr6qnHjxnrhhRes+1hku9TPuLD7tNq1a+unn37S1KlTFR0dbfXbGKPq1avrnnvu0bRp07RgwYJcy6hVq5Z++uknPfXUU6pSpYqMMfL29ta9996rjRs3OjxDO6/LhOrWraudO3dq6NChatCggTw8PJSWlqZrr71Wjz/+uHbu3Gmdxu4s0dHR2rNnj1566SU1bNhQPj4+OnXqlK655hrFxMRo6tSpatOmjcM8Rd32H330UU2bNk3333+/6tatK19fX6Wmpqps2bK66aabNG7cOP3www8ON7kDgJxsxlzGuw8BAACgRIuPj1d0dLS8vb2VmprK86cB4BJxpBsAAACSJGOMRo0aJUlq06YNCTcAFAOSbgAAgKvImjVr1K9fP23ZskWnT5+WdC7ZTkhIUKdOnbRq1SrZbDYNHDjQxZECwH8Dp5cDAABcRRYtWqQ777zTel+2bFmdPn3aejyfzWbTW2+9pQEDBrgqRAD4TyHpBgAAuIokJiZq+vTpWrVqlX7//XcdOXJExhiFhobqpptuUt++ffO9ISQA4OKRdAMAAAAA4CRc0w0AAAAAgJOQdAMAAAAA4CQk3QAA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TJgwwUgy77//vjHGmK1btxpJ5uOPP75gjDCG08uBizBx4kTFx8c7vJYuXWqVt2nTRuXLl9f8+fOtacePH1d8fLzuu+8+a5q7u7t105SsrCwdO3ZMZ8+eVZMmTfTDDz9Y9QICAnTq1CnFx8cXOsYtW7bo8OHDeuKJJxyuE+vYsaNq1aqV63Q5SXr88ccd3t900036/fffC7W80NBQ3XnnndZ7Pz8/9ejRQ1u3blViYqIk6auvvtL111+vG2+80apXunRpPfroo9q/f79+/vlnhzZjY2MLdS3WsmXL5OnpqUceecSa5ubmpri4OId6x44d0+rVq3XvvffqxIkT+ueff/TPP//o6NGjiomJ0Z49e3Kd1vjoo4/KZrNZ72+66SZlZmbqjz/+kCTFx8crOTlZ999/v9XeP//8I3d3dzVr1izP0zD79Onj8P6rr76Su7u7nnrqKYfpzzzzjIwxDtsWAFwIY1RurhyjirJ+8mKM0aeffqpOnTrJGOMw5sTExCglJcX6XAICAvTnn39q8+bNRVpWjx495Onpab1v1qyZjDHq1auXQ71mzZrp4MGDOnv2rDUt5zpJSUnRP//8o5tvvlm///67dbqxm5ubunXrpi+++EInTpyw6s+ZM0c33HCDdSPAr776SpI0YMAAh+U+88wzkpRrO6latapiYmIu2L/s7e/xxx93uHldz5495e/v71D3448/Vu3atVWrVi2Hdd6mTRtJynOcz5Z9KvnRo0c1ffp0Pfvss7r33nu1ZMkSRURE6NVXX3Wov379ej399NO6/fbb9fjjjyshIUF169bViy++qNOnTxfYp5zrPSMjQ0ePHlX16tUVEBDg8H3NdqHfNytXrlR6err69evncK+CRx55RH5+fta6z15fy5cv17///ltgjOCabuCiXH/99WrXrp3Dq3Xr1la5h4eHunTpos8//9y63mfhwoXKyMhw+EEjSbNmzVK9evXk7e2tcuXKqUKFClqyZInDdTBPPPGEatSooQ4dOqhSpUrq1auXli1bVmCM2TvNnNdFZatVq5ZVns3b2zvXY7Mu5pmN1atXd9h5S+duBiLJup7ojz/+yDOe2rVrO8ScLa+77+bljz/+UMWKFeXr65srppx+++03GWP08ssvq0KFCg6vV155RZJ0+PBhh3kqV67s8D77cRrZ62XPnj2Szv2IPb/NFStW5GrP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+uuv1zPPPKPffvtNtWrV0hdffGGdipXzL9MTJ07UjTfeqMjISD3yyCOqVq2akpKStGHDBv3555/68ccfL2rZfn5+mjx5srp3765GjRqpa9euqlChgg4cOKAlS5aoRYsWuZLp83Xq1EmtW7fWSy+9pP3796t+/fpasWKFPv/8c/Xr1886mg4AhcEYlZsrx6iirJ/8vP7661qzZo2aNWumRx55RBERETp27Jh++OEHrVy50hr3oqOjFRISohYtWig4OFi7du3ShAkT1LFjx1z3DylO0dHR1lH9xx57TCdPntS7776roKCgPP/YXaFCBbVv314ff/yxAgICciXR9evXV2xsrKZNm6bk5GTdfPPN+v777zVr1ix17tzZ4V4FF8PT01OvvvqqHnvsMbVp00b33Xef9u3bpxkzZuS6prt79+5asGCBHn/8ca1Zs0YtWrRQZmamfvnlFy1YsMB6Lnh+HnvsMU2fPl1xcXH69ddfVblyZX3wwQf6448/9OWXX1r1Jk6cqEWLFqlTp06qXLmyDh06pPfff18HDhzQBx984HCUPC+33XabPvjgA/n7+ysiIkIbNmzQypUrVa5cuSKtowoVKmjQoEEaNmyY2rdvr9tvv127d+/WpEmT1LRpU+sPJKtXr1bfvn11zz33qEaNGjp79qw++OAD649EOM/lv2E6cOUp6HEsOu/RVMacexRVWFhYno+Dyi5/7bXXTHh4uLHb7aZhw4Zm8eLFJjY21uERHJ988omJjo42QUFBxsvLy1SuXNk89thj5tChQ1ad/B43Mn/+fNOwYUNjt9tNYGCg6datm/nzzz8d6sTGxppSpUrlii/7+YwXEh4ebjp27GiWL19u6tWrZ+x2u6lVq1aej4/Yu3evufvuu01AQIDx9vY2119/vVm8eLFDney+XMzjJ44cOWIeeOABU6ZMGePv72969uxp1q9fbySZefPm5YqhR48eJiQkxHh6epprrrnG3HbbbeaTTz6x6mR/1tnPqz0/tvPX85o1a0xMTIzx9/c33t7e5tprrzU9e/Y0W7Zsserkt56NOfdYmv79+5vQ0FDj6elprrvuOvPmm286PM4DAArCGJU3V49Rl7J+8pKUlGTi4uJMWFiY8fT0NCEhIaZt27Zm2rRpVp2pU6eali1bmnLlyhm73W6uvfZa89xzz5mUlJQC286vb/mNidmfwZEjR6xpX3zxhalXr57x9vY2VapUMaNGjTLvv/++kWT27duXa5kLFiwwksyjjz6aZ0wZGRlm2LBhpmrVqsbT09OEhYWZQYMGOTz605j/+5wvxqRJk0zVqlWN3W43TZo0MevWrTM333yzwyPDjDn3iLFRo0aZOnXqGLvdbsqWLWsaN25shg0bdsF1asy5zyw2NtYEBgYau91umjVrluvRZitWrDC33HKL9dskICDAREdHm1WrVhWqL8ePHzcPPfSQKV++vCldurSJiYkxv/zyiwkPDzexsbFWvYv9fTNhwgRTq1Yt4+npaYKDg02fPn3M8ePHrfLff//d9OrVy1x77bXG29vbBAYGmtatW5uVK1cWKu6rjc2YIlw1DwA6dz1c3bp1tXjxYleH4mDRokW688479e2336pFixauDgcA4AIldYzCOZ9//rk6d+6sdevW6aabbnJ1OIBTcU03gCva+c+vzMzM1Pjx4+Xn56dGjRq5KCoAAFCQd999V9WqVXN4PjrwX8U13QCuaE8++aROnz6tqKgopaWlaeHChfruu+/02muvOeURIgAAoOjmzZunn376SUuWLNHbb7990XcGB65EJN0Armht2rTR6NGjtXjxYp05c0bVq1fX+PHj1bdvX1eHBgAAznP//ferdOnS6t27t5544glXhwNcFlzTDQAAAACAk3BNNwAAAAAATkLSDQAAAACAk3BNdyFkZWXp77//VpkyZbjZAwDAqYwxOnHihEJDQ+Xmxt/GLxZjNgDgcinsmE3SXQh///23wsLCXB0GAOAqcvDgQVWqVMnVYVxxGLMBAJfbhcZsku5CKFOmjKRzK9PPz8/F0QAA/stSU1MVFhZmjT24OIzZAIDLpbBjNkl3IWSfnubn58cADgC4LDg1umgYswEAl9uFxmwuFgMAAAAAwElIugEAAAAAcBKSbgAAAAAAnIRrugEATpWZmamMjAxXh1GieHp6yt3d3dVhAADggDHbUXGN1yTdAACnMMYoMTFRycnJrg6lRAoICFBISAg3TAMAuBxjdv6KY7wm6QYAOEX24B0UFCRfX1+Sy//PGKN///1Xhw8fliRVrFjRxREBAK52jNm5Fed4TdINACh2mZmZ1uBdrlw5V4dT4vj4+EiSDh8+rKCgIE41BwC4DGN2/oprvOZGagCAYpd9PZivr6+LIym5stcN184BAFyJMbtgxTFek3QDAJyG09Pyx7oBAJQkjEt5K471QtINAAAAAICTkHQDAK5oNptNixYtcnUYAADgAq7WMZukGwBQoiUmJurJJ59UtWrVZLfbFRYWpk6dOmnVqlWuDg0AAOTAmJ037l4OACix9u/frxYtWiggIEBvvvmmIiMjlZGRoeXLlysuLk6//PKLU5abnp4uLy8vp7QNAMB/EWN2/jjSDQAosZ544gnZbDZ9//336tKli2rUqKE6depowIAB2rhxo1Xvn3/+0Z133ilfX19dd911+uKLL6yymTNnKiAgwKHdRYsWOdwYZejQoWrQoIGmT5+uqlWrytvbW9K50+CmT5+eb9sAAOAcxuz8kXQDAEqkY8eOadmyZYqLi1OpUqVylecclIcNG6Z7771XP/30k2699VZ169ZNx44du6jl/fbbb/r000+1cOFCbdu2rVjbBgDgv4wxu2Ak3QCAEum3336TMUa1atW6YN2ePXvq/vvvV/Xq1fXaa6/p5MmT+v777y9qeenp6Zo9e7YaNmyoevXqFWvbAAD8lzFmF4xrugFccRo/N9vVIfwnJLzZw9UhFMgYU+i6OQfcUqVKyc/PT4cPH76o5YWHh6tChQpOaRtXPvY7xaOk73cAFA1jdsE40g0AKJGuu+462Wy2Qt14xdPT0+G9zWZTVlaWJMnNzS3Xj4GMjIxcbeR1OtyF2gYAAIzZF0LSDQAokQIDAxUTE6OJEyfq1KlTucqTk5ML1U6FChV04sQJhzZyXv8FAAAuDWN2wUi6AQAl1sSJE5WZmanrr79en376qfbs2aNdu3bpnXfeUVRUVKHaaNasmXx9ffXiiy9q7969mjt3rmbOnOncwAEAuMowZuePpBsAUGJVq1ZNP/zwg1q3bq1nnnlGdevW1S233KJVq1Zp8uTJhWojMDBQH374ob766itFRkbqo48+0tChQ50bOAAAVxnG7PzZzMVc9X6VSk1Nlb+/v1JSUuTn5+fqcICrHjc0Kh7OvKHRmTNntG/fPofnZ8JRfuuIMefSOGv9sd8pHtxIDSh5GLMLVtD6KeyYw5FuAAAAAACchKQbAAAAAAAnIekGAAAAAMBJSLoBAAAAAHASkm4AAAAAAJzEw9UBXM24E2rx4W6oAAAAAEoijnQDAAAAAOAkLk26R44cqaZNm6pMmTIKCgpS586dtXv3boc6rVq1ks1mc3g9/vjjDnUOHDigjh07ytfXV0FBQXruued09uxZhzpr165Vo0aNZLfbVb16dc2cOdPZ3QMAAAAAXOVcmnR//fXXiouL08aNGxUfH6+MjAxFR0fr1KlTDvUeeeQRHTp0yHq98cYbVllmZqY6duyo9PR0fffdd5o1a5ZmzpypIUOGWHX27dunjh07qnXr1tq2bZv69eunhx9+WMuXL79sfQUAAAAAXH1cek33smXLHN7PnDlTQUFBSkhIUMuWLa3pvr6+CgkJybONFStW6Oeff9bKlSsVHBysBg0aaMSIEXr++ec1dOhQeXl5acqUKapatapGjx4tSapdu7a+/fZbjR07VjExMc7rIAAAAADgqlaibqSWkpIiSQoMDHSYPmfOHH344YcKCQlRp06d9PLLL8vX11eStGHDBkVGRio4ONiqHxMToz59+mjnzp1q2LChNmzYoHbt2jm0GRMTo379+jm3QwCAXC73TSQv9kaLPXv21KxZszRy5Ei98MIL1vRFixbpzjvvlDGmuEMEAKDEKenjtXTljNkl5kZqWVlZ6tevn1q0aKG6deta0x944AF9+OGHWrNmjQYNGqQPPvhADz74oFWemJjokHBLst4nJiYWWCc1NVWnT5/OFUtaWppSU1MdXgCAq4e3t7dGjRql48ePuzoUAABQgCthzC4xSXdcXJx27NihefPmOUx/9NFHFRMTo8jISHXr1k2zZ8/WZ599pr179zotlpEjR8rf3996hYWFOW1ZAICSp127dgoJCdHIkSPzrfPpp5+qTp06stvtqlKlinUJEwAAuHyuhDG7RCTdffv21eLFi7VmzRpVqlSpwLrNmjWTJP3222+SpJCQECUlJTnUyX6ffR14fnX8/Pzk4+OTaxmDBg1SSkqK9Tp48GDROgYAuCK5u7vrtdde0/jx4/Xnn3/mKk9ISNC9996rrl27avv27Ro6dKhefvllnowBAMBldiWM2S5Nuo0x6tu3rz777DOtXr1aVatWveA827ZtkyRVrFhRkhQVFaXt27fr8OHDVp34+Hj5+fkpIiLCqrNq1SqHduLj4xUVFZXnMux2u/z8/BxeAICry5133qkGDRrolVdeyVU2ZswYtW3bVi+//LJq1Kihnj17qm/fvnrzzTddECkAAFe3kj5muzTpjouL04cffqi5c+eqTJkySkxMVGJionWd9d69ezVixAgl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OgcOHFDHjh3l6+uroKAgPffcczp79qxDnbVr16pRo0ay2+2qXr26Zs6c6ezuAQAAAACuci5Nur/++mvFxcVp48aNio+PV0ZGhqKjo3Xq1CmrTv/+/fXll1/q448/1tdff62///5bd911l1WemZmpjh07Kj09Xd99951mzZqlmTNnasiQIVadffv2qWPHjmrdurW2bdumfv366eGHH9by5csva38BAAAAAFcXD1cufNmyZQ7vZ86cqaCgICUkJKhly5ZKSUnRe++9p7lz56pNmzaSpBkzZqh27drauHGjmjdvrhUrVujnn3/WypUrFRwcrAYNGmjEiBF6/vnnNXToUHl5eWnKlCmqWrWqRo8eLUmqXbu2vv32W40dO1YxMTGXvd8AAAAAgKtDibqmOyUlRZIUGBgoSUpISFBGRobatWtn1alVq5YqV66sDRs2SJI2bNigyMhIBQcHW3ViYmKUmpqqnTt3WnVytpFdJ7sNAAAAAACcwaVHunPKyspSv3791KJFC9WtW1eSlJiYKC8vLwUEBDjUDQ4OVmJiolUnZ8KdXZ5dVlCd1NRUnT59Wj4+Pg5laWlpSktLs96npqZeegcBAAAAAFedEnOkOy4uTjt27NC8efNcHYpGjhwpf39/6xUWFubqkAAAAAAAV6ASkXT37dtXixcv1po1a1SpUiVrekhIiNLT05WcnOxQPykpSSEhIVad8+9mnv3+QnX8/PxyHeWWpEGDBiklJcV6HTx48JL7CAAAAAC4+rg06TbGqG/fvvrss8+0evVqVa1a1aG8cePG8vT01KpVq6xpu3fv1oEDBxQVFSVJioqK0vbt23X48GGrTnx8vPz8/BQREWHVydlGdp3sNs5nt9vl5+fn8AIAAAAA4GK59JruuLg4zZ07V59//rnKlCljXYPt7+8vHx8f+fv7q3fv3howYIACAwPl5+enJ598UlFRUWrevLkkKTo6WhEREerevbveeOMNJSYmavDgwYqLi5PdbpckPf7445owYYIGDhyoXr16afXq1VqwYIGWLFnisr4DAAAAAP77XHqke/LkyUpJSVGrVq1UsWJF6zV//nyrztixY3XbbbepS5cuatmypUJCQrRw4UKr3N3dXYsXL5a7u7uioqL04IMPqkePHho+fLhVp2rVqlqyZIni4+NVv359jR49WtOnT+dxYQAAAAAAp3LpkW5jzAXreHt7a+LEiZo4cWK+dcLDw/XVV18V2E6rVq20devWi44RAAAAAICiKhE3UgMAAAAA4L+IpBsAAAAAACch6QYAAAAAwElIugEAAAAAcBKSbgAAAAAAnISkGwAAAAAAJyHpBgAAAADASUi6AQAAAABwEpJuAAAAAACchKQbAAAAAAAnIekGAAAAAMBJSLoBAAAAAHASkm4AAAAAAJyEpBsAAAAAACch6QYAAAAAwElIugEAAAAAcBKSbgAAAAAAnISkGwAAAAAAJyHpBgAAAADASUi6AQAAAABwEpJuAAAAAACchKQbAAAAAAAnIekGAAAAAMBJSLoBAAAAAHASkm4AAAAAAJyEpBsAABRo8uTJqlevnvz8/OTn56eoqCgtXbrUKj9z5ozi4uJUrlw5lS5dWl26dFFSUpJDGwcOHFDHjh3l6+uroKAgPffcczp79qxDnbVr16pRo0ay2+2qXr26Zs6ceTm6BwCAU5F0AwCAAlWqVEmvv/66EhIStGXLFrVp00Z33HGHdu7cKUnq37+/vvzyS3388cf6+uuv9ffff+uuu+6y5s/MzFTHjh2Vnp6u7777TrNmzdLMmTM1ZMgQq86+ffvUsWNHtW7dWtu2bVO/fv308MMPa/ny5Ze9vwAAFCcPVwcAAABKtk6dOjm8/9///qfJkydr48aNqlSpkt577z3NnTtXbdq0kSTNmDFDtWvX1saNG9W8eXOtWLFCP//8s1auXKng4GA1aNBAI0aM0PPPP6+hQ4fKy8tLU6ZMUdWqVTV69GhJUu3atfXtt99q7NixiomJuex9BgCguHCkGwAAFFpmZqbmzZunU6dOKSoqSgkJCcrIyFC7du2sOrVq1VLlypW1YcMGSdKGDRsUGRmp4OBgq05MTIxSU1Oto+UbNmxwaCO7TnYbAABcqTjSDQAALmj79u2KiorSmTNnVLp0aX322WeKiIjQtm3b5OXlpYCAAIf6wcHBSkxMlCQlJiY6JNzZ5dllBdVJTU3V6dOn5ePjk2dcaWlpSktLs96npqZeUj8BAChuHOkGAAAXVLNmTW3btk2bNm1Snz59FBsbq59//tnVYWnkyJHy9/e3XmFhYa4OCQAAByTdAADggry8vFS9enU1btxYI0eOVP369fX2228rJCRE6enpSk5OdqiflJSkkJAQSVJISEiuu5lnv79QHT8/v3yPckvSoEGDlJKSYr0OHjx4qV0FAKBYkXQDAICLlpWVpbS0NDVu3Fienp5atWqVVbZ7924dOHBAUVFRkqSoqCht375dhw8fturEx8fLz89PERERVp2cbWTXyW4jP3a73XqUWfYLAICShGu6AQBAgQYNGqQOHTqocuXKOnHihObOnau1a9dq+fLl8vf3V+/evTVgwAAFBgbKz89PTz75pKKiotS8eXNJUnR0tCIiItS9e3e98cYbSkxM1ODBgxUXFye73S5JevzxxzVhwgQNHDhQvXr10urVq7VgwQItWbLElV0HAOCSkXQDAIACHT58WD169NChQ4fk7++vevXqafny5brlllskSWPHjpWbm5u6dOmitLQ0xcTEaNKkSdb87u7uWrx4sfr06aOoqCiVKlVKsbGxGj58uFWnatWqWrJkifr376+3335blSpV0vTp03lcGADgikfSDQAACvTee+8VWO7t7a2JEydq4sSJ+dYJDw/XV199VWA7rVq10tatW4sUIwAAJRXXdAMAAAAA4CQk3QAAAAAAOAlJNwAAAAAATkLSDQAAAACAk5B0AwAAAADgJCTdAAAAAAA4CUk3AAAAAABOQtINAAAAAICTkHQDAAAAAOAkJN0AAAAAADgJSTcAAAAAAE5C0g0AAAAAgJOQdAMAAAAA4CQk3QAAAAAAOAlJNwAAAAAATkLSDQAAAACAk5B0AwAAAADgJCTdAAAAAAA4CUk3AAAAAABOQtINAAAAAICTkHQDAAAAAOAkJN0AAAAAADgJSTcAAAAAAE5C0g0AAAAAgJO4NOlet26dOnXqpNDQUNlsNi1atMihvGfPnrLZbA6v9u3bO9Q5duyYunXrJj8/PwUEBKh37946efKkQ52ffvpJN910k7y9vRUWFqY33njD2V0DAAAAAMC1SfepU6dUv359TZw4Md867du316FDh6zXRx995FDerVs37dy5U/Hx8Vq8eLHWrVunRx991CpPTU1VdHS0wsPDlZCQoDfffFNDhw7VtGnTnNYvAAAAAAAkycOVC+/QoYM6dOhQYB273a6QkJA8y3bt2qVly5Zp8+bNatKkiSRp/PjxuvXWW/XWW28pNDRUc+bMUXp6ut5//315eXmpTp062rZtm8aMGeOQnAMAAAAAUNxK/DXda9euVVBQkGrWrKk+ffro6NGjVtmGDRsUEBBgJdyS1K5dO7m5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PDmvcuXKRdp2vXr1dOXKFatce+bMGSUkJKh+/foFrufg4KDevXtryZIlOnnyZJ729PR0XblyJd91y5Qpo+zs7KvGFRMToyeffFILFixQixYtrNqaNWum+Ph41ahRI8/nwAF23EoouoHbXIUKFdS/f3+NHj1aW7ZsUXx8vAYPHiwHBwdZLBbVrl1bffv2Vb9+/bRy5UolJSXp+++/V2RkpNauXVvo/Tz//PN64403tHr1av3www965plndP78eas4XnzxRY0cOVKLFy9WYmKi/ve//2nOnDlavHixDUYOAIBtnDlzRu3atdMnn3yiAwcOKCkpSZ9//rmmT5+uhx56SB06dFBoaKi6deumjRs36vjx4/ruu+/073//W3v37i3SPu+880499NBDGjJkiL799lvt379fjz/+uKpWraqHHnroquu+9tprCggIUPPmzfXxxx/r8OHDOnr0qD766CM1bdrUvBrtn2rUqKFNmzYpJSVF586dy9OekpKi7t27q3fv3goLC1NKSopSUlL0+++/S5IiIiJ09uxZ9enTR3v27FFiYqI2bNiggQMHXrOYB0oTLi8HoLfeektPP/20HnzwQbm7u2vMmDH65Zdf5OrqKumvJ5O++uqreuGFF/Tbb7+pcuXKatGihR588MFC7+OFF15QcnKy+vfvLwcHBw0aNEjdu3dXamqq2Wfq1KmqUqWKIiMj9dNPP8nT01PNmjXTyy+/XOxjBgDAVsqXL6/mzZtr1qxZSkxMVFZWlgICAjRkyBC9/PLLslgs+vrrr/Xvf/9bAwcO1O+//y5fX1+1bt1aPj4+Rd7vokWL9Pzzz+vBBx9UZmamWrdura+//jrP5dn/5OXlpV27dumNN97Qq6++qp9//lkVK1ZUcHCwZsyYIQ8Pj3zXmzlzpkaNGqUPPvhAVatW1fHjx63af/jhB506dUqLFy+2OoAeGBio48ePy9/fXzt37tTYsWPVsWNHZWRkKDAwUJ06dZKDA+cGceuwGDfr6QkASo2LFy+qatWqmjlzpgYPHmzvcAAAAIBSizPdALRv3z798MMPuueee5SamqopU6ZI0jUvRwMAAABwdRTdACRJb775phISEuTs7KyQkBDt2LGjyA9zAQAAAPAXLi8HAAAAAMBGeEIBAAAAAAA2QtENAAAAAICNUHQDAAAAAGAjFN0AAAAAANgIRTcAAAAAADZC0Q0AAAAAgI1QdAMAAAAAYCMU3QAAAAAA2AhFNwAAAAAANkLRDQAAAACAjVB0AwAAAABgIxTdAAAAAADYCEU3AAAAAAA2QtENAAAAAICNUHQDxWTr1q2yWCzaunWrvUMpkYrj86lRo4YGDBhQbDHdLgYMGKAaNWrYOwwAsELevLrbOW8eP35cFotFUVFR9g6lWOQ3nkmTJslisdgvKNxUFN0oVaKiomSxWAqcdu3aZe8QcYO+++47TZo0SefPn7d3KABQ6pE3b33kTRTk5MmTmjRpkuLi4uwdym3Pyd4BAEUxZcoUBQUF5Vleq1YtO0Tzl9atW+vPP/+Us7Oz3WIoyQr7+Xz33XeaPHmyBgwYIE9PT6u2hIQEOThwrPB6ffDBB8rJybF3GADsiLxZ+pA3b23jx4/XSy+9ZNN9nDx5UpMnT1aNGjXUpEkTm+4LV0fRjVIpPDxcd911l73DsOLg4CBXV1d7h2Ezly9flrOzc5GTd3F8Pi4uLje0/q3i4sWLKleuXKH7lylTxobRACgNyJs3H3kTV+Pk5CQnJ0qx2wWHvnDLycrKkpeXlwYOHJinLS0tTa6urnrxxRclSZmZmZowYYJCQkLk4eGhcuXKqVWrVtqyZUuedT/99FOFhISoQoUKcnd3V3BwsGbPnm22F3Tv1eeff66QkBC5ubmpcuXKevzxx/Xbb79Z9RkwYIDKly+v3377Td26dVP58uVVpUoVvfjii8rOzr7mmGvUqKEHH3xQGzduVJMmTeTq6qr69etr5cqVefr+9NNPeuSRR+Tl5aWyZcuqRYsWWrt2rVWf3LF8+umnGj9+vKpWraqyZcsqLS2twBiK+vn83aRJkzR69GhJUlBQkHn54/Hjx81x/vPetPPnz2vEiBEKCAiQi4uLatWqpWnTplmd2c29l+rNN9/U+++/r5o1a8rFxUV333239uzZkyeOH374QQ8//LC8vLzk6uqqu+66S19++WWBcee3n1mzZikwMFBubm66//77dejQIau+Bw4c0IABA3THHXfI1dVVvr6+GjRokM6cOZPnM7FYLDp8+LAee+wxVaxYUffdd5/Z/sknn5jfLy8vL/Xu3Vu//PKL1Tbyu6f7zTff1L333qtKlSrJzc1NISEhWr58+TXHCODWQ94kb9orb+bGM2DAAHl4eMjT01P9+/cv8FL5wuwn95aK7du366mnnlKlSpXk7u6ufv366dy5c3m2uW7dOrVq1UrlypVThQoV1KVLF8XHx1v1uZ7vW2HHU9A93YXJ623atFHDhg11+PBhtW3bVmXLllXVqlU1ffp0s8/WrVt19913S5IGDhxofjf+fl/57t271alTJ3l4eKhs2bK6//77tXPnTqt9XbhwQSNGjFCNGjXk4uIib29vPfDAA/rf//6XJ3YUjMMrKJVSU1P1xx9/WC2zWCyqVKmSypQpo+7du2vlypVasGCB1WVZq1evVkZGhnr37i3prz8mFi5cqD59+mjIkCG6cOGCPvzwQ4WFhen77783L8WJjo5Wnz591L59e02bNk2SdOTIEe3cuVPPP/98gXFGRUVp4MCBuvvuuxUZGalTp05p9uzZ2rlzp/bt22d1GVh2drbCwsLUvHlzvfnmm/rmm280c+ZM1axZU8OGDbvmZ3L06FE9+uijevrpp9W/f38tWrRIjzzyiNavX68HHnhAknTq1Cnde++9unTpkp577jlVqlRJixcv1r/+9S8tX75c3bt3t9rm1KlT5ezsrBdffFEZGRkFXuJW1M/nn3r06KEff/xR//3vfzVr1ixVrlxZklSlSpV8+1+6dEn333+/fvvtNz311FOqXr26vvvuO40bN07Jycl6++23rfovXbpUFy5c0FNPPSWLxaLp06erR48e+umnn8yzwfHx8WrZsqWqVq2ql156SeXKldOyZcvUrVs3rVixIs9nlJ+PP/5YFy5cUEREhC5fvqzZs2erXbt2OnjwoHx8fMzP7KefftLAgQPl6+ur+Ph4vf/++4qPj9euXbvyJOJHHnlEd955p15//XUZhiFJeu211/TKK6+oV69eevLJJ/X7779rzpw5at26dZ7v1z/Nnj1b//rXv9S3b19lZmbq008/1SOPPKI1a9aoS5cu1xwjgNKFvJkXedP+edMwDD300EP69ttv9fTTT6tevXpatWqV+vfvn6fv9e5n+PDh8vT01KRJk5SQkKB58+bp559/Ng9mSNJ//vMf9e/fX2FhYZo2bZouXbqkefPm6b777tO+ffusDlgX5vt2PePJz/Xk9XPnzqlTp07q0aOHevXqpeXLl2vs2LEKDg5WeHi46tWrpylTpmjChAkaOnSoWrVqJUm69957JUmbN29WeHi4QkJCNHHiRDk4OGjRokVq166dduzYoXvuuUeS9PTTT2v58uUaPny46tevrzNnzujbb7/VkSNH1KxZs0KNC5IMoBRZtGiRISnfycXFxey3YcMGQ5Lx1VdfWa3fuXNn44477jDnr1y5YmRkZFj1OXfunOHj42MMGjTIXPb8888b7u7uxpUrVwqMbcuWLYYkY8uWLYZhGEZmZqbh7e1tNGzY0Pjzzz/NfmvWrDEkGRMmTDCX9e/f35BkTJkyxWqbTZs2NUJCQq75uQQGBhqSjBUrVpjLUlNTDT8/P6Np06bmshEjRhiSjB07dpjLLly4YAQFBRk1atQwsrOzrcZyxx13GJcuXbrm/ovy+RRkxowZhiQjKSkp33H279/fnJ86dapRrlw548cff7Tq99JLLxmOjo7GiRMnDMMwjKSkJEOSUalSJePs2bNmvy+++CLP96R9+/ZGcHCwcfnyZXNZTk6Oce+99xp33nnnVWPP3Y+bm5vx66+/mst3795tSDJGjhxpLsvvc/3vf/9rSDK2b99uLps4caIhyejTp49V3+PHjxuOjo7Ga6+9ZrX84MGDhpOTk9Xy/v37G4GBgVb9/rn/zMxMo2HDhka7du2uOkYApQt5M3/kzZKRN1evXm1IMqZPn24uu3LlitGqVStDkrFo0aLr3k/udz4kJMTIzMw0l0+fPt2QZHzxxReGYfz1/9HT09MYMmSIVUwpKSmGh4eH1fLCft+uZzy5+T3X9eT1+++/35BkfPzxx+ayjIwMw9fX1+jZs6e5bM+ePXn2m/u53XnnnUZYWJiRk5NjLr906ZIRFBRkPPDAA+YyDw8PIyIiwsCN4fJylEpz585VdHS01bRu3TqzvV27dqpcubI+++wzc9m5c+cUHR2tRx991Fzm6OhoHoXOycnR2bNndeXKFd11111Wl814enrq4sWLio6OLnSMe/fu1enTp/XMM89Y3ZPVpUsX1a1bN8+ladJfRxP/rlWrVvrpp58KtT9/f3+ro7y5l1Lt27dPKSkpkqSvv/5a99xzj9XlyeXLl9fQoUN1/PhxHT582Gqb/fv3l5ub2zX3XZTPpzh8/vnnatWqlSpWrKg//vjDnDp06KDs7Gxt377dqv+jjz6qihUrmvO5R31zP+OzZ89q8+bN6tWrly5cuGBu78yZMwoLC9PRo0fzXOKYn27duqlq1arm/D333KPmzZvr66+/Npf9/XO9fPmy/vjjD7Vo0UKS8r1k65/fjZUrVyonJ0e9evWyGruvr6/uvPPOfC/1/Lu/7//cuXNKTU1Vq1atuFwMuEWRN/Mib9o/b3799ddycnKyujLB0dFRzz77rFW/ouxn6NChVs80GTZsmJycnMxcHB0drfPnz6tPnz5Wn4Wjo6OaN2+ebx691vetsOPJz/Xm9fLly+vxxx83552dnXXPPfcU6vsfFxeno0eP6rHHHtOZM2fMfV28eFHt27fX9u3bzdsNPD09tXv3bp08efKa20XBuLwcpdI999xz1QfCODk5qWfPnlq6dKkyMjLk4uKilStXKisry+qPB0lavHixZs6cqR9++EFZWVnm8r8/5fWZZ57RsmXLFB4erqpVq6pjx47q1auXOnXqVGAMP//8sySpTp06edrq1q2rb7/91mqZq6trnsvBKlasmO/9R/mpVatWnkuSa9euLemve7N8fX31888/q3nz5nnWrVevnhlzw4YNzeX5Pek2P0X5fIrD0aNHdeDAgQIvozt9+rTVfPXq1a3mc/+QyP2Mjx07JsMw9Morr+iVV14pcJt/L6jzc+edd+ZZVrt2bS1btsycP3v2rCZPnqxPP/00T5ypqal51v/n/4ujR4/KMIx89yVd++Fpa9as0auvvqq4uDhlZGSYy3lnKHBrIm/mRd7M62bnzZ9//ll+fn4qX7681fJ/fgeKsp9/5sfy5cvLz8/PvN/96NGjkv464JQfd3d3q/nCfN8KO578XG9er1atWp7vb8WKFXXgwIFC7UvSVS97T01NVcWKFTV9+nT1799fAQEBCgkJUefOndWvXz/dcccd19wP/g9FN25ZvXv31oIFC7Ru3Tp169ZNy5YtU926ddW4cWOzzyeffKIBAwaoW7duGj16tLy9veXo6KjIyEglJiaa/by9vRUXF6cNGzZo3bp1WrdunRYtWqR+/fpp8eLFxRKvo6NjsWynOBXmaL10cz6f/OTk5OiBBx7QmDFj8m3P/eMpV0GfsfH/75HOPar74osvKiwsLN++xfV6nV69eum7777T6NGj1aRJE5UvX145OTnq1KlTvq/3+uf/i5ycHFksFq1bty7fcf0z4f/djh079K9//UutW7fWe++9Jz8/P5UpU0aLFi3S0qVLb3xwAEol8uaNI2/mVRx50xb7yd3mf/7zH/n6+uZp/+eTxW39fbvevH6t/zfX2pckzZgxo8BXieXur1evXmrVqpVWrVqljRs3asaMGZo2bZpWrlyp8PDwa+4Lf6Hoxi2rdevW8vPz02effab77rtPmzdv1r///W+rPsuXL9cdd9yhlStXWh0tnDhxYp7tOTs7q2vXruratatycnL0zDPPaMGCBXrllVfy/Yc+MDBQ0l/vyPznUdSEhASzvbjkHgX++zh+/PFHSTIfBBIYGKiEhIQ86/7www9WMRfF9X4+BbmeM601a9ZUenq6OnToUJSQ88g9alumTJkb2mbuEeS/+/HHH83/D+fOndOmTZs0efJkTZgw4arrFaRmzZoyDENBQUF5/ki6lhUrVsjV1VUbNmywep3MokWLrms7AG4t5E3y5vW60bwZGBioTZs2KT093aqo/OdnXpT9HD16VG3btjXn09PTlZycrM6dO0v667OQ/joAUlyfR2HHk58byesFKei7kTt2d3f3Qo3dz89PzzzzjJ555hmdPn1azZo102uvvUbRfR24pxu3LAcHBz388MP66quv9J///EdXrlzJc4lc7lHCvx8V3L17t2JiYqz6/fM1Tg4ODmrUqJEkWV2a+3d33XWXvL29NX/+fKs+69at05EjR4r9CdEnT57UqlWrzPm0tDR9/PHHatKkiXkEt3Pnzvr++++txnfx4kW9//77qlGjhurXr1+kfRfl8ylI7vunC3pdyN/16tVLMTEx2rBhQ5628+fP68qVK9e1b29vb7Vp00YLFixQcnJynvbff/+9UNtZvXq11b1l33//vXbv3m0mp/y+d5LyPDX2anr06CFHR0dNnjw5z3YMw8jz/+TvHB0dZbFYrF5zcvz4ca1evbrQ+wdw6yFvkjdvdt7s3Lmzrly5onnz5pnLsrOzNWfOnBvez/vvv291+8O8efN05coVMxeHhYXJ3d1dr7/+ulW/wsZ+I+PJz43k9YIU9N0ICQlRzZo19eabbyo9PT3Perljz87OznPLm7e3t/z9/a/7e3q740w3SqV169aZR5n/7t5777W6x+TRRx/VnDlzNHHiRAUHB5v3YOV68MEHtXLlSnXv3l1dunRRUlKS5s+fr/r161v9I/Tkk0/q7NmzateunapVq6aff/5Zc+bMUZMmTfJsM1eZMmU0bdo0DRw4UPfff7/69OljvvqkRo0aGjlyZDF9Gn+pXbu2Bg8erD179sjHx0cfffSRTp06ZXX28qWXXtJ///tf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3apmzZrJxcVFtWrVUlRUlK2HBwCATVF0AwCAq9q2bZsiIiK0a9cuRUdHKysrSx07dtTFixet+g0ZMkTJycnmNH36dLMtOztbXbp0UWZmpr777jstXrxYUVFRmjBhgtknKSlJXbp0Udu2bRUXF6cRI0boySef1IYNG27aWAEAKG52LboLc+T88uXLioiIUKVKlVS+fHn17NlTp06dsurDkXMAAGxn/fr1GjBggBo0aKDGjRsrKipKJ06cUGxsrFW/smXLytfX15zc3d3Nto0bN+rw4cP65JNP1KRJE4WHh2vq1KmaO3euMjMzJUnz589XUFCQZs6cqXr16mn48OF6+OGHNWvWrJs6XgAAipNdi+7CHDkfOXKkvvrqK33++efatm2bTp48qR49epjtHDkHAODmSk1NlSR5eXlZLV+yZIkqV66shg0baty4cbp06ZLZFhMTo+DgYPn4+JjLwsLClJaWpvj4eLNPhw4drLYZFhammJgYWw0FAACbc7LnztevX281HxUVJW9vb8XGxqp169ZKTU3Vhx9+qKVLl6pdu3aSpEWLFqlevXratWuXWrRoYR45/+abb+Tj46MmTZpo6tSpGjt2rCZNmiRnZ2erI+eSVK9ePX377beaNWuWwsLCbvq4AQAorXJycjRixAi1bNlSDRs2NJc/9thjCgwMlL+/vw4cOKCxY8cqISFBK1eulCSlpKRYFdySzPmUlJSr9klLS9Off/4pNze3PPFkZGQoIyPDnE9LSyuegQIAUExK1D3d/zxyHhsbq6ysLKuj3nXr1lX16tXNo94cOQcA4OaJiIjQoUOH9Omnn1otHzp0qMLCwhQcHKy+ffvq448/1qpVq5SYmGjTeCIjI+Xh4WFOAQEBNt0fAADXq8QU3fkdOU9JSZGzs7M8PT2t+vr4+FzzqHhu29X65B45/6eMjAylpaVZTQAA3O6GDx+uNWvWaMuWLapWrdpV+zZv3lySdOzYMUmSr69vnmey5M77+vpetY+7u3u+Z7klady4cUpNTTWnX3755foHBgCADZWYorugI+f2wFFzAAD+j2EYGj58uFatWqXNmzcrKCjomuvExcVJkvz8/CRJoaGhOnjwoE6fPm32iY6Olru7u+rXr2/22bRpk9V2oqOjFRoaWuB+XFxc5O7ubjUBAFCSlIiiu6Aj576+vsrMzNT58+et+p86deqaR8Vz267Wp6Aj5xw1BwDg/0REROiTTz7R0qVLVaFCBaWkpCglJcW8WiwxMVFTp05VbGysjh8/ri+//FL9+vVT69at1ahRI0lSx44dVb9+fT3xxBPav3+/NmzYoPHjxysiIkIuLi6SpKefflo//fSTxowZox9++EHvvfeeli1bppEjR9pt7AAA3Ci7Ft3XOnIeEhKiMmXKWB31TkhI0IkTJ8yj3rY4cs5RcwAA/s+8efOUmpqqNm3ayM/Pz5w+++wzSZKzs7O++eYbdezYUXXr1tULL7ygnj176quvvjK34ejoqDVr1sjR0VGhoaF6/PHH1a9fP02ZMsXsExQUpLVr1yo6OlqNGzfWzJkztXDhQh56CgAo1ez69PKIiAgtXbpUX3zxhXnkXJI8PDzk5uYmDw8PDR48WKNGjZKXl5fc3d317LPPKjQ0VC1atJBkfeR8+vTpSklJyffI+bvvvqsxY8Zo0KBB2rx5s5YtW6a1a9fabewAAJQWhmFctT0gIEDbtm275nYCAwP19ddfX7VPmzZttG/fvuuKDwCAksyuZ7qvdeRckmbNmqUHH3xQPXv2VOvWreXr62u+fkTiyDkAAAAAoOSy65nuax05lyRXV1fNnTtXc+fOLbAPR84BAAAAACVRiXiQGgAAAAAAtyKKbgAAAAAAbISiGwAAAAAAG6HoBgAAAADARii6AQAAAACwEYpuAAAAAABshKIbAAAAAAAboegGAAAAAMBGKLoBAAAAALARim4AAAAAAGyEohsAAAAAABuh6AYAAAAAwEYougEAAAAAsBGKbgAAAAAAbISiGwAAAAAAG6HoBgAAAADARii6AQAAAACwEYpuAAAAAABshKIbAAAAAAAboegGAAAAAMBGKLoBAAAAALARim4AAAAAAGyEohsAAAAAABuh6AYAAAAAwEYougEAAAAAsBGKbgAAAAAAbISiGwAAAAAAG6HoBgAAAADARii6AQAAAACwEYpuAAAAAABshKIbAAAAAAAboegGAAAAAMBGKLoBAAAAALARim4AAAAAAGyEohsAAAAAABuh6AYAAAAAwEYougEAAAAAsBGKbgAAAAAAbISiGwAAAAAAG6HoBgAAAADARii6AQAAAACwEYpuAAAAAABshKIbAABcVWRkpO6++25VqFBB3t7e6tatmxISEqz6XL58WREREapUqZLKly+vnj17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U1Z9cucLulfcxcVF7u7uVhMAAKWNvfI1AAD4P0U6012rVi298sor2rVrl4KDg1WmTBmr9ueee65YgvunX3/9VWfOnJGfn58kKTQ0VOfPn1dsbKxCQkIkSZs3b1ZOTo6aN29u9vn3v/+trKwsM87o6GjVqVMn30vLAQC4VdgrXwMAgP9TpKL7/fffV/ny5bVt2zZt27bNqs1isRQ6iaenp5tnraW/3isaFxcnLy8veXl5afLkyerZs6d8fX2VmJioMWPGqFatWgoLC5Mk1atXT506ddKQIUM0f/58ZWVlafjw4erdu7f8/f0lSY899pgmT56swYMHa+zYsTp06JBmz56tWbNmFWXoAACUGsWVrwEAQNEVqehOSkoqlp3v3btXbdu2Nedz76Pu37+/5s2bpwMHDmjx4sU6f/68/P391bFjR02dOtXqXd1LlizR8OHD1b59ezk4OKhnz5565513zHYPDw9t3LhRERERCgkJUeXKlTVhwgReFwYAuOUVV74GAABFV+T3dBeHNm3ayDCMAts3bNhwzW14eXlp6dKlV+3TqFEj7dix47rjAwAAAADgRhSp6B40aNBV2z/66KMiBQMAAIoP+RoAAPsr8ivD/i4rK0uHDh3S+fPn1a5du2IJDAAA3BjyNQAA9lekonvVqlV5luXk5GjYsGGqWbPmDQcFAABuHPm6+ISM/tjeIdwSYmf0s3cIAHDTFek93fluyMFBo0aN4qngAACUYORrAABurmIruiUpMTFRV65cKc5NAgCAYka+BgDg5inS5eW5r/bKZRiGkpOTtXbtWvXv379YAgMAADeGfA0AgP0Vqejet2+f1byDg4OqVKmimTNnXvNJqQAA4OYgXwMAYH9FKrq3bNlS3HEAAIBiRr4GAMD+ilR05/r999+VkJAgSapTp46qVKlSLEEBAIDiQ74GAMB+ivQgtYsXL2rQoEHy8/NT69at1bp1a/n7+2vw4MG6dOlScccIAACKgHwNAID9FanoHjVqlLZt26avvvpK58+f1/nz5/XFF19o27ZteuGFF4o7RgAAUATkawAA7K9Il5evWLFCy5cvV5s2bcxlnTt3lpubm3r16qV58+YVV3wAAKCIyNcAANhfkc50X7p0ST4+PnmWe3t7c7kaAAAlBPkaAAD7K1LRHRoaqokTJ+ry5cvmsj///FOTJ09WaGhosQUHAACK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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Recuento segun subscripciones del cliente\n",
        "\n",
        "print('Recuento de evasión por si tiene multiples servicios de linea:')\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['MultipleLines']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene servicio de internet:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['InternetService']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene servicio de telefono:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['PhoneService']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene soporte tecnico:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['TechSupport']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene streaming de TV:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['StreamingTV']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene streaming de peliculas:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['StreamingMovies']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene respaldo en linea:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['OnlineBackup']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene seguridad en linea:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['OnlineSecurity']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene proteccion de dispositivo:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['DeviceProtection']))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uXIh_3xG7izB",
        "outputId": "445fbc38-7ce0-48ce-d845-50533dea8746"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recuento de evasión por si tiene multiples servicios de linea:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "MultipleLines    No  No phone service   Yes\n",
              "Churn                                      \n",
              "No             2541               512  2121\n",
              "Yes             849               170   850"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-806da221-b2fb-4f2f-b97c-a8006ff96274\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>MultipleLines</th>\n",
              "      <th>No</th>\n",
              "      <th>No phone service</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2541</td>\n",
              "      <td>512</td>\n",
              "      <td>2121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>849</td>\n",
              "      <td>170</td>\n",
              "      <td>850</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-806da221-b2fb-4f2f-b97c-a8006ff96274')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-806da221-b2fb-4f2f-b97c-a8006ff96274 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-806da221-b2fb-4f2f-b97c-a8006ff96274');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6fff0b4f-46f9-4f20-a752-8254a456e7d9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6fff0b4f-46f9-4f20-a752-8254a456e7d9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6fff0b4f-46f9-4f20-a752-8254a456e7d9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1196,\n        \"min\": 849,\n        \"max\": 2541,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          849,\n          2541\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No phone service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241,\n        \"min\": 170,\n        \"max\": 512,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          170,\n          512\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 898,\n        \"min\": 850,\n        \"max\": 2121,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          850,\n          2121\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene servicio de internet:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "InternetService   DSL  Fiber optic    No\n",
              "Churn                                   \n",
              "No               1962         1799  1413\n",
              "Yes               459         1297   113"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-74e99cc2-d0cc-4949-9071-473f19c73bd2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>InternetService</th>\n",
              "      <th>DSL</th>\n",
              "      <th>Fiber optic</th>\n",
              "      <th>No</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1962</td>\n",
              "      <td>1799</td>\n",
              "      <td>1413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>459</td>\n",
              "      <td>1297</td>\n",
              "      <td>113</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74e99cc2-d0cc-4949-9071-473f19c73bd2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74e99cc2-d0cc-4949-9071-473f19c73bd2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74e99cc2-d0cc-4949-9071-473f19c73bd2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6cb7091d-b1c0-4cf7-8ba2-89cd5f5b9d8f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6cb7091d-b1c0-4cf7-8ba2-89cd5f5b9d8f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6cb7091d-b1c0-4cf7-8ba2-89cd5f5b9d8f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DSL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1062,\n        \"min\": 459,\n        \"max\": 1962,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          459,\n          1962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fiber optic\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 354,\n        \"min\": 1297,\n        \"max\": 1799,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1297,\n          1799\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 919,\n        \"min\": 113,\n        \"max\": 1413,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          113,\n          1413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene servicio de telefono:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "PhoneService   No   Yes\n",
              "Churn                  \n",
              "No            512  4662\n",
              "Yes           170  1699"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-545b7bb4-8700-40ad-aafe-45a23e9fc124\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>PhoneService</th>\n",
              "      <th>No</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>512</td>\n",
              "      <td>4662</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>170</td>\n",
              "      <td>1699</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-545b7bb4-8700-40ad-aafe-45a23e9fc124')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-545b7bb4-8700-40ad-aafe-45a23e9fc124 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-545b7bb4-8700-40ad-aafe-45a23e9fc124');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-58eb3c34-ab4a-457c-bdc2-801f0c2ebee8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58eb3c34-ab4a-457c-bdc2-801f0c2ebee8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-58eb3c34-ab4a-457c-bdc2-801f0c2ebee8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241,\n        \"min\": 170,\n        \"max\": 512,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          170,\n          512\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2095,\n        \"min\": 1699,\n        \"max\": 4662,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1699,\n          4662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene soporte tecnico:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "TechSupport    No  No internet service   Yes\n",
              "Churn                                       \n",
              "No           2027                 1413  1734\n",
              "Yes          1446                  113   310"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-508bccf7-b4c6-42ee-a775-05a93e5abba7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>TechSupport</th>\n",
              "      <th>No</th>\n",
              "      <th>No internet service</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2027</td>\n",
              "      <td>1413</td>\n",
              "      <td>1734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1446</td>\n",
              "      <td>113</td>\n",
              "      <td>310</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-508bccf7-b4c6-42ee-a775-05a93e5abba7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-508bccf7-b4c6-42ee-a775-05a93e5abba7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-508bccf7-b4c6-42ee-a775-05a93e5abba7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b68abb25-3815-4831-a670-1e65dc08a220\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b68abb25-3815-4831-a670-1e65dc08a220')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b68abb25-3815-4831-a670-1e65dc08a220 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 410,\n        \"min\": 1446,\n        \"max\": 2027,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1446,\n          2027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No internet service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 919,\n        \"min\": 113,\n        \"max\": 1413,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          113,\n          1413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1006,\n        \"min\": 310,\n        \"max\": 1734,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          310,\n          1734\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene streaming de TV:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "StreamingTV    No  No internet service   Yes\n",
              "Churn                                       \n",
              "No           1868                 1413  1893\n",
              "Yes           942                  113   814"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f4b0d166-72f1-4e26-8a1a-07f50b29681b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>StreamingTV</th>\n",
              "      <th>No</th>\n",
              "      <th>No internet service</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1868</td>\n",
              "      <td>1413</td>\n",
              "      <td>1893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>942</td>\n",
              "      <td>113</td>\n",
              "      <td>814</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4b0d166-72f1-4e26-8a1a-07f50b29681b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f4b0d166-72f1-4e26-8a1a-07f50b29681b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f4b0d166-72f1-4e26-8a1a-07f50b29681b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-be81e176-f68e-45ae-8e8c-e5c720bbb03e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be81e176-f68e-45ae-8e8c-e5c720bbb03e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-be81e176-f68e-45ae-8e8c-e5c720bbb03e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654,\n        \"min\": 942,\n        \"max\": 1868,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          942,\n          1868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No internet service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 919,\n        \"min\": 113,\n        \"max\": 1413,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          113,\n          1413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 762,\n        \"min\": 814,\n        \"max\": 1893,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          814,\n          1893\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene streaming de peliculas:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "StreamingMovies    No  No internet service   Yes\n",
              "Churn                                           \n",
              "No               1847                 1413  1914\n",
              "Yes               938                  113   818"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00f013a3-91d9-4ad2-9247-e856722e1518\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>StreamingMovies</th>\n",
              "      <th>No</th>\n",
              "      <th>No internet service</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1847</td>\n",
              "      <td>1413</td>\n",
              "      <td>1914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>938</td>\n",
              "      <td>113</td>\n",
              "      <td>818</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00f013a3-91d9-4ad2-9247-e856722e1518')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-00f013a3-91d9-4ad2-9247-e856722e1518 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-00f013a3-91d9-4ad2-9247-e856722e1518');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-12f30672-86b1-4533-8b89-63b47d7b856f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12f30672-86b1-4533-8b89-63b47d7b856f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-12f30672-86b1-4533-8b89-63b47d7b856f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 642,\n        \"min\": 938,\n        \"max\": 1847,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          938,\n          1847\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No internet service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 919,\n        \"min\": 113,\n        \"max\": 1413,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          113,\n          1413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 774,\n        \"min\": 818,\n        \"max\": 1914,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          818,\n          1914\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene respaldo en linea:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "OnlineBackup    No  No internet service   Yes\n",
              "Churn                                        \n",
              "No            1855                 1413  1906\n",
              "Yes           1233                  113   523"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eef35d02-fef3-46c1-9083-4e106fad1e79\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>OnlineBackup</th>\n",
              "      <th>No</th>\n",
              "      <th>No internet service</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1855</td>\n",
              "      <td>1413</td>\n",
              "      <td>1906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1233</td>\n",
              "      <td>113</td>\n",
              "      <td>523</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eef35d02-fef3-46c1-9083-4e106fad1e79')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eef35d02-fef3-46c1-9083-4e106fad1e79 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eef35d02-fef3-46c1-9083-4e106fad1e79');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5ffc4d3a-8401-4769-9df3-1596b3282d0c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ffc4d3a-8401-4769-9df3-1596b3282d0c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5ffc4d3a-8401-4769-9df3-1596b3282d0c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 439,\n        \"min\": 1233,\n        \"max\": 1855,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1233,\n          1855\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No internet service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 919,\n        \"min\": 113,\n        \"max\": 1413,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          113,\n          1413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 977,\n        \"min\": 523,\n        \"max\": 1906,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          523,\n          1906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene seguridad en linea:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "OnlineSecurity    No  No internet service   Yes\n",
              "Churn                                          \n",
              "No              2037                 1413  1724\n",
              "Yes             1461                  113   295"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c83df069-75a6-4028-9731-9c6cc2e7e769\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>No</th>\n",
              "      <th>No internet service</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2037</td>\n",
              "      <td>1413</td>\n",
              "      <td>1724</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1461</td>\n",
              "      <td>113</td>\n",
              "      <td>295</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c83df069-75a6-4028-9731-9c6cc2e7e769')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c83df069-75a6-4028-9731-9c6cc2e7e769 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c83df069-75a6-4028-9731-9c6cc2e7e769');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ab341372-766b-460e-b429-5c8744f531b0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab341372-766b-460e-b429-5c8744f531b0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ab341372-766b-460e-b429-5c8744f531b0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 407,\n        \"min\": 1461,\n        \"max\": 2037,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1461,\n          2037\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No internet service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 919,\n        \"min\": 113,\n        \"max\": 1413,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          113,\n          1413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1010,\n        \"min\": 295,\n        \"max\": 1724,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          295,\n          1724\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene proteccion de dispositivo:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "DeviceProtection    No  No internet service   Yes\n",
              "Churn                                            \n",
              "No                1884                 1413  1877\n",
              "Yes               1211                  113   545"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2965adf6-c140-49e0-b10f-c4448e459cea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>DeviceProtection</th>\n",
              "      <th>No</th>\n",
              "      <th>No internet service</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1884</td>\n",
              "      <td>1413</td>\n",
              "      <td>1877</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1211</td>\n",
              "      <td>113</td>\n",
              "      <td>545</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2965adf6-c140-49e0-b10f-c4448e459cea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2965adf6-c140-49e0-b10f-c4448e459cea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2965adf6-c140-49e0-b10f-c4448e459cea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3e083152-37aa-453f-9132-ed1e1508872c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e083152-37aa-453f-9132-ed1e1508872c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3e083152-37aa-453f-9132-ed1e1508872c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 475,\n        \"min\": 1211,\n        \"max\": 1884,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1211,\n          1884\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No internet service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 919,\n        \"min\": 113,\n        \"max\": 1413,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          113,\n          1413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 941,\n        \"min\": 545,\n        \"max\": 1877,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          545,\n          1877\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Recuento segun tipo de pago del cliente\n",
        "\n",
        "print(\"\\nRecuento de evasión por tipo de contrato:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['Contract']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por forma de pago:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['PaymentMethod']))\n",
        "\n",
        "print(\"\\nRecuento de evasión por si tiene facturacion en linea:\")\n",
        "display(pd.crosstab(datos_telecom['Churn'], datos_telecom['PaperlessBilling']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "id": "zPNrlrzp4U95",
        "outputId": "c8f8c527-338c-468d-d866-e21e7d91d38e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por tipo de contrato:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Contract  Month-to-month  One year  Two year\n",
              "Churn                                       \n",
              "No                  2220      1307      1647\n",
              "Yes                 1655       166        48"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88829d81-83e5-4275-b1f9-6499b177ee70\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Contract</th>\n",
              "      <th>Month-to-month</th>\n",
              "      <th>One year</th>\n",
              "      <th>Two year</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2220</td>\n",
              "      <td>1307</td>\n",
              "      <td>1647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>1655</td>\n",
              "      <td>166</td>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88829d81-83e5-4275-b1f9-6499b177ee70')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88829d81-83e5-4275-b1f9-6499b177ee70 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88829d81-83e5-4275-b1f9-6499b177ee70');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4d9aaedb-ddac-4165-8caf-6e6ba29f3d13\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d9aaedb-ddac-4165-8caf-6e6ba29f3d13')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4d9aaedb-ddac-4165-8caf-6e6ba29f3d13 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month-to-month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 399,\n        \"min\": 1655,\n        \"max\": 2220,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1655,\n          2220\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"One year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 806,\n        \"min\": 166,\n        \"max\": 1307,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          166,\n          1307\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Two year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1130,\n        \"min\": 48,\n        \"max\": 1647,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          48,\n          1647\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por forma de pago:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "PaymentMethod  Bank transfer (automatic)  Credit card (automatic)  \\\n",
              "Churn                                                               \n",
              "No                                  1286                     1290   \n",
              "Yes                                  258                      232   \n",
              "\n",
              "PaymentMethod  Electronic check  Mailed check  \n",
              "Churn                                          \n",
              "No                         1294          1304  \n",
              "Yes                        1071           308  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b8f84f79-5a00-4776-951f-590369bf8c16\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>Bank transfer (automatic)</th>\n",
              "      <th>Credit card (automatic)</th>\n",
              "      <th>Electronic check</th>\n",
              "      <th>Mailed check</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1286</td>\n",
              "      <td>1290</td>\n",
              "      <td>1294</td>\n",
              "      <td>1304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>258</td>\n",
              "      <td>232</td>\n",
              "      <td>1071</td>\n",
              "      <td>308</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8f84f79-5a00-4776-951f-590369bf8c16')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b8f84f79-5a00-4776-951f-590369bf8c16 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b8f84f79-5a00-4776-951f-590369bf8c16');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5e55d9e7-5ac6-4c91-a222-b8aec1528b02\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e55d9e7-5ac6-4c91-a222-b8aec1528b02')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5e55d9e7-5ac6-4c91-a222-b8aec1528b02 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bank transfer (automatic)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 726,\n        \"min\": 258,\n        \"max\": 1286,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          258,\n          1286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Credit card (automatic)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 748,\n        \"min\": 232,\n        \"max\": 1290,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          232,\n          1290\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Electronic check\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 157,\n        \"min\": 1071,\n        \"max\": 1294,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1071,\n          1294\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mailed check\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 704,\n        \"min\": 308,\n        \"max\": 1304,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          308,\n          1304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Recuento de evasión por si tiene facturacion en linea:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "PaperlessBilling    No   Yes\n",
              "Churn                       \n",
              "No                2403  2771\n",
              "Yes                469  1400"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd06af0f-c412-467e-8bf1-8db60e70718d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>No</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2403</td>\n",
              "      <td>2771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>469</td>\n",
              "      <td>1400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd06af0f-c412-467e-8bf1-8db60e70718d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd06af0f-c412-467e-8bf1-8db60e70718d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd06af0f-c412-467e-8bf1-8db60e70718d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c57f1a08-5264-4ac3-a01f-90371b9ae5fe\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c57f1a08-5264-4ac3-a01f-90371b9ae5fe')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c57f1a08-5264-4ac3-a01f-90371b9ae5fe button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1367,\n        \"min\": 469,\n        \"max\": 2403,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          469,\n          2403\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 969,\n        \"min\": 1400,\n        \"max\": 2771,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1400,\n          2771\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LPlo2-tbcPsT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Conteo de evasión por variables numéricas"
      ],
      "metadata": {
        "id": "1FJ0ZhjjCE3x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig,axs = plt.subplots(2,2,figsize=(10,10))\n",
        "\n",
        "fig.suptitle('Distribución de variables numéricas', fontsize= 18)\n",
        "\n",
        "sns.histplot(data=datos_telecom,x='tenure',hue='Churn',kde= True, ax=axs[0,0])\n",
        "axs[0,0].set_title('Evasion por meses de servicio')\n",
        "\n",
        "sns.histplot(data=datos_telecom,x='Charges.Monthly',hue='Churn', kde= True, ax=axs[0,1])\n",
        "axs[0,1].set_title('Evasión por Gasto mensual')\n",
        "\n",
        "sns.histplot(data=datos_telecom,x='Charges.Total',hue='Churn', kde= True, ax=axs[1,0])\n",
        "axs[1,0].set_title('Evasión por Gasto total')\n",
        "\n",
        "sns.histplot(data=datos_telecom,x='Charges.Daily',hue='Churn', kde= True, ax=axs[1,1])\n",
        "axs[1,1].set_title('Evasión por Gasto diario')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        },
        "id": "rdff-Da4KCaH",
        "outputId": "3d4f58e3-37d6-47e8-ade2-d017e9a818df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 4 Axes>"
            ],
            "image/png": "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EREREZEJMOEmIiIiIiIiMgEm3EREREREREQmwISbiIiIiIiIyASYcBMRERERERGZABNuIiIiIiIiIhNgwk1ERERERERkAky4iYiIiIiIiEyACTcRERERERGRCTDhJiIiIiIiIjIBJtxEREREREREJsCEm4iIiIiIiMgEmHATERERERERmQATbiIiIiIiIiITYMJNREREREREZAJMuImIiIiIiIhMgAk3ERERERERkQkw4SYiIiIiIiIyASbcRERERERERCbAhJuIiIiIiIjIBJhwExEREREREZkAE24iIiIiIiIiE2DCTURERERERGQCTLiJiIiIiIiITIAJNxEREREREZEJMOEmIiIiIiIiMgEm3EREREREREQmwISbiIiIiIiIyASYcBMRERERERGZgNkT7jt37mDQoEGoVq0arKysEBQUhOPHj0vzhRCYNm0aPDw8YGVlhU6dOuHKlSsGdSQmJmLgwIGwt7eHg4MDXnvtNaSlpVX0phARERERERFJzJpwP3z4EGFhYVCpVNi6dSsuXLiAzz//HI6OjlKZefPmYdGiRVixYgWOHDkCGxsbdO3aFVlZWVKZgQMH4vz589i5cye2bNmC/fv3Y8SIEebYJCIiIiIiIiIAgNKcK587dy68vb2xevVqaVqNGjWk/wshsGDBAkyZMgV9+vQBAKxbtw5ubm7YvHkzBgwYgKioKGzbtg3Hjh1DSEgIAGDx4sXo0aMHPvvsM3h6elbsRhERERERERHBzFe4f//9d4SEhKBfv35wdXVF48aN8eWXX0rzo6OjERsbi06dOknTNBoNWrRogUOHDgEADh06BAcHBynZBoBOnTpBLpfjyJEjFbcxRERERERERAWYNeG+fv06li9fjjp16mD79u0YOXIk3nrrLaxduxYAEBsbCwBwc3MzWM7NzU2aFxsbC1dXV4P5SqUSTk5OUplHZWdnIyUlxeBFREREREREZExm7VKu0+kQEhKC2bNnAwAaN26Mc+fOYcWKFYiIiDDZeufMmYMPP/zQZPUTERERERERmfUKt4eHBwIDAw2mBQQEICYmBgDg7u4OAIiLizMoExcXJ81zd3dHfHy8wfy8vDwkJiZKZR41efJkJCcnS69bt24ZZXuIiIieBVqtFlOnTkWNGjVgZWWFWrVqYdasWRBCSGX4lBEiIiIzJ9xhYWG4dOmSwbTLly/D19cXQP4Aau7u7ti9e7c0PyUlBUeOHEFoaCgAIDQ0FElJSYiMjJTK7NmzBzqdDi1atChyvWq1Gvb29gYvIiIiKp25c+di+fLlWLJkCaKiojB37lzMmzcPixcvlsrwKSNERERm7lI+fvx4tGrVCrNnz0b//v1x9OhRrFq1CqtWrQIAyGQyjBs3Dh999BHq1KmDGjVqYOrUqfD09ETfvn0B5F8R79atG4YPH44VK1YgNzcXY8aMwYABAzhCORERkQkcPHgQffr0Qc+ePQEAfn5++P7773H06FEAfMoIERGRnlmvcDdr1gy//vorvv/+ezRo0ACzZs3CggULMHDgQKnMpEmTMHbsWIwYMQLNmjVDWloatm3bBktLS6nM+vXr4e/vj44dO6JHjx5o3bq1lLQTERGRcbVq1Qq7d+/G5cuXAQCnT5/Gv//+i+7duwMw3VNGOOgpERFVNWa9wg0AvXr1Qq9evYqdL5PJMHPmTMycObPYMk5OTtiwYYMpwiMiIqJHvPfee0hJSYG/vz8UCgW0Wi0+/vhj6YS5qZ4ywkFPiYioqjHrFW4iIiKqejZu3Ij169djw4YNOHHiBNauXYvPPvtMeqynqXDQUyIiqmrMfoWbiIiIqpaJEyfivffew4ABAwAAQUFBuHnzJubMmYOIiAiDp4x4eHhIy8XFxSE4OBhA+Z4yolaroVarTbBFREREpsEr3ERERFQmGRkZkMsNf0IoFArodDoApnvKCBERUVXDK9xERERUJr1798bHH38MHx8f1K9fHydPnsT8+fMxbNgwAHzKCBERkR4TbiIiIiqTxYsXY+rUqRg1ahTi4+Ph6emJN954A9OmTZPKTJo0Cenp6RgxYgSSkpLQunXrIp8yMmbMGHTs2BFyuRzh4eFYtGiROTaJiIjIJJhwExERUZnY2dlhwYIFWLBgQbFl+JQRIiIi3sNNREREREREZBJMuImIiIiIiIhMgAk3ERERERERkQkw4SYiIiIiIiIyASbcRERERERERCbAhJuIiIiIiIjIBPhYMBOJirlfJeokIiIiIiIi02DCbWT37t0DAAyavdHk6yAiIiIiIqLKiwm3kSUlJQEAevYfhHp1ahq17ktXruPPjd9J6yAiIiIiIqLKiwm3iVRzdYWXr69R60xITjNqfURERERERGQ6HDSNiIiIiIiIyASYcBMRERERERGZABNuIiIiIiIiIhNgwk1ERERERERkAky4iYiIiIiIiEyACTcRERERERGRCTDhJiIiIiIiIjIBJtxEREREREREJsCEm4iIiIiIiMgEmHATERERERERmQATbiIiIiIiIiITYMJNREREREREZAJMuImIiIiIiIhMgAk3ERERERERkQkw4SYiIiIiIiIyASbcRERERERERCbAhJuIiIiIiIjIBJhwExEREREREZkAE24iIiIiIiIiE2DCTURERERERGQCZk24Z8yYAZlMZvDy9/eX5mdlZWH06NGoVq0abG1tER4ejri4OIM6YmJi0LNnT1hbW8PV1RUTJ05EXl5eRW8KERERERERkQGluQOoX78+du3aJb1XKv8/pPHjx+PPP//Epk2boNFoMGbMGLzwwgs4cOAAAECr1aJnz55wd3fHwYMHce/ePQwePBgqlQqzZ8+u8G0hIiIiIiIi0jN7wq1UKuHu7l5oenJyMr7++mts2LABHTp0AACsXr0aAQEBOHz4MFq2bIkdO3bgwoUL2LVrF9zc3BAcHIxZs2bh3XffxYwZM2BhYVHRm0NEREREREQEoBLcw33lyhV4enqiZs2aGDhwIGJiYgAAkZGRyM3NRadOnaSy/v7+8PHxwaFDhwAAhw4dQlBQENzc3KQyXbt2RUpKCs6fP1/sOrOzs5GSkmLwIiIiIiIiIjImsybcLVq0wJo1a7Bt2zYsX74c0dHReO6555CamorY2FhYWFjAwcHBYBk3NzfExsYCAGJjYw2Sbf18/bzizJkzBxqNRnp5e3sbd8OIiIiIiIjomWfWLuXdu3eX/t+wYUO0aNECvr6+2LhxI6ysrEy23smTJ2PChAnS+5SUFCbdREREREREZFRm71JekIODA+rWrYurV6/C3d0dOTk5SEpKMigTFxcn3fPt7u5eaNRy/fui7gvXU6vVsLe3N3gRERERERERGVOlSrjT0tJw7do1eHh4oGnTplCpVNi9e7c0/9KlS4iJiUFoaCgAIDQ0FGfPnkV8fLxUZufOnbC3t0dgYGCFx09ERERERESkZ9Yu5f/973/Ru3dv+Pr64u7du5g+fToUCgVefvllaDQavPbaa5gwYQKcnJxgb2+PsWPHIjQ0FC1btgQAdOnSBYGBgXj11Vcxb948xMbGYsqUKRg9ejTUarU5N42IiIiIiIiecWZNuG/fvo2XX34ZDx48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oqOjuf3222lsbGzFo2gdRzpXHo+HRx99lD59+mCxWEhNTeXmm2+muLi4RRnBOleScAfJf//7XyZOnMizzz7L6tWr6devH2PGjKG8vDzcoR2TpqYm+vXrx+TJkw+5/LXXXuPNN9/k3XffZdmyZVgsFsaMGYPT6WzlSI/NwoULmTBhAkuXLmX27Nl4PB7OP/98mpqaAus8+OCDfPvtt0yZMoWFCxdSXFzMFVdcEcaojywtLY1XXnmFVatWsXLlSs455xx+85vfsGnTJqD9Hc+BVqxYwd///nf69u3bYn57PKZevXpRUlISmBYtWhRY1h6Pp6amhpEjR6LX65k5cyabN2/mz3/+MzExMYF12tP1YcWKFS1+PrNnzwbg6quvBtrnz0gER0e8b7SGjnT9DpWOdh0NpVdffZV33nmHv/3tb+Tl5fHqq6/y2muv8dZbbwXWOZXPVTC+r48bN45NmzYxe/Zspk+fzo8//sidd97ZWofQao50rux2O6tXr+bpp59m9erVTJ06la1bt3LppZe2WC9o50oVQTF06FB1woQJgc8+n09NTU1VJ02aFMaoTgygTps2LfDZ7/erycnJ6uuvvx6YV1tbqxqNRvWzzz4LQ4THr7y8XAXUhQsXqqraHL9er1enTJkSWCcvL08F1CVLloQrzOMWExOj/utf/2rXx9PQ0KB269ZNnT17tnrWWWep999/v6qq7fNn9Oyzz6r9+vU75LL2eDyqqqqPPvqoevrppx92eXu/Ptx///1qdna26vf72+3PSIRGR71vBFNHun6HUke/jgbTRRddpN52220t5l1xxRXquHHjVFWVc3WgE/m+vnnzZhVQV6xYEVhn5syZqqIoalFRUavF3tp+fa4OZfny5SqgFhQUqKoa3HMlb7iDwO12s2rVKkaPHh2Yp9FoGD16NEuWLAljZMGRn59PaWlpi+OLiopi2LBh7eb46urqAIiNjQVg1apVeDyeFseUm5tLenp6uzgmn8/H559/TlNTEyNGjGjXxzNhwgQuuuiiFrFD+/0Zbd++ndTUVLp06cK4ceMoLCwE2u/x/O9//2Pw4MFcffXVJCYmMmDAAP75z38Glrfn64Pb7eY///kPt912G4qitNufkQiNjnbfCIWOdv0OlY58HQ220047jblz57Jt2zYA1q1bx6JFixg7diwg5+pIjuXcLFmyhOjoaAYPHhxYZ/To0Wg0GpYtW9bqMbcldXV1KIpCdHQ0ENxzpQtmoKeqyspKfD4fSUlJLeYnJSWxZcuWMEUVPKWlpQCHPL79y9oyv9/PAw88wMiRI+nduzfQfEwGgyHwR7VfWz+mDRs2MGLECJxOJ1arlWnTptGzZ0/Wrl3bLo/n888/Z/Xq1axYseKgZe3xZzRs2DA++OADcnJyKCkp4fnnn+eMM85g48aN7fJ4AHbt2sU777zDxIkTeeKJJ1ixYgX33XcfBoOB8ePHt+vrw9dff01tbS233HIL0D5/50RodKT7Rqh0tOt3KHXk62iwPfbYY9TX15Obm4tWq8Xn8/HSSy8xbtw4oP1/Jw2lYzk3paWlJCYmtliu0+mIjY09pc+f0+nk0Ucf5frrr8dmswHBPVeScIsOb8KECWzcuLFFW9r2Kicnh7Vr11JXV8eXX37J+PHjWbhwYbjDOiF79uzh/vvvZ/bs2ZhMpnCHExT7n8AD9O3bl2HDhpGRkcEXX3yB2WwOY2Qnzu/3M3jwYF5++WUABgwYwMaNG3n33XcZP358mKM7Of/+978ZO3Ysqamp4Q5FtDEd6b4RCh3x+h1KHfk6GmxffPEFn3zyCZ9++im9evVi7dq1PPDAA6Smpsq5EiHh8Xi45pprUFWVd955JyT7kCrlQRAfH49Wqz2o982ysjKSk5PDFFXw7D+G9nh899xzD9OnT2f+/PmkpaUF5icnJ+N2u6mtrW2xfls/JoPBQNeuXRk0aBCTJk2iX79+vPHGG+3yeFatWkV5eTkDBw5Ep9Oh0+lYuHAhb775JjqdjqSkpHZ3TL8WHR1N9+7d2bFjR7v8GQGkpKTQs2fPFvN69OgRqCrfXq8PBQUFzJkzh9/+9reBee31ZySCq6PdN0LhVLh+B1NHvY6GwiOPPMJjjz3GddddR58+fbjpppt48MEHmTRpEiDn6kiO5dwkJycf1KGz1+ulurr6lDx/+5PtgoICZs+eHXi7DcE9V5JwB4HBYGDQoEHMnTs3MM/v9zN37lxGjBgRxsiCIysri+Tk5BbHV19fz7Jly9rs8amqyj333MO0adOYN28eWVlZLZYPGjQIvV7f4pi2bt1KYWFhmz2mQ/H7/bhcrnZ5POeeey4bNmxg7dq1gWnw4MGMGzcu8P/2dky/1tjYyM6dO0lJSWmXPyOAkSNHHjQ00rZt28jIyADa5/UB4P333ycxMZGLLrooMK+9/oxEcJwq941gOBWu38HUUa+joWC329FoWqYnWq0Wv98PyLk6kmM5NyNGjKC2tpZVq1YF1pk3bx5+v59hw4a1eszhtD/Z3r59O3PmzCEuLq7F8qCeq+Pr400czueff64ajUb1gw8+UDdv3qzeeeedanR0tFpaWhru0I5JQ0ODumbNGnXNmjUqoP7lL39R16xZE+ip75VXXlGjo6PVb775Rl2/fr36m9/8Rs3KylIdDkeYIz+0u+66S42KilIXLFiglpSUBCa73R5Y5/e//72anp6uzps3T125cqU6YsQIdcSIEWGM+sgee+wxdeHChWp+fr66fv169bHHHlMVRVF/+OEHVVXb3/EcyoG93Kpq+zumhx56SF2wYIGan5+v/vzzz+ro0aPV+Ph4tby8XFXV9nc8qtrca6dOp1Nfeukldfv27eonn3yiRkREqP/5z38C67S364PP51PT09PVRx999KBl7fFnJIKjI943WlN7v36HUke8jobK+PHj1U6dOqnTp09X8/Pz1alTp6rx8fHqH/7wh8A6p/K5Csb39QsuuEAdMGCAumzZMnXRokVqt27d1Ouvvz5chxQyRzpXbrdbvfTSS9W0tDR17dq1La75LpcrUEawzpUk3EH01ltvqenp6arBYFCHDh2qLl26NNwhHbP58+erwEHT+PHjVVVtHmrg6aefVpOSklSj0aiee+656tatW8Mb9BEc6lgA9f333w+s43A41LvvvluNiYlRIyIi1Msvv1wtKSkJX9BHcdttt6kZGRmqwWBQExIS1HPPPTeQbKtq+zueQ/n1F7b2dkzXXnutmpKSohoMBrVTp07qtddeq+7YsSOwvL0dz37ffvut2rt3b9VoNKq5ubnqP/7xjxbL29v14fvvv1eBQ8bYXn9G4uR1xPtGa2rv1+9Q62jX0VCpr69X77//fjU9PV01mUxqly5d1CeffLJFEnQqn6tgfF+vqqpSr7/+etVqtao2m0299dZb1YaGhjAcTWgd6Vzl5+cf9po/f/78QBnBOleKqqrq8b0TF0IIIYQQQgghxNFIG24hhBBCCCGEECIEJOEWQgghhBBCCCFCQBJuIYQQQgghhBAiBCThFkIIIYQQQgghQkASbiGEEEIIIYQQIgQk4RZCCCGEEEIIIUJAEm4hhBBCCCGEECIEJOEWQggh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3ZR79uyJ0WiksLCQs84664T2LYQQQoRCbGwsY8aMYfLkydx3330HJcS1tbUt2nEfzs8//8xpp53G3XffHZh3LLW4cnJy+M9//oPL5Qo8hD6wfTIc2z1cURRGjhzJyJEjeeaZZ8jIyGDatGlMnDjxqDHcdttt3H333bzzzjuHXN6jRw+++uorVFUNvOX++eefiYyMJC0t7ajl76fX61t8NzlROp0u0OGbwWDguuuuw2w2n3S5QpwMqVIuxCkmMzOTZcuWsXv3biorK5kwYQLV1dVcf/31rFixgp07d/L9999z6623HvPNz2w2M3z48EBnaAsXLuSpp5466naRkZE8/PDDPPjgg3z44Yfs3LmT1atX89Zbb/Hhhx+e7KEKIYQQJ2Xy5Mn4fD6GDh3KV199xfbt28nLy+PNN99kxIgRx1RGt27dWLlyJd9//z3btm3j6aefPihxPpQbbrgBv9/PnXfeSV5eHt9//z1/+tOfAALJ7dHu4cuWLePll19m5cqVFBYWMnXqVCoqKujRowcA06ZNC1RBP5Q77riDiooKfvvb3x5y+d13382ePXu499572bJlC9988w3PPvssEydODNR+OxaZmZnMnTuX0tLSY67yfji//e1vmTdvHrNmzZLq5KJNkIRbiFPMww8/jFarpWfPniQkJOB2u/n555/x+Xycf/759OnThwceeIDo6Ojjulm+9957eL1eBg0axAMPPHBQD6WH8+KLL/L0008zadIkevTowQUXXMCMGTOOWtVNCCGECLUuXbqwevVqRo0axUMPPUTv3r0577zzmDt37mHf+v7a7373O6644gquvfZahg0bRlVVVYu33Ydjs9n49ttvWbt2Lf379+fJJ5/kmWeeAQi0605NTT3iPdxms/Hjjz9y4YUX0r17d5566in+/Oc/M3bsWADq6urYunXrYWPQ6XTEx8cf9u15p06d+O6771i+fDn9+vXj97//PbfffvsxPXQ/0J///Gdmz55N586dAzXlTlS3bt047bTTyM3NZdiwYSdVlhDBoKjH0yOEEEIIIYQQIiw++eQTbr31Vurq6qSq9GGoqkq3bt24++67j6navBChJm24hRBCCCGEaIM++ugjunTpQqdOnVi3bh2PPvoo11xzjSTbh1FRUcHnn39OaWmpjL0t2gxJuIUQQgghhGiDSktLeeaZZygtLSUlJYWrr76al156KdxhtVmJiYnEx8fzj3/8g5iYmHCHIwQgVcqFEEIIIYQQQoiQkE7ThBBCCCGEEEKIEJCEWwghhBBCCCGECAFJuIUQQgghhBBCiBCQhFsIIYQQQgghhAgBSbiFEEIIIYQQQogQkIRbCCGEEEIIIYQIAUm4hRBCCCGEEEKIEJCEWwghhBBCCCGECAFJuIUQQgghhBBCiBCQhFsIIYQQQgghhAgBSbiFEEIIIYQQQogQkIRbCCGEEEIIIYQIAUm4hRBCCCGEEEKIEJCEWwghhBBCCCGECAFJuIVoA3bt2sVzzz3H1q1bwx2KEEIIIQ5D7tdCiOMlCbcQIbZgwQIURWHBggWHXO5yubj66qvZvn073bt3b93gRLu1e/duFEXhgw8+CHcoQgjRIcj9+tTx3HPPoShKi3mZmZnccsstQd3P0X6nxKlBEm7RIXzwwQcoinLYaenSpeEO8bAeeOABoqKieP/99w+6+HcULpeLt956i9NPP52YmBgMBgOpqalceumlfPbZZ/h8vpDsd/PmzTz33HPs3r07qOUuXryY5557jtra2hMu4+2335ZkWQhxypH7ddvW0e7XQrQFunAHIEQwvfDCC2RlZR00v2vXrmGIptmZZ56Jw+HAYDActKyyspKUlBReeeWVQy7vCCoqKhg7diyrVq1izJgxPPXUU8TGxlJaWsqcOXO44YYb2LFjB08//XTQ971582aef/55zj77bDIzM4NW7uLFi3n++ee55ZZbiI6OPqEy3n77beLj44P+NF0IIdoDuV+3PR3xfn08tm7dikYT3HeRR/qdEqcOSbhFhzJ27FgGDx4c7jBa0Gg0mEymQy6Lj4/nmWeeaeWIgsvpdGIwGA57k7rppptYs2YNX331FVdccUWLZY8//jgrV66UtnBCCHGKkft165P79ZEZjcaglXXguT7c75Q4dUiVcnHK8Hg8xMbGcuuttx60rL6+HpPJxMMPPwyA2+3mmWeeYdCgQURFRWGxWDjjjDOYP3/+Qdt+/vnnDBo0iMjISGw2G3369OGNN94ILD9c+50pU6YwaNAgzGYz8fHx3HjjjRQVFbVY55ZbbsFqtVJUVMRll12G1WolISGBhx9++JiqdWVmZnLxxRfzww8/0L9/f0wmEz179mTq1KkHrbtr1y6uvvpqYmNjiYiIYPjw4cyYMaPFOvuP5fPPP+epp56iU6dOREREUF9ff8j9L1myhO+//54777zzoJv3foMHD2bcuHGBz8E69x988AFXX301AKNGjQpUVzzw5/D222/Tq1cvjEYjqampTJgw4ajVxJ977jkeeeQRALKysgLl7q8G5/V6efHFF8nOzsZoNJKZmckTTzyBy+UKlJGZmcmmTZtYuHBhYPuzzz4bgOrqah5++GH69OmD1WrFZrMxduxY1q1bd8S4hBCio5D7tdyvg3G/3m/RokUMGTIEk8lEdnY2f//73w+53q/bcB/r/fhI5/pkfqdEB6IK0QG8//77KqDOmTNHraioaDFVVlYG1rvtttvU6Oho1eVytdj+ww8/VAF1xYoVqqqqakVFhZqSkqJOnDhRfeedd9TXXntNzcnJUfV6vbpmzZrAdj/88IMKqOeee646efJkdfLkyeo999yjXn311YF15s+frwLq/PnzD4p3yJAh6l//+lf1scceU81ms5qZmanW1NQE1hs/frxqMpnUXr16qbfddpv6zjvvqFdeeaUKqG+//fZRz0tGRobavXt3NTo6Wn3sscfUv/zlL2qfPn1UjUaj/vDDD4H1SktL1aSkJDUyMlJ98skn1b/85S9qv379VI1Go06dOvWgY+nZs6fav39/9S9/+Ys6adIktamp6ZD7f/zxx1VAXbRo0VFj3S9Y537nzp3qfffdpwLqE088oX788cfqxx9/rJaWlqqqqqrPPvusCqijR49W33rrLfWee+5RtVqtOmTIENXtdh82vnXr1qnXX3+9Cqh//etfA+U2Njaqqtr8MwPUq666Sp08ebJ68803q4B62WWXBcqYNm2ampaWpubm5ga23//zWLFihZqdna0+9thj6t///nf1hRdeUDt16qRGRUWpRUVFgTLy8/NVQH3//feP+dwKIUS4yf360OR+Hfz7taqq6vr161Wz2aymp6erkyZNUl988UU1KSlJ7du3r/rrNCgjI0MdP3584POx3o+PdK5P5ndKdByScIsOYf/F61CT0WgMrPf999+rgPrtt9+22P7CCy9Uu3TpEvjs9XoPusnX1NSoSUlJ6m233RaYd//996s2m031er2Hje3XF1u3260mJiaqvXv3Vh0OR2C96dOnq4D6zDPPBObtT95eeOGFFmUOGDBAHTRo0FHPS4W4BJQAAMyUSURBVEZGhgqoX331VWBeXV2dmpKSog4YMCAw74EHHlAB9aeffgrMa2hoULOystTMzEzV5/O1OJYuXbqodrv9qPu//PLLVUCtra1tMd/hcLT4knXgDSaY537KlCkH3ehUVVXLy8tVg8Ggnn/++YFjU1VV/dvf/qYC6nvvvXfE43r99ddVQM3Pz28xf+3atSqg/va3v20x/+GHH1YBdd68eYF5vXr1Us8666yDynY6nS1iUtXm5NpoNLb4PZCEWwjRHsn9+tDkfh2a+/Vll12mmkwmtaCgIDBv8+bNqlarPWrCfaz34yOd65P5nRIdh1QpFx3K5MmTmT17dotp5syZgeXnnHMO8fHx/Pe//w3Mq6mpYfbs2Vx77bWBeVqtNtDBhd/vp7q6Gq/Xy+DBg1m9enVgvejoaJqampg9e/Yxx7hy5UrKy8u5++67W7Trueiii8jNzT2oWhjA73//+xafzzjjDHbt2nVM+0tNTeXyyy8PfLbZbNx8882sWbOG0tJSAL777juGDh3K6aefHljParVy5513snv3bjZv3tyizPHjx2M2m4+67/1V16xWa4v57777LgkJCYHpwP2G8tzvN2fOHNxuNw888ECLtmx33HEHNpvtkD+DY/Hdd98BMHHixBbzH3roIYBjKtdoNAZi8vl8VFVVYbVaycnJaXH8QgjRnsn9+mByvz7YydyvfT4f33//PZdddhnp6emB+T169OD/2bvv8KjK9P/j72mZ9N5JIUCkI1UI2EUQwbWwqygqllW/Crrq/tRlV11FVxZ1FWFRVlcFV7BjYxVEUFEJVemhBwKE9DKpk2Rmfn9EZo0UKTOZlM/ruuZK5pznPOc+k/LMPecpI0eO/NVzn2x7fCKv9an8Tknrp4Rb2pSzzjqL4cOHN3lccMEF7v1ms5mxY8fy8ccfu8fULliwgPr6+iYNOMDcuXPp06cP/v7+REVFERMTw3//+1/Ky8vdZe666y7OOOMMRo0aRVJSErfccguLFi06boz79u0DoGvXrkfs69atm3v/Yf7+/sTExDTZFhERQWlp6Qm8Io0zvv5y+ZLD64ceHne8b9++o8bTvXv3JjEfdrSZZY8mJCQEgMrKyibbx44d636D1adPnyOO89Zrf9ixfgZ+fn506tTpiOs9Ufv27cNoNB4xy258fDzh4eEnVK/T6eT5558nPT0dq9VKdHQ0MTExbNy4scn1i4i0Zmqvj6T2+kin014XFhZSU1NDenr6EfuO9hr+0sm2xyfyWp/s75S0DUq4pd0ZN24cFRUV7k/S3333Xbp168aZZ57pLvPmm29y00030blzZ1599VUWLVrEkiVLuPDCC3E6ne5ysbGxrF+/nk8++YTf/OY3fPXVV4waNYoJEyZ4LF6TyeSxujzlRD4th8bGA2Dz5s1NticnJ7vfYEVERDTZ15Je+1N1OuuzPvXUU9x///2ce+65vPnmmyxevJglS5bQs2fPJtcvItLWqb0+fWqvT93Jtscn+lpL+6OEW9qdc889l4SEBN555x2KiopYtmzZEZ+Wv//++3Tq1IkFCxZwww03MHLkSIYPH05tbe0R9fn5+XHZZZfx4osvsnv3bu644w7eeOMNdu3addTzp6amAhx1aY3t27e793vKrl27cLlcTbbt2LEDwL3WZWpq6lHj2bZtm3v/qRgzZgwA8+bNO+FjPPnaHyvxPdbPoK6ujuzs7F+93uPV63Q62blzZ5Pt+fn5lJWVNan3WHW8//77XHDBBbz66quMGzeOESNGMHz48BOejVVEpK1Qe632+nTa65iYGAICAo5ok49W37Guz9PtcXP/TknLoIRb2h2j0chvf/tbPv30U/7zn//Q0NBwRAN++FPqnzd8q1atIjMzs0m54uLiI+o+3OXq58tA/dzAgQOJjY1l9uzZTcp8/vnnZGVlMXr06FO/uKPIzc3lww8/dD+32Wy88cYb9O3bl/j4eAAuvfRSVq9e3eT6qqqqePnll+nYsSM9evQ4pXMPGzaMiy++mJdffpmPP/74qGV++ebCk699UFAQwBGN4/Dhw/Hz82PGjBlNzvPqq69SXl7+qz+DY9V76aWXAjB9+vQm25977jmAJvUGBQUdtdE2mUxHvCbvvfeelgsRkXZH7bXa69Npr00mEyNHjuSjjz4iJyfHvT0rK4vFixcf87ifH+/p9ri5f6ekZTD7OgART/r888/dn/L+3NChQ+nUqZP7+TXXXMPMmTP561//Su/evd1jnw4bM2YMCxYs4Morr2T06NFkZ2cze/ZsevTo0WR80+9//3tKSkq48MILSUpKYt++fcycOZO+ffseUedhFouFadOmcfPNN3Peeedx7bXXkp+fzwsvvEDHjh257777PPRqNDrjjDO49dZbWbNmDXFxcbz22mvk5+fz+uuvu8v86U9/4q233mLUqFHcc889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fPly6uvr3WWWLFlC165dj9qdHMBqtRIaGtrkISIi0pIp4RYREZEmKisrWb9+PevXrwcaJ0pbv349OTk5GAwG7r33Xp588kk++eQTNm3axI033khiYqJ7re7u3btzySWXcNttt7F69Wq+//57Jk2axLhx40hMTATguuuuw8/Pj1tvvZUtW7bwzjvv8MILL3D//ff76KpFREQ8T5OmiYiI1+Tk5FBUVNRs54uOjiYlJeWEyrpcLi6++GJMJhOLFy9usu/FF1/kz3/+M5s3byYpKckbobZoa9eu5YILLnA/P5wET5gwgTlz5vDggw9SVVXF7bffTllZGWeffTaLFi3C39/ffcy8efOYNGkSF110EUajkbFjxzJjxgz3/rCwML744gsmTpzIgAEDiI6O5tFHH9WSYCIiLYDab89Rwi0iIl6Rk5ND9+7dqK6uabZzBgYGkJW17YQabYPBwOuvv07v3r3517/+xR133AE03s198MEHeemll1pMY93czj//fFwu1zH3GwwGpkyZwpQpU45ZJjIykvnz5x/3PH369OHbb7895ThFRMTz1H57lhJuERHxiqKiIqqra3jzz1fTPSXG6+fLyink+qfepaio6IQ/JU9OTuaFF15g0qRJjBgxgo4dO3LrrbcyYsQI+vXrx6hRo/j2228JCgpixIgRPP/880RHRwPw/vvv8/jjj7Nr1y4CAwPp168fH3/8MUFBQd68TBEREa9S++1ZSrhFRMSruqfE0P+MDr4O45gmTJjAhx9+yC233MJVV13F5s2b2bJlCz179uT3v/89zz//PDU1NTz00ENcffXVLFu2jEOHDnHttdfy9NNPc+WVV1JRUcG333573LvCIiIirYnab89Qwi0iIu3eyy+/TM+ePVm+fDkffPAB//rXv+jXrx9PPfWUu8xrr71GcnIyO3bsoLKykoaGBq666ipSU1MB6N27t6/CFxERaZdaQ/utWcpFRKTdi42N5Y477qB79+5cccUVbNiwga+++org4GD3o1u3bgDs3r2bM888k4suuojevXvzu9/9jldeeYXS0lIfX4WIiEj70hrabyXcIiIigNlsxmxu7PhVWVnJZZdd5l4a6/Bj586dnHvuuZhMJpYsWcLnn39Ojx49mDlzJl27diU7O9vHVyEiItK+tPT2Wwm3iIjIL/Tv358tW7bQsWNHunTp0uRxeFIVg8HAsGHDePzxx/nxxx/x8/Pjww8/9HHkIiIi7VdLbL+VcIuIiPzCxIkTKSkp4dprr2XNmjXs3r2bxYsXc/PNN+NwOFi1ahVPPfUUa9euJScnhwULFlBYWEj37t19HbqIiEi71RLbb02aJiIiXpWVU9jqzpOYmMj333/PQw89xIgRI7Db7aSmpnLJJZdgNBoJDQ1l+fLlTJ8+HZvNRmpqKv/4xz8YNWqUx2IQERHxJbXfnqGEW0REvCI6OprAwACuf+rdZjtnYGCAe53Nk/XYY4/x2GOPuZ+np6ezYMGCo5bt3r07ixYtOqXziIiItGRqvz1LCbeIiHhFSkoKWVnbKCoqarZzRkdHk5KS0mznExERaWvUfnuWEm4REfGalJSUNtuAioiItFVqvz3Hp5OmORwOHnnkEdLS0ggICKBz58488cQTuFwudxmXy8Wjjz5KQkICAQEBDB8+nJ07dzapp6SkhPHjxxMaGkp4eDi33norlZWVzX05IiIiIiIiIm4+TbinTZvGSy+9xD//+U+ysrKYNm0aTz/9NDNnznSXefrpp5kxYwazZ89m1apVBAUFMXLkSGpra91lxo8fz5YtW1iyZAkLFy5k+fLl3H777b64JBERERERERHAx13KV6xYweWXX87o0aMB6NixI2+99RarV68GGu9uT58+nYcffpjLL78cgDfeeIO4uDg++ugjxo0bR1ZWFosWLWLNmjUMHDgQgJkzZ3LppZfy7LPPkpiY6JuLExERERERkXbNp3e4hw4dytKlS9mxYwcAGzZs4LvvvnNPy56dnU1eXh7Dhw93HxMWFsbgwYPJzMwEIDMzk/DwcHeyDTB8+HCMRiOrVq066nntdjs2m63JQ0RETs/PhwNJU3ptRESkJVM7dXSeeF18eof7T3/6EzabjW7dumEymXA4HPztb39j/PjxAOTl5QEQFxfX5Li4uDj3vry8PGJjY5vsN5vNREZGusv80tSpU3n88cc9fTkiIu2SxWIBoLq6moCAAB9H0zJVV1cD/3utREREWgK14cfnifbbpwn3u+++y7x585g/fz49e/Zk/fr13HvvvSQmJjJhwgSvnXfy5Mncf//97uc2m43k5GSvnU9EpC0zmUyEh4dTUFAAQGBgIAaDwcdRtQwul4vq6moKCgoIDw/HZDL5OiQRERE3teFH58n226cJ9wMPPMCf/vQnxo0bB0Dv3r3Zt28fU6dOZcKECcTHxwOQn59PQkKC+7j8/Hz69u0LQHx8vPsX5LCGhgZKSkrcx/+S1WrFarV64YpERNqnw/9vf/n/WBqFh4cfs00SERHxJbXhx+aJ9tunCXd1dTVGY9Nh5CaTCafTCUBaWhrx8fEsXbrUnWDbbDZWrVrFnXfeCUBGRgZlZWWsW7eOAQMGALBs2TKcTieDBw9uvosREWnHDAYDCQkJxMbGUl9f7+twWhSLxaI72yIi0mKpDT86T7XfPk24L7vsMv72t7+RkpJCz549+fHHH3nuuee45ZZbgMYf/r333suTTz5Jeno6aWlpPPLIIyQmJnLFFVcA0L17dy655BJuu+02Zs+eTX19PZMmTWLcuHGaoVxEpJmZTCYllyIiIq2Q2nDv8GnCPXPmTB555BHuuusuCgoKSExM5I477uDRRx91l3nwwQepqqri9ttvp6ysjLPPPptFixbh7+/vLjNv3jwmTZrERRddhNFoZOzYscyYMcMXlyQiIiIiIiIC+DjhDgkJYfr06UyfPv2YZQwGA1OmTGHKlCnHLBMZGcn8+fO9EKGIiIiIiIjIqfHpOtwiIiIiIiIibZUSbhEREREREREvUMItIiIiIiIi4gVKuEVERERERES8QAm3iIiIiIiIiBco4RYRERERERHxAiXcIiIiIiIiIl6ghFtERERERETEC5Rwi4iIiIiIiHiBEm4RERERERERL1DCLSIiIiIiIuIFSrhFREREREREvEAJt4iIiIiIiIgXKOEWERERERER8QIl3CIiIiIiIiJeYPZ1AG1VeXkZpoCQkz5GRERERERE2gYl3B5WXFwMwBtv/OekE25HTYW7ji5dung8NhEREREREWk+Srg9rLKyEoArz+5BakrSSR27L+cA//nhU3cdIiIiIiIi0nop4faSkEArkaGBJ3VMSaDVS9GIiIiIiIhIc9OkaSIiIiIiIiJeoIRbRERERERExAuUcIuIiIiIiIh4gRJuERERERERES9Qwi0iIiIiIiLiBUq4RURERERERLxACbeIiIiIiIiIFyjhFhEREREREfECJdwiIiIiIiIiXqCEW0RERERERMQLlHCLiIiIiIiIeIESbhEREREREREvUMItIiIiIiIi4gVKuEVERERERES8QAm3iIiIiIiIiBco4RYRERERERHxAiXcIiIiIiIiIl6ghFtEREROisPh4JFHHiEtLY2AgAA6d+7ME088gcvlcpdxuVw8+uijJCQkEBAQwPDhw9m5c2eTekpKShg/fjyhoaGEh4dz6623UllZ2dyXIyIi4jVKuEVEROSkTJs2jZdeeol//vOfZGVlMW3aNJ5++mlmzpzpLvP0008zY8YMZs+ezapVqwgKCmLkyJHU1ta6y4wfP54tW7awZMkSFi5cyPLly7n99tt9cUkiIiJeYfZ1ACIiItK6rFixgssvv5zRo0cD0LFjR9566y1Wr14NNN7dnj59Og8//DCXX345AG+88QZxcXF89NFHjBs3jqysLBYtWsSaNWsYOHAgADNnzuTSSy/l2WefJTEx0TcXJyIi4kG6wy0iIiInZejQoSxdupQdO3YAsGHDBr777jtGjRoFQHZ2Nnl5eQwfPtx9TFhYGIMHDyYzMxOAzMxMwsPD3ck2wPDhwzEajaxateqo57Xb7dhstiYPERGRlkx3uEVEROSk/OlPf8Jms9GtWzdMJhMOh4O//e1vjB8/HoC8vDwA4uLimhwXFxfn3peXl0dsbGyT/WazmcjISHeZX5o6dSqPP/64py9HRETEa3SHW0RERE7Ku+++y7x585g/fz4//PADc+fO5dlnn2Xu3LlePe/kyZMpLy93P/bv3+/V84mIiJwu3eEWERGRk/LAAw/wpz/9iXHjxgHQu3dv9u3bx9SpU5kwYQLx8fEA5Ofnk5CQ4D4uPz+fvn37AhAfH09BQUGTehsaGigpKXEf/0tWqxWr1eqFKxIREfEO3eEWERGRk1JdXY3R2PQthMlkwul0ApCWlkZ8fDxLly5177fZbKxatYqMjAwAMjIyKCsrY926de4yy5Ytw+l0Mnjw4Ga4ChEREe/THW4RERE5KZdddhl/+9vfSElJoWfPnvz4448899xz3HLLLQAYDAbuvfdennzySdLT00lLS+ORRx4hMTGRK664AoDu3btzySWXcNtttzF79mzq6+uZNGkS48aN0wzlIiLSZijhFhERkZMyc+ZMHnnkEe666y4KCgpITEzkjjvu4NFHH3WXefDBB6mqquL222+nrKyMs88+m0WLFuHv7+8uM2/ePCZNmsRFF12E0Whk7NixzJgxwxeXJCIi4hVKuEVEROSkhISEMH36dKZPn37MMgaDgSlTpjBlypRjlomMjGT+/PleiFBERKRl0BhuERERERERES9Qwi0iIiIiIiLiBUq4RURERERERLxACbeIiIiIiIiIFyjhFhEREREREfECJdwiIiIiIiIiXqCEW0RERERERMQLlHCLiIiIiIiIeIESbhEREREREREvUMItIiIiIiIi4gVKuEVERERERES8QAm3iIiIiIiIiBco4RYRERERERHxAiXcIiIiIiIiIl6ghFtERERERETEC5Rwi4iIiIiIiHiBEm4RERERERERL1DCLSIiIiIiIuIFSrhFREREREREvEAJt4iIiIiIiIgXKOEWERERERER8QIl3CIiIiIiIiJe4POE++DBg1x//fVERUUREBBA7969Wbt2rXu/y+Xi0UcfJSEhgYCAAIYPH87OnTub1FFSUsL48eMJDQ0lPDycW2+9lcrKyua+FBERERERERE3nybcpaWlDBs2DIvFwueff87WrVv5xz/+QUREhLvM008/zYwZM5g9ezarVq0iKCiIkSNHUltb6y4zfvx4tmzZwpIlS1i4cCHLly/n9ttv98UliYiIiIiIiABg9uXJp02bRnJyMq+//rp7W1pamvt7l8vF9OnTefjhh7n88ssBeOONN4iLi+Ojjz5i3LhxZGVlsWjRItasWcPAgQMBmDlzJpdeeinPPvssiYmJzXtRIiIiIiIiIvj4Dvcnn3zCwIED+d3vfkdsbCz9+vXjlVdece/Pzs4mLy+P4cOHu7eFhYUxePBgMjMzAcjMzCQ8PNydbAMMHz4co9HIqlWrjnpeu92OzWZr8hARERERERHxJJ8m3Hv27OGll14iPT2dxYsXc+edd3LPPfcwd+5cAPLy8gCIi4trclxcXJx7X15eHrGxsU32m81mIiMj3WV+aerUqYSFhbkfycnJnr40ERERERERaed8mnA7nU769+/PU089Rb9+/bj99tu57bbbmD17tlfPO3nyZMrLy92P/fv3e/V8IiIiIiIi0v74NOFOSEigR48eTbZ1796dnJwcAOLj4wHIz89vUiY/P9+9Lz4+noKCgib7GxoaKCkpcZf5JavVSmhoaJOHiIiIiIiIiCf5NOEeNmwY27dvb7Jtx44dpKamAo0TqMXHx7N06VL3fpvNxqpVq8jIyAAgIyODsrIy1q1b5y6zbNkynE4ngwcPboarEBERERERETmST2cpv++++xg6dChPPfUUV199NatXr+bll1/m5ZdfBsBgMHDvvffy5JNPkp6eTlpaGo888giJiYlcccUVQOMd8UsuucTdFb2+vp5JkyYxbtw4zVAuIiIiIiIiPuPThHvQoEF8+OGHTJ48mSlTppCWlsb06dMZP368u8yDDz5IVVUVt99+O2VlZZx99tksWrQIf39/d5l58+YxadIkLrroIoxGI2PHjmXGjBm+uCQRERERERERwMcJN8CYMWMYM2bMMfcbDAamTJnClClTjlkmMjKS+fPneyM8ERERERERkVPi0zHcIiIiIiIiIm2VEm4RERERERERL1DCLSIiIiIiIuIFSrhFREREREREvEAJt4iIiIiIiIgXKOEWERERERER8QIl3CIiIiIiIiJeoIRbRERERERExAuUcIuIiIiIiIh4gRJuERERERERES9Qwi0iIiIiIiLiBUq4RURERERERLxACbeIiIiIiIiIFyjhFhEREREREfECJdwiIiIiIiIiXqCEW0RERERERMQLlHCLiIiIiIiIeIESbhEREREREREvOKWEu1OnThQXFx+xvaysjE6dOp12UCIiInJy1DaLiIi0POZTOWjv3r04HI4jttvtdg4ePHjaQbV3Bw8eZNeuXSd9XFhYGDExMV6ISEREWjq1zSIiIi3PSSXcn3zyifv7xYsXExYW5n7ucDhYunQpHTt29Fhw7U1NdRVgYMKECad0fGhoGLt27VTSLSLSjqhtFhERablOKuG+4oorADAYjkwKLRYLHTt25B//+IfHgmtv6ux2wMUV9z5F9zMHntSxpQW5zH7oJsrLy5Vwi4i0I2qbRUREWq6TSridTicAaWlprFmzhujoaK8E1d6FRMUR0yHV12GIiEgroLZZRESk5TqlMdzZ2dmejkNEREROg9pmERGRlueUEm6ApUuXsnTpUgoKCtyfrh/22muvnXZgIiIicnKas20+ePAgDz30EJ9//jnV1dV06dKF119/nYEDG4dEuVwu/vrXv/LKK69QVlbGsGHDeOmll0hPT3fXUVJSwt13382nn36K0Whk7NixvPDCCwQHB3s0VhEREV85pWXBHn/8cUaMGMHSpUspKiqitLS0yUM8o6bOQXVdAw0O568XFhGRdq052+bS0lKGDRuGxWLh888/Z+vWrfzjH/8gIiLCXebpp59mxowZzJ49m1WrVhEUFMTIkSOpra11lxk/fjxbtmxhyZIlLFy4kOXLl3P77bd7NFYRERFfOqU73LNnz2bOnDnccMMNno5HMJBf78+7a/dzqPx/b0qSIwM4MymcTtFBGAwGH8YnIiItUXO2zdOmTSM5OZnXX3/dvS0tLc39vcvlYvr06Tz88MNcfvnlALzxxhvExcXx0UcfMW7cOLKysli0aBFr1qxx3xWfOXMml156Kc8++yyJiYlevw4RERFvO6U73HV1dQwdOtTTsbR7DoxEX/4Q2+1hTZJtgP0lNSzceIhPNuRSU3/kOqsiItK+NWfb/MknnzBw4EB+97vfERsbS79+/XjllVfc+7Ozs8nLy2P48OHubWFhYQwePJjMzEwAMjMzCQ8PdyfbAMOHD8doNLJq1aqjntdut2Oz2Zo8REREWrJTSrh///vfM3/+fE/H0q7VOQ1sCj6LoG5nY8DFkE6R3DosjXsu7MJNQzsyIDUCk9HA3uJq5q/KoajS7uuQRUSkBWnOtnnPnj3u8diLFy/mzjvv5J577mHu3LkA5OXlARAXF9fkuLi4OPe+vLw8YmNjm+w3m81ERka6y/zS1KlTCQsLcz+Sk5M9fWkiIiIedUpdymtra3n55Zf58ssv6dOnDxaLpcn+5557ziPBtRcuFywrDKHSHICjupz+UQ4Gp53h3h8WYOHsLtF0jQvhs82HKKuuZ8EPB/ntgCQig/x8GLmIiLQUzdk2O51OBg4cyFNPPQVAv3792Lx5M7Nnzz5iLXBPmjx5Mvfff7/7uc1mU9ItIiIt2ikl3Bs3bqRv374AbN68uck+jS8+eVsq/NleGQAuJ4ULniDs/x44armYECvXDExmwY8HKayw88EPB7hmYDKhAZajlhcRkfajOdvmhIQEevTo0WRb9+7d+eCDDwCIj48HID8/n4SEBHeZ/Px8d4zx8fEUFBQ0qaOhoYGSkhL38b9ktVqxWq2eugwRERGvO6WE+6uvvvJ0HO1WRYORb4pCAehYu5N9B7cdt7y/xcSV/TrwwQ8HKK6sY+HGQ/xuYFJzhCoiIi1Yc7bNw4YNY/v27U227dixg9TUVKBxArX4+HiWLl3qTrBtNhurVq3izjvvBCAjI4OysjLWrVvHgAEDAFi2bBlOp5PBgwc327WIiIh40ymN4RbPWVkSTIPLQKJ/HR3s2Sd0TIDFxOVnJhJgMVFYaWdpVgEul8vLkYqIiDS67777WLlyJU899RS7du1i/vz5vPzyy0ycOBFovKN+77338uSTT/LJJ5+wadMmbrzxRhITE7niiiuAxjvil1xyCbfddhurV6/m+++/Z9KkSYwbN04zlIuISJtxSne4L7jgguN2T1u2bNkpB9SeFNeZyKrwB+DsqEpyjz5HzFGF+Fu4tHc8H/54kO35FYQZTF6KUkREWoPmbJsHDRrEhx9+yOTJk5kyZQppaWlMnz6d8ePHu8s8+OCDVFVVcfvtt1NWVsbZZ5/NokWL8Pf3d5eZN28ekyZN4qKLLsJoNDJ27FhmzJjhsThFRER87ZQS7sPdww6rr69n/fr1bN682auTpbQ1K4qDcWGgc1AtCf715J7k8UkRgQztHM13u4r4Id+BOTzh1w8SEZE2qbnb5jFjxjBmzJhj7jcYDEyZMoUpU6Ycs0xkZKRWPRERkTbtlBLu559//qjbH3vsMSorK08roPaiuM7Enmp/DLgYGnnqr1m/lHD2FlVxoKyG6DF/xOFU13IRkfZIbbOIiEjL49Ex3Ndffz2vvfaaJ6tsszaWBwKQFmgn0s9xyvUYDQYu7hmHxQjWDt34ZGuZhyIUEZG2QG2ziIiI73g04c7MzGwyNkuOrs5pYNtPY7f7hNWcdn2h/hb6xTaO4X5tXSGHyk+/ThERaRvUNouIiPjOKXUpv+qqq5o8d7lcHDp0iLVr1/LII494JLC2bFuFP3UuI+GWBlIC6jxSZ+cwI8vXboKkHjz2yRb+dcNAj9QrIiKtg9pmERGRlueUEu6wsLAmz41GI127dmXKlCmMGDHCI4G1VS4XbLQFANAntJrjTCh7UgwGAyWLZ5H8+1ks3pLPkq35XNwjzjOVi4hIi6e2WUREpOU5pYT79ddf93Qc7UZxnZniOgsmXPQIqfVo3fVF+/hdn0je3lDCXz/ezNDOUQRZT+lHLCIirYzaZhERkZbntLKxdevWkZWVBUDPnj3p16+fR4Jqy3ZUWgFIDbRjNXl+RvHr+0Xx/f4a9pfU8NySHTwypofHzyEiIi2X2mYREZGW45QS7oKCAsaNG8fXX39NeHg4AGVlZVxwwQW8/fbbxMTEeDLGNsPlgh2VjRPXnBFs98o5/M1Gplzei5tfX8OcFXsZNyiZ9LgQr5xLRERaDrXNIiIiLc8pzVJ+9913U1FRwZYtWygpKaGkpITNmzdjs9m45557PB1jm1FQZ6a8wYzZ4CItyDsJN8AFXWO5uEccDqeLKQu34nJpbW4RkbZObbOIiEjLc0p3uBctWsSXX35J9+7d3dt69OjBrFmzNDHLcez4aSmwtEA7fkbvJsF/ubQ732wv5NudRSzbVsBF3TWBmohIW6a2WUREpOU5pTvcTqcTi8VyxHaLxYLT6TztoNoilwt2VTWO304P9uxkaUfTMTqIW85OA+CJhVupa9DPRUSkLVPbLCIi0vKcUsJ94YUX8oc//IHc3Fz3toMHD3Lfffdx0UUXeSy4tqS03oStwYwJF6mBnll7+9dMurAL0cFW9hZXM2dFdrOcU0REfENtc/Mor6lnS245q7NLKKr03vAwERFpG04p4f7nP/+JzWajY8eOdO7cmc6dO5OWlobNZmPmzJmejrFN2FvdeHe7Q0Cd17uTHxZsNfPgJV0BmLl0F4UVemMgItJWqW32LofTxZdZ+cxZsZcvswrI3FPMvFU5vLt2PxW19b4OT0REWqhTGsOdnJzMDz/8wJdffsm2bdsA6N69O8OHD/docG1JdrUfAB0Dmzfp/W3/JP6TuY9NB8v5xxfb+fvYPs16fhERaR5qm72nrsHJfzcdIqekGgOQEOaP1WJiX3EVh8pr+eCHg4zt34EQ/yO79IuISPt2Une4ly1bRo8ePbDZbBgMBi6++GLuvvtu7r77bgYNGkTPnj359ttvvRVrq2V3GsitaUy404Kapzv5YUajgb9e1rgW9ztr97P5YHmznl9ERLxLbbP3LdtWQE5JNWajgcvOTOR3A5P5zZmJTMjoSFiAhfKaej744SD2eoevQxURkRbmpBLu6dOnc9tttxEaGnrEvrCwMO644w6ee+45jwXXVuyv9sOJgXBLA+GW5m+MB3aM5DdnJuJywZRPtUyYiEhborbZu/YUVrI9vwIDcEW/DqRFB7n3hQZYuKp/B0L9zZTX1PP97mLfBSoiIi3SSSXcGzZs4JJLLjnm/hEjRrBu3brTDqqtOTx+u7m7k//cn0Z1w99iZPXeEj7blOezOERExLPUNntPbb2DZdsKAOifGkGH8IAjyoT6W7i4R+PSm5sOlpNbVtOsMYqISMt2Ugl3fn7+UZccOcxsNlNYWHjaQbUlLhfk1Bwev9283cl/LjE8gP87rzMAT32WRa26vYmItAlqm71n7b5SquocRARaGJIWecxySRGB9Exs7GGwdFsBTqd6komISKOTSrg7dOjA5s2bj7l/48aNJCQknHZQbYmtwURFgwkjLhL9fZdwA9xxbmcSw/w5WFbDy8v3+DQWERHxDLXN3mGvd7DpQOO8J2d3icZsOv5bprO7RONvMVJSVcfOgsrmCFFERFqBk0q4L730Uh555BFqa2uP2FdTU8Nf//pXxowZ47Hg2oL9P93djvevx3JKi7B5ToCfiT9d2h2Al77ezaFydXsTEWnt1DZ7x4aD5dQ5nEQF+TUZt30s/hYT/ZIjAFi7r0TzpYiICHCSy4I9/PDDLFiwgDPOOINJkybRtWvjGs/btm1j1qxZOBwO/vKXv3gl0NbqQE1jN7+kAN/e3T7ssj4JvLFiL2v3lfL3z7fxwrh+vg5JREROg9pmz6t3OFmfUwbAwNQIDAbDCR3XJymMtftKKKqsY29xNVokTERETirhjouLY8WKFdx5551MnjzZ/emtwWBg5MiRzJo1i7i4OK8E2hq5XHDgpzvcyS0k4TYYDDz2m55c9s/v+Hh9LjcMSWVgx2OPSxMRkZZNbbPn7civoKbeQai/mTPiQk74OH+Lid4dwvghp4y1e0vICPNikCIi0iqcVMINkJqaymeffUZpaSm7du3C5XKRnp5ORESEN+Jr1UrrTVQ5TJgMLuKt9b4Ox61XhzDGDUrmrdX7+esnW/hk0tmYjCf26b2IiLQ8aps9a+shG9DYXhpPsn3slxLB+v1l5JbXUh6gtlVEpL076YT7sIiICAYNGuTJWNqcw3e3E/zrMPt4/PYv/b8RXVm48RBbcm28s2Y/1w1O8XVIIiJymtQ2n77KBsgtaxwP3y3+xO9uHxZsNZMWHcTuwir2VbWwxl9ERJrdKSfc8usOJ9xJ/s13d3vfvn0nXPbGvpHMWlnA3z/byuBEC52TNYutiIi0bzmVJgBSIgMJ8T+1Udg9EkPZXVhFTpURjCZPhiciIq2MEm4vcbngUG1jQ92hGcZvV9vKAAPDhw8/8YOMJhJumoEtJpVhd0xl09xHiImJ8VaIIiIiLZzBfVe6e8LJ390+rGNkEIF+JqrrHAR0Vo8DEZH2TAm3l9TgR6Wjcf3tuGYYv11bUwW4GP+XGaR06XbCx+VVOVm2vwFrr+Gszy7gYiXcIiLSTlk7dKPaYcDPZKRzTPAp12M0GuieEMq6faUE977YgxGKiEhro4TbS0pp/GQ8xtrQrOtvh8XEE9Mh9YTLxwA7y3axv8LEiysLGD6oxwkvfyIiItKWBKQPASAtJgiL6fQa7x4/JdwBnQZQWef0RHgiItIKaTYPLyml8ZPxBP+WsRzY8fSLMeOst/NjbjWLNuf5OhwREZFm53K5CEzPAKBzdNBp1xcZ5EeoxYnBZGZNbu1p1yciIq2TEm4vOZxwJzbjhGmnKtjPgG3VBwA8+d8sauocPo5IRESkeR2wNWCJTMSIi9So00+4AZICG+9sZ+5Xwi0i0l4p4fYCg18ANgIBSGgFCTeAbdUHxAabOVhWw7+W7/Z1OCIiIs1qda4dgBh/F34eWsuzw08J9/p8O7ba1vF+QEREPEtjuL3AmtgVMBBqdhBsbh3jtlwNdq7qZGD2Rnjxq10MinIQF3Jiy6GEhYVpdnMREWnVVh9svAudGOi5djvUAnVFORCdwrKsAq7o18FjdYuISOughNsLrB26A61j/Db8b0mxyeNHEjfuKUjtwxWPv0HRx38/oeNDQ8PYtWunkm4REWmV8m217CxpvAOdEODZD8qrt3+PX3QKn206pIRbRKQdUsLtBdaErkDr6U7+8yXFQpPO4PO9DQR1O5vLLl5EfNDxu9WVFuQy+6GbKC8vV8ItIiKtUmGFnc4RFrZu3kRASieP1l29YwXhw67l251F1NY78LeYPFq/iIi0bC1mDPff//53DAYD9957r3tbbW0tEydOJCoqiuDgYMaOHUt+fn6T43Jychg9ejSBgYHExsbywAMP0NDQ0MzR/4/L5cIvIR2gWdbf9qSwmHjSO6fRJykMgPUlRiITUojpkHrMR0Rsoo+jFhEROT29OoTxzMXR5L012eN11xdkExlgpKbewarsEo/XLyIiLVuLSLjXrFnDv/71L/r06dNk+3333cenn37Ke++9xzfffENubi5XXXWVe7/D4WD06NHU1dWxYsUK5s6dy5w5c3j00Ueb+xLcCmtcmALDMOIk2uq7xP90DOkURYDFRElVHRsPlPk6HBERkebh8M4H5QMSrAB8ta3AK/WLiEjL5fOEu7KykvHjx/PKK68QERHh3l5eXs6rr77Kc889x4UXXsiAAQN4/fXXWbFiBStXrgTgiy++YOvWrbz55pv07duXUaNG8cQTTzBr1izq6nwzfjq73AVAKNWYDT4J4bT5W0wM7RwFwMo9JVTZW+cHByIiIi3BgAR/AJZuy8flcvk4GhERaU4+T7gnTpzI6NGjGT58eJPt69ato76+vsn2bt26kZKSQmZmJgCZmZn07t2buLg4d5mRI0dis9nYsmXLMc9pt9ux2WxNHp6SbWucbCWMKo/V6Qs9E0OJDbFS53CyYnexr8MRERFptXrH+uFnMrK/pIbdhZW+DkdERJqRTxPut99+mx9++IGpU6cesS8vLw8/Pz/Cw8ObbI+LiyMvL89d5ufJ9uH9h/cdy9SpUwkLC3M/kpOTT/NK/ie7vDHhDqd1N6gGg4ELusYCsPWQjbzyWh9HJCIi0joFWIwM7hQJwDJ1KxcRaVd8lnDv37+fP/zhD8ybNw9/f/9mPffkyZMpLy93P/bv3++ReusdTvZVNHYVC2/ld7gB4sP86Z4QAsBX2wvUDU5EROQUXdit8UPsr7cX+jgSERFpTj5LuNetW0dBQQH9+/fHbDZjNpv55ptvmDFjBmazmbi4OOrq6igrK2tyXH5+PvHx8QDEx8cfMWv54eeHyxyN1WolNDS0ycMTtudVUO8ER20lQbSNO8LDOkfjZzJSUGFnS67nut6LiIi0J+ekNy6duXZvKTV1Dh9HIyIizcVnCfdFF13Epk2bWL9+vfsxcOBAxo8f7/7eYrGwdOlS9zHbt28nJyeHjIwMADIyMti0aRMFBf/rnrVkyRJCQ0Pp0aNHs1/Thp9m9K47tANDK50w7ZeCrGZ3N7gVu4uprdebBBERkZPVOSaIxDB/6hxOVu/V8mAiIu2F2VcnDgkJoVevXk22BQUFERUV5d5+6623cv/99xMZGUloaCh33303GRkZDBkyBIARI0bQo0cPbrjhBp5++mny8vJ4+OGHmThxIlartdmvyWw0kBBkICt3O3Tq3Ozn95Yzk8LZkmujpKqOlXuKOf+nsd0iIiJyYgwGA2enR/Pu2gN8t7OQ886I8XVIIiLSDHw+S/nxPP/884wZM4axY8dy7rnnEh8fz4IFC9z7TSYTCxcuxGQykZGRwfXXX8+NN97IlClTfBLvNYNSeHKolfLv5vnk/N5iMho4/6c3BhsPllNUafdxRCIiIq3P2T91K/92Z5GPIxERkebiszvcR/P11183ee7v78+sWbOYNWvWMY9JTU3ls88+83JkkhwZSJfYYHYVVPL19kLG9u+Aoa30mxcREWkGwzpHAbAtr4LCCjsxIc3fG09ERJpXi77DLS3LOenRmI0GDpbVsCO/dS97JiIi0tyigq30TGycqPX7XbrLLSLSHijhlhMW6m9hYMcIAL7bVURdg9PHEYmIiLQuZ6dHA+pWLiLSXijhlpMyICWCUH8zlfYG1miWVRERkZMytHNjwr0qu9jHkYiISHNQwi0nxWwycu5PE6j9mFNGRZ3LxxGJiIi0HgNTIzAZDRworWF/SbWvwxERES9Twi0nrVN0EKlRgThcLtblN/g6HBERkVYjyGqmT1IYAKuy1VNMRKStU8ItJ81gMHDeGTEYDZBb5SKg8yBfhyQiItJqDOnUOFv5qj3qVi4i0tYp4ZZTEhHoR7+UxgnUIi66TROoiYiInKDBaZEArNQ4bhGRNk8Jt5yyszpGEmAGS0Qi728u9XU4IiIircLAjpGYjAb2l9RwoFTjuEVE2jIl3HLK/MxG+saYAHhrQzGFFXYfRyQiItLyBVvN9O7w0zjuPRrHLSLSlinhltPSMdSIPXcHNfUunv9yh6/DERERaRUOj+NeqXHcIiJtmhJuOS0Gg4HSZf8G4O3VOezIr/BxRCIiIi3fkE6N47g1U7mISNumhFtOm/3gVs7uGIzTBX/7b5avwxEREWnxDo/jzimp5mBZja/DERERL1HCLR5x26AYLCYD3+woZPmOQl+HIyIizejvf/87BoOBe++9172ttraWiRMnEhUVRXBwMGPHjiU/P7/JcTk5OYwePZrAwEBiY2N54IEHaGhoaObofSPYaqaXexy3upWLiLRVSrjFIzqE+XFjRkeg8S63w+nybUAiItIs1qxZw7/+9S/69OnTZPt9993Hp59+ynvvvcc333xDbm4uV111lXu/w+Fg9OjR1NXVsWLFCubOncucOXN49NFHm/sSfOZwt3KN4xYRabuUcIvH3HNhOuGBFrbnV/Du2v2+DkdERLyssrKS8ePH88orrxAREeHeXl5ezquvvspzzz3HhRdeyIABA3j99ddZsWIFK1euBOCLL75g69atvPnmm/Tt25dRo0bxxBNPMGvWLOrq6nx1Sc3qfxOnaRy3iEhbpYRbPCYs0MI9F6YD8I8vdlBpbx/dAkVE2quJEycyevRohg8f3mT7unXrqK+vb7K9W7dupKSkkJmZCUBmZia9e/cmLi7OXWbkyJHYbDa2bNly1PPZ7XZsNluTR2s2MDXCPY47V+O4RUTaJCXc4lHXD0mlY1QgRZV2/vXNbl+HIyIiXvL222/zww8/MHXq1CP25eXl4efnR3h4eJPtcXFx5OXlucv8PNk+vP/wvqOZOnUqYWFh7kdycrIHrsR3Qvwt7nHc6lYuItI2KeEWj/IzG5l8aXcAXl6+R5/Yi4i0Qfv37+cPf/gD8+bNw9/fv9nOO3nyZMrLy92P/ftb//ClwWmN47jX7FW3chGRtkgJt3jciB5xnJUWib3ByfQvd/g6HBER8bB169ZRUFBA//79MZvNmM1mvvnmG2bMmIHZbCYuLo66ujrKysqaHJefn098fDwA8fHxR8xafvj54TK/ZLVaCQ0NbfJo7c7qqPW4RUTaMiXc4nEGg4E/jeoGwPvrDrAzv8LHEYmIiCdddNFFbNq0ifXr17sfAwcOZPz48e7vLRYLS5cudR+zfft2cnJyyMjIACAjI4NNmzZRUFDgLrNkyRJCQ0Pp0aNHs1+TrwzqGInBAHsKqyissPs6HBER8TAl3OIV/VMiuKRnPE4XPL14u6/DERERDwoJCaFXr15NHkFBQURFRdGrVy/CwsK49dZbuf/++/nqq69Yt24dN998MxkZGQwZMgSAESNG0KNHD2644QY2bNjA4sWLefjhh5k4cSJWq9XHV9h8wgItdI0LAWCtupWLiLQ5SrjFa/7fyK4YDbBkaz7r9ulNhIhIe/L8888zZswYxo4dy7nnnkt8fDwLFixw7zeZTCxcuBCTyURGRgbXX389N954I1OmTPFh1L5xVpq6lYuItFVmXwcgbcO+ffuOun3kGWF8vr2cxz5cz3OjkzEYDE32h4WFERMT0xwhioiIF3399ddNnvv7+zNr1ixmzZp1zGNSU1P57LPPvBxZyzeoYyRvZO5jtRJuEZE2Rwm3nJZqWxlgOGIN1sNMwVEk3v4ym/LgzFHjqdm9psn+0NAwdu3aqaRbRETarcN3uLPybNhq6wn1t/g4IhER8RQl3HJaamuqABfj/zKDlC7djlpmfUEDW0ucpI9/jFEdzRh/ustdWpDL7Iduory8XAm3iIi0WVlZWb9aJiHYxKFKB+8sXcOAhOMvtRYdHU1KSoqnwhMRES9Swi0eERYTT0yH1KPuOyfWwe4Veym3OykxRdI9ofUv4yIiIvJrbCWFAFx//fW/WjZq1B8I7nMxDz79MmXL5x63bEBgINuyspR0i4i0Akq4xev8LSYGdozg+13FZO4pJj02GLNJ8/WJiEjbVlNpA2D0HX+ha58Bxy27t9LIuhLodN5Yzr/m8mOWy8/ZzbxpD1BUVKSEW0SkFVDCLc2ib1I4G/aXU1HbwMaD5fRPifB1SCIiIs0iKjGVpPSexy0TUlPPuhV7Ka03Et+puz6YFhFpI5RwS7Mwm4wM7hTJ0qwC1uwtoWeiupWLiIgcFupvJshqosruIM9WS1JEoK9DEmlRcnJyKCoq8midmg9BmoMSbmk2PeJD+WFfKaXV9azbV0r68eeEERERaTcMBgMdwgPYkV/JwdIaJdwiP5OTk0O37t2pqa72aL2aD0GagxJuaTZGo4GhnaP576ZD/JhTRlIn/fqJiIgc5k64y2p8HYpIi1JUVERNdTXjH3qGuJTOHqlT8yFIc1HG08yMLgfJ9p2EOkqoMoZQZOmAzRzp67CaTeeYIOJD/cmz1bKpyOHrcERERFqMxPAAAA6V1+JwujAZDT6OSKRliUvp/KvzIYi0NEq4m4vLycDKrxhQ+RWBzir3ZicGsgIHkRky0ofBNR+DwcCwLlF88MNBdpc5MUck+jokERGRFiEqyA9/s5HaBieFFXbiwzT2SkSktVPC3QwsTjsjS+eTXrsRgGpjMHmWFIKc5cTVH6Rn9Wo612wkz3KujyNtHkkRgXSMCmRvcTXh5/z62qQiIiLtgcFgIDE8gD1FVRwsq1HCLdIMsrKyPFqfJmKTX1LC7WUGl4PLi/9Nct0uGjDxdfhVbA4cjMtgAiCubh8XlH1IQv0+Hoz8krVd28ePZGjnaPYW5xDU/Vy2F9bSpYuvIxIREfG9Dj9LuAekaglNEW+xlRQCcP31nr35o4nY5JfaR3bnQ+fYFpJct4s6g5UFUXdwyJrWZH++XyrvxdzFpSVv0qV2E2//NoCprhwfRdt8YkKsdAw1stfm5N9rChmd4euIREREfC8xonEcd25ZDS6XC4NB47hFvKGm0gbA6Dv+Qtc+AzxSpyZik6NRwu1FXWo2MKDyawAWR1x3RLJ9mMPgx8LICZy7Zzr9/Q/wB8drvFc3kmq/qGaMtvn1iTaRXWLnx9xqvt1ZyDnpMb4OSURExKdig61YTAbsDU6KKuuICbH6OiSRNi0qMVUTsYlXGX0dQFtlpY4Lyz4AYE3whewK6HPc8i6DiZfKzyar0EEk5Yza8Qi4XM0Rqs8E+xmoWP8ZANMWbcPpbNvXKyIi8muMRgMJYf+7yy0iIq2bEm4vucS0miBnBaWmaDJDR53QMTUuP654pwY7FlLK19Ar/yPvBtkClK94h0CLkc0HbSzcdMjX4YiIiPhch5+WB9N63CIirZ+6lHtB5wgDF5h+BGB52OU4DCf+Mu8odvKB8VKuc37MuXtfIDtiGFXWWG+F6nPOGhtX94lgzrpi/vHFdi7pGY+fWZ8DiYhI+5UY3jg7+UGN45ZWKCcnh6KiIo/W6emZxEWakxJuL3jsfCsWg4O91m7s8T/5MSGLDedyQfBuEio3c0H2P1jYbZoXomw5xvaKZOH2SvYVV/POmhxuyOjo65BERER8Jj7UH5PBQHWdg/KaesID/XwdksgJycnJoVv37tRUV3ul/srKSq/UK+JNSrg9zL+2gHG9LAB8H3opnMKn0i6DkSVd/sL168eTXryMDuU/cjCsn6dDbTECLEbuuagLj368hReW7uSq/kkEWfWrKSIi7ZPZZCQ21Mqh8loOltUo4ZZWo6ioiJrqasY/9AxxKZ09UqfTBZt+WMX3yxazp8JI8a4iauod1NQ5qK5zUO9w0uB04XC6aHA6MWDAYACjwYDJaMDPZMRqNmK1GPG3mAjyMxPsb6aEYCzRqWgKIfE2ZTUelnLwE8xGA1nOFAr8kk+5nuKgLmyOu4I++Qs4d+/zvNVnDhjablfrcYNSePW7bPYVV/Pqd9ncc1G6r0MSERHxmQ7hAe6Eu2dimK/DETkpcSmdT2nm7wank8IKOwU2OwUVdgoqaimpqsMZcw5x15zDznpgX6mHokwm8dZZfFvjYuOKvUQEWogM8iMi0I/oYCvRIX6YjW33vbc0HyXcnlRVTGLelwAsaRh42tVlptxO16LFxFdm0a1wEdtiLz3tOlsqP7ORP47oyj1v/cjLy/cwfnAKUcFaCkVERNqnDhEBrN1XSm5Zra9DEfEap9NFnq2WA6U1HCit5lB5LQ1HueVswIm96AAJcbEkJcQR6GcmwM9EgMWE1WzEbGq8m236qWep0wVOlwuny4W9wYm93om9wUFtvZNKewOV9gYKioqpqG3A6B9MeU095TX17C3+X1d4k8FATIiV+FB/4sIav4YFWDSngpw0JdyetPpfmJx1rM11sD0qmS6nWV21XxRrkiZw9r4Xydj/MjuiR+A0tt0f2ZjeCfzrm91sybXxz6928dfLtCaiiIi0Twlh/hiA8pp6KmrrCfG3+DokEY+wNzjIKa5mT1EVe4uqqG1wNtkfYDERF2olNsSf2FAr0cFWdq74nPmvPsDFj79M3669PRLHuqVrmffCA4x77N8kdh9ASVUdpdX1lFTVUVBRS229kzxbLXm2WjjQeEyw1UxKZCApkYEkRwYQ6Nd235eL5+i3xJO6DKdo05f8/d1vibvcM59+/Zgwjn65bxNee5AeBQvZHH+FR+ptiYxGAw9d0o0bX1vNvJU53DIsjeTIQF+HJSIi0uysZhMxIVYKKuzkltXSNV4Jt7ReDQ4ne4ur2Z5XQXZxFY6f3cW2mo2kRAaSFBFAUkQgEYFH3kX25j1lP4OTpIhAkiL+957T5XJRXlNPnq2W/HI7ebZaCivsVNob2HrIxtZDNgBiQqykRAbSOSaI+FB/L0YprZkSbk9KPosNPf/CB1nDuetyz1TZYApgTYcJnL/3eQYfeJWtsaNxGttuo3tOejTDukTx/a5inlm8nRnXtt3J4kRERI4nMTyAggo7B8tq6Bof4utwRE6Ky+Uiv8LO5oPl7MyvpM7xvzvZ4QEWOsUE0Sk6mIQwf4zGltVN22AwEB7oR3igH93iG7c1OJwcLKshp6SanJJqiirrKKywU1hhZ92+UoKtZuIsJqzJvZt8oCCihLsV2Bh/FQNz3yTUnkev/E/YmDDW1yF5jcFgYPKo7lz2z+/4ZEMuNw/rSL+UCF+HJSIi0uw6hAewfn8ZuWU1vg5F5IQZ/ALYXWHkm9U5FFXWubcHW810jQuha3wI0cF+rW4stNlkJDUqiNSoIACq7A3sL60mu6iKvUXVP40NNxF/3VRu/bSA0TmbGNu/AwNSI1rdtYpnKeFuBRwmf9Z0mMAF2c8yIPc/bIq/HJeh7fzo9u3b1+S5P3Bxl1C+2Gnj4fd/YPplKcf8RxUWFkZMTEwzRCkiItK8EsMbu6gWV9VRXdeg8aLicTk5ORQVFXmkrsIqB2+syiHprrmsLzUDdZiMBtJjg+mZGEqH8IA2lXgGWc10iw+lW3woDQ4nOaXVbNx1gD1FVdgI5a3VOby1OofUqECu6pfEVf07aKhkO6X/3K3E5rjLGbz/34TXHiS9aBk7Ykb4OqTTVm0rAwwMHz78iH2m4CgSb/sXWwqg72U3U739+6PWERoaxq5dO5V0i4hImxPoZyYqyI/iqjoOltaQHqdu5eI5OTk5dOvenZrq6l8vfBx+8emEnnUlgV2HYTD6Y7RCkNHBgM5xdE8Ixd9i8lDELZfZZKRTdDB+pQ6WP3YDry38li2VgXy26RD7iqt5/ssdPP/lDs7qGMnvBiYxpk8iAX5t/3WRRkq4W4kGkz8/Jo5jWM5sBh2cw47oi6GVf0pYW1MFuBj/lxmkdOl2xP5NRQ42FTno+LvJjEmzYPrF+J7SglxmP3QT5eXlSrhFRKRNSo4MpLiqjpzSaiXc4lFFRUXUVFcz/qFniEvpfFLHulyQX2tgm81Esf1/a1UH2YvZ88lMfnfj7fRLOfK9XbvgdHBmnJWbR53JlMt7snhLHh+sO8j3u4tYvbeE1XtLeGLhVq7qn8R1g1M4Q3/XbZ4S7lZkQ8LvGHTgDWKrdtKxbAV7I4b5OiSPCIuJJ6ZD6hHbz4l3sidzL1V2BwecoQxMjvRBdCIiIr6THNE4jnt/icZxi3fEpXQmKf3ElmJ1uVzklFSzKruEQ+WNa8QbDdA1LoR+KRHkrM5i6561GAy3ezPkViPQz8yV/ZK4sl8Sh8prWPDDQd5ancOB0hrmrNjLnBV7GdQxgusGpzCqV0K76A3QHhl/vYi0FHZzKBvjrwRg0IG5Po7G+ywmI0M7RwOwJruU6roGH0ckIiLSvDpEBLjX47bV1vs6HGmnDifa7607wEfrczlUXovJaKBfcjg3D01jRM94YkKsvg6zRUsIC2DiBV1Y/sAFzL3lLEb2jMNkNLBmbyn3vbOBIVOX8sTCrewurPR1qOJhusPdyvyQeB39Dr1Dku1HEmwbOBR6pq9D8qru8SFs2F9GQYWd73cVc3GPOF+HJCIi0mysZhNxof7k2Wo5UFJDqK8DknZnf0k1K7OLyS1rvKNtMhro3SGMgakRBFmVSpwso9HAeWfEcN4ZMeTbanlnzX7eXp1Dbnktr36XzavfZTOkUyQ3DOnIiJ5xWEy6P9ra6SfYylRZY9kaMxqAQQff8HE03mcwNP5TAth6yMahcnWpExGR9iUpIgCA/aWnN7mVyMk4UFrN++sOsODHg+SWNd7RPjMpjJuGduS8M2KUbHtAXKg/91yUzrcPXchrNw1kePdYjAZYuaeEifN/YNjfl/Hckh16/9vK6S+lFVrX4Xp6FXxC55LlRFXvpjjw5Ca6aG0SwwPokRDK1kM2vtpeyLhByRhb+YRxIiIiJyo5MpC1+0rZX1pNj1hfRyNt3cHSGlZmF3OgtDHJMxkM9OwQyqDUSIL9lTqciKysrJM+Jhy4q7eJqzvHsmRPNUv2VFNQYWfG0p3MWraTi3vEc0NGKkM7R7Wp5dXaA/3VtEKlgR3ZFXU+6cVfMeDgm3yR/ldfh+R1w7pEsbuwksIKO5sOlnNmUrivQxIREWkWiWH+mIwGquwOKjWdiXhJblkNK/cUs/+nRNtogJ6JYQzqGEGIv8XH0bUOtpJCAK6//vrTr8xoJvCMDEL6XYp/Sm8Wbclj0ZY8OsUEccOQVK7qn0RYgH4urYES7lZqbYcbSS/+im6Fi/g+5U5fh+N1gX5mMjpH8fX2QjJ3F5MeG+zrkERERJqF2WQkIcyfA6U1FNRqNKB4VmGtgdU/HnDPhG80QI/EUAZ1jCRUifZJqam0ATD6jr/Qtc8Aj9SZn7Obd1+dyC1Pvc63++3sKazi8U+38vSi7VzRL5Hrh6TSMzHMI+cS71DC3UrlhfTiQGg/kmw/0v/Q2/zAQF+H5HW9O4SxJddG4U8TqPXV/xYREWknkiMCOVBaQ6ESbvEAl8vFxnw7cddOZXmBBahpTLQTfkq0def0tEQlpp7wUmsnor5oH7cPCOPZG/vw4Y8H+U/mXnbkV/LW6v28tXo/A1IjuGFIKqN6x2M1a2mxlkYJdyu2tsMNJNl+pHfeAvwtnvujbqmMBgMXdI3h3bUH2HrIRoJFv74iItI+JEcGkLkHCu0GQOM35dS4XC6+3lHIzKU7+SGnDP+U3hhx0bNDOANTI5Rot3DBVjM3DEnl+sEprM4u4T8r97Focx7r9pWybl8pUxb6cc2gZK47K4XkyEBfhys/UcbSimVHDKM4II2ommzOMazgBV8H1AwSwgLolRjK5lwbqw41YDBrzUcREWn74kL88TMZqXM4scSm+TocaWVq6x18vP4gr323l+35FQD4maBo1Sdc85tLOKObZuNrTQwGA4M7RTG4UxQFFbW8s3o/81fncKi8lpe+3s3sb3ZzYddYbshI5dz0GIxGfUjnS0q4WzODkbUdrmfkrie4qOEbLO2kl9nZ6dHsLa6m0t5A+DkemJRCRESkhTMaDXSICCC7qIqAjmf6OhxpJfaXVPPe2v3MW5VDcVUdAIF+JsYPTmFIeBXDn3qZwKsu8XGUcjpiQ/y5+6J07jy/M0u3FfDmyn18u7OIpdsKWLqtgJTIQK4fksLvBiQTEeTn63DbJSXcrdz2mEsYljOb8LpCruvdProBWc0mLuwWyycbcgkZdDlbC2ro0sXXUYmIiHhX0k8Jt3+qEm45ttp6B4s25/Heuv18v6vYvb1DeAAThqZyzaAUwgIs/PDDDz6MUjzNbDIysmc8I3vGs7uwknkrc3hv3X5ySqp56rNt/OOLHVw9MJnbzulESpS6mzcnJdytnMPoxw8J13Luvhk8MNSPl1xOX4fULNKig0gLNZJtg2eX5zHyrB6aJEJERNq0lJ/GZFqTelHncPk4GmlJSqvqWLatgCVb81m+s5DqOod737AuUVx3Vioje8ZhNrWT7pDtXOeYYB69rAf/b+QZfLohlzcy97El18Z/Vu5j3qp9jO6TyJ3ndaZHYqivQ20XlHC3AZvir2TQvn/RM9ZOj4bN2Onn65CaRf84E7tyi8khghlLd/LAyG6+DklERMRrooL88De5qPXzZ2thHUN8HVAbkZOTQ1FRkUfrjI6OJiUlxaN1/lxBRS0//DRR1tp9pWw8UI7D+b8PYZIiAvjtgCTG9k/S5FltRFZW1ikdl26CKcMC2Vxo5sNtVazPs/Pphlw+3ZDLpb3juW/4GaTHhXg4Wvk5JdxtQJ05mG/NwxjRsIyLaxexkBt8HVKzsJoMFH/xIrFX/YWXvt7NeWfEclZapK/DEhER8QqDwUC8v5O9VSZ+zLP7Opw2IScnh27du1NTXX3Cxxj9gzGHxWEKjsIUHIkpOBKDxYrBZMFgtmAwmjEZ4Ibx44iOCMdqNmK1GPE3mwjwMxFgMeFvMRHo1/S5yWjA4XThdLlwOF3Yauopra6nvKaOoso69hZVkf3T4/B47J/rFh/CxT3iuLhHHL07hGEwaKKstsBWUgjA9dd7Zt4iS2waYYN/S2D3c/hsUx6fb8rj3NQArukZTHzw6aWG3v6gqbVSwt1GLDOfx/n2paSzg/iKzeSF9PJ1SM2iZmcmF6eHsmSnjT+8/SOf/+EcwgM1IYSIiLRNcQGNCfd6JdweUVRURE11NeMfeoa4lM5H7He6oNhuoNhuoLTOSFmdgWrHiSWy728sBop/tdypMBiga1wI/VMjGJgawaCOkbqT3UbVVNoAGH3HX+jaZ4BH6tyzeS3/fe1uws6+jqCuw/hmXw1f77ZhW72A8pXv4aqvPaV6AwID2ZaVpaT7F5RwtxFlhnDmbazn5n5+DDz4HxZ2m+brkJrNPUPj2FXqILuoigfe38jLNwzQp7oiItImxfq7cDkd7LfBwbIaOoQH+DqkNiEupTNJ6T0BaHA42VtczZ7CSrKLq6itP3J+nCA/E0FWM8FWM4FWE34mIyajAZPBQEVJAd8vfJtbbruDiOhY7A0O7PVOahuc1NQ5qK13UF3XQE290/19dZ0DXI2z0ZuMBowGA6H+ZsICLUQE+hEeaCE1Moi0mCA6RQfRMTqIYKvexrcnUYmp7t/R05Wfs5v6on0MjjMSG1/P5jITBbUWwoZeQ9w5V9M73EFyoJOTeTudn7ObedMeoKioSAn3L/j0L3Xq1KksWLCAbdu2ERAQwNChQ5k2bRpdu3Z1l6mtreWPf/wjb7/9Nna7nZEjR/Liiy8SFxfnLpOTk8Odd97JV199RXBwMBMmTGDq1KmYze3rH9GzmXXc3M+PLsVfEVazn/KAZF+H1CwCLEZmXtuPq15cwZKt+byRuY8JQzv6OiwRERGP8zOCPXcb/kk9+WZ7IdcN1htbT7HV1rPpQDmbD5ZT2/C/JNvfbCQlMpC4UH9iQ63EBFuxWo49UesBRx6frXib62c+QP/+PZojdJFTEpWYSu+ePejlcrGnqIrlOwqx1TawpthMnjOA4d3jCA1oH6sgeZNPpyr85ptvmDhxIitXrmTJkiXU19czYsQIqqqq3GXuu+8+Pv30U9577z2++eYbcnNzueqqq9z7HQ4Ho0ePpq6ujhUrVjB37lzmzJnDo48+6otL8qmthU42WfpgwMWA3Hm+DqdZ9eoQxp8vbZw07W//zWJLbrmPIxIREfGO2j2Nyzl9vb3Ax5G0DZaYNFYWmpmzYi9r95VS2+AkxN9Mv+RwxvbvwG3ndGJU7wT6p0aQFBF43GRbpDUyGAx0jgnmhiGpZHSOwmw0sL+0hjdX7WPzwXJcLq2KcDp8mnAvWrSIm266iZ49e3LmmWcyZ84ccnJyWLduHQDl5eW8+uqrPPfcc1x44YUMGDCA119/nRUrVrBy5UoAvvjiC7Zu3cqbb75J3759GTVqFE888QSzZs2iru7ICSXaui+tlwDQs2AhAXUlPo6meU0Y2pHh3eOoczj5vzfXUXKUCUVERERau5o9awH4blcRtfWOXyktx5JbVsOMVWUk3PwCB2uMuFyNs3uP6ZPATUM7cu4ZMSRFBGI0apiatA9mk5GzOkYyfnAKCWH+1DtcLN1WwEfrc6m0N/g6vFarRS3GV17eeFcyMrJxpul169ZRX1/P8OHD3WW6detGSkoKmZmZAGRmZtK7d+8mXcxHjhyJzWZjy5YtzRh9y7DLnM6h4J6YnXb6HnrX1+E0K4PBwDO/7UNKZCD7S2r4v/+sw96gNyIiItK21OXvJjLASHWdg8w93pmUqy2rrmvg6UXbuODZr/l6Xw0Gg5GkQAfjB6cwtn8SnWOCMWouGGnHwgP9+O2AJM5Jj8ZkNJBTUs38VTnsLznx2fzlf1pMwu10Orn33nsZNmwYvXo1zrCdl5eHn58f4eHhTcrGxcWRl5fnLvPzZPvw/sP7jsZut2Oz2Zo82gyDgbUdbgSgb957+DVU+jig5hUR5MdrNw0kxN/M6r0l/HnBZnWDERGRNmdggj8AS7PyfRxJ67I6u4RRL3zLi1/vxt7gpEeMH4feuJ/B0Q6ig62+Dk+kxTAaDPRPieC6s1KIDvajpt7Bhz8eZPXeEr23PkktZlaxiRMnsnnzZr777juvn2vq1Kk8/vjjXj+Pr+yOOo/igDSiarLpe+gdViff6uuQmlWX2BBmXdefm+es4YMfDtA5Noi7zu/i67BEREQ8ZmCilS/2VLM0q4AnLne1m9U5cnJyKCoqOunj7A0u5m2q4L87q3ABUQFGbusfRnB5Np8f2uH5QIGsrCyP1qc1jsUXIoP8uHpgMl9tLyDrUAWZu4vJK69lZM84rGbNZ3AiWkTCPWnSJBYuXMjy5ctJSkpyb4+Pj6euro6ysrImd7nz8/OJj493l1m9enWT+vLz8937jmby5Mncf//97uc2m43k5JYzo3dlZRUlJSc3/rqyosL9vctgYmXy7xm94y8MODiP9QnXUGcO9nSYLdq5Z8Tw2G968shHm3l60XZSI4MY3SfB12GJiIh4RO9YKwEWE4fKa9mSa6NXhzBfh+R1OTk5dOvenZrqk+vWaolOJeaKyViiGt9jVm78gpyl/+bOuv/VU1npuR6BtpJCAK6//nqP1Qmta43j0rIyDh065LH6ysrKPFaXnDyLycjF3eNIDAvg6x2FZBdV8d66A1x+ZiIh/prF/Nf4NOF2uVzcfffdfPjhh3z99dekpaU12T9gwAAsFgtLly5l7NixAGzfvp2cnBwyMjIAyMjI4G9/+xsFBQXExsYCsGTJEkJDQ+nR4+hLMVitVqzWltdtyF5XDzTGv+y7lSd1bH1pY/f52trGhep3Rl9E8f5/E1WTTb/ct1iVcptng20FbhiSyu6CSuas2Mu97/xIoNXEBV1jfR2WiIjIabOaDZydHs2SrfkszSpoFwl3UVERNdXVjH/oGeJSOp/QMTlVRn4oMeFwGfA3uegf2UDCmPNhzPkAZK3+hs/nvuB+/+QJNZWNQxVH3/EXuvYZ4JE6W8saxzU1NQB8tWwZy1ev91i9dQXZAFSf5Ict4jkGg4FeHcKICbHyyYZciivreHftAX5zZiIxIS0vr2pJfJpwT5w4kfnz5/Pxxx8TEhLiHnMdFhZGQEAAYWFh3Hrrrdx///1ERkYSGhrK3XffTUZGBkOGDAFgxIgR9OjRgxtuuIGnn36avLw8Hn74YSZOnNgik+rjqXc0joc4/8xU+vbs+iulm9q0cRMfb11GfX1j0u4ymFiZchujt/+Z/rnzWZ84Drs5xOMxt3SPjOlBcVUdn27I5f/+s47XbhrEsC7Rvg5LRETktF3cPY4lW/NZvCWPPwxP93U4zSYupTNJ6T2PW8bhdPHtzkI2FDdOyJsSGcglPeMJ8GvaBTY/Z7fX4oxKTP3VONsau90OwMCuHRjUr5fH6l25op5vd4K9Ha5A1NLEhfpzzcBkPl6fS0l1He+vO8ClveNR5/Jj82nC/dJLLwFw/vnnN9n++uuvc9NNNwHw/PPPYzQaGTt2LHa7nZEjR/Liiy+6y5pMJhYuXMidd95JRkYGQUFBTJgwgSlTpjTXZXhckNVCZGjgSR0THOB3xLYdURcxOLAz0dW76Z87n8yUOzwVYqthMhp47uozqalr4MusAm6Zs4bZNwzQnW4REWn1Lu4Rh+lDA1sP2dhbVEXH6CBfh9Qi1NQ7WLghl9zyxrvWZ3WMZHCnSM083oxCAq0kRIV6rL7Qo7zPFd8JDbDwu4FJLNx4iINlNXyyIZezovT3dSw+naXc5XId9XE42Qbw9/dn1qxZlJSUUFVVxYIFC44Ym52amspnn31GdXU1hYWFPPvss5jNLWJ4um8ZjKxMbuxK3i/3LawNbWg29pNgMRmZNb4/w7vHYW9wcvsba/l0Q66vwxIRETktEUF+ZHSKAuDzzUdfmaW9Kauu4901+8ktr8XPbOSyPglkdI5Ssi3iYf4WE1f0SyQ9NhinC1YVmQnsOszXYbVILWZZMPGOnVEXUBiYjtVRxYCD83wdjs9YzSZeur4/o/skUO9wcfdbP/Ly8t1a1kBERFq1Ub0bb0J8vtlzE1S1Vnnltby79gBlNfWE+Ju5ekASnWLa16SxIs3JbDRySc94usaH4MJA9G8e5LucGl+H1eLoNnBbZzCSmXIbv9n2IP1z57MhfixV1vbZndpiMjJjXD9igq3MWbGXpz7bxva8Sv52ZS/8LRp5IiJyoqZOncqCBQvYtm0bAQEBDB06lGnTptG16//mH6mtreWPf/wjb7/9dpMhYXFxce4yOTk53HnnnXz11VcEBwczYcIEpk6dql5qJ2FEj3ge/mgzGw+Uc6C0mqSIkxuS1lbsKark8015NDhdxIZY+c2ZiQRZ297vkSeXGvP0smXSPhmNBkb0iKO2oox9VSamryojJfUgV/Tr4OvQWoy2959IjrA78nxyQ/qQWLGRYTkv8UX6X30dks+YjAYe+01PUiIDefK/W/nghwNsz7cx89r+pGnsm4jICfnmm2+YOHEigwYNoqGhgT//+c+MGDGCrVu3EhTU+L/0vvvu47///S/vvfceYWFhTJo0iauuuorvv/8eAIfDwejRo4mPj2fFihUcOnSIG2+8EYvFwlNPPeXLy2tVYkKsnNUxklXZJXy+KY/bzu3k65Ca3e7CSj7bdAinCzpGBTKqVwJ+5rbVidNbS42BZ5dEk/bJaDAwINLB5hVfEnLmSP743gYC/UyM6Hn0JZrbGyXc7YHBwDdp93HtxpvpUfBffkwYR2Hwyc2C3tbccnYaXeNDmDT/BzYftDF6xrf89bIeXD0wGYPGeYmIHNeiRYuaPJ8zZw6xsbGsW7eOc889l/Lycl599VXmz5/PhRdeCDROiNq9e3dWrlzJkCFD+OKLL9i6dStffvklcXFx9O3blyeeeIKHHnqIxx57DD8/TZJ0okb3SWBVdgkfbzjY7hLuPT9Lts+IC2Zkj3iMxrbXjntjqTFvLIkm7ZfBACWL/slvLr+Cr/bWMOmtH3njlrMY8tM8E+2ZEu52Ii+kF9uiR9KtaDHn7p3OBz1fbPzLaMeGdYnmv/ecw/3vrmflnhIe+mATn244xN+u7EVqlO52i4icqPLyxqWXIiMjAVi3bh319fUMHz7cXaZbt26kpKSQmZnJkCFDyMzMpHfv3k26mI8cOZI777yTLVu20K9fv+a9iFZsdO8Epny6lc0HbezMryA9rn0sA7qnqJL/toNk++c8udSYN5dE85YKm41DhzwzX0FZWZlH6pGfc3HXwDBMAaF8mZXPbXPX8tbtQ+jVIczXgfmUEu525LvUiXQp/oqU8rV0Kv2WPZHn+jokj9i3b98pHRcWFkZiTAzzfj+Ef3+7h+eW7OC7XUVc/Nxybjk7jbsu6Eyov8XD0YqItC1Op5N7772XYcOG0atX47q7eXl5+Pn5ER4e3qRsXFwceXl57jI/T7YP7z+872jsdrt7nV8Am619rr7xS1HBVs47I4al2wr4aP1BHhjZzdcheV12URWfbczD6YL02PaRbLdntfUOANauXcuP2/Z4pM66gmwAqqurPVKfNDIZDfzzur7c+NpqVmeXcNPrq3n//4a262ULlXC3IxX+CfyQeC1nHZzLOdkvsDd8KE5j6/0VqLaVAYYmd1BORmhoGLt27SQmJoY7zuvMyJ6NE898t6uI2d/sZv6qfdyQkcpNQ9OICbF6NHZfKCwsdN+FOhVhYWHExMR4MCIRaQsmTpzI5s2b+e6777x+rqlTp/L44497/Tyt0RX9OjQm3D/m8seLu7bp5DOvxsDK/YdwuFykxwZzSU8l222V0eXA4qrF31VDVICBwWeEMaBfL+xYcRlOb5z+yhX1fLsT7HV1HopWDvO3mPj3hIGM+9dKth6yMeH11Xx01zAigtrnUKHWm23JKVmTdBO9Cj4hsjaHM/Pe5cfE63wd0imrrakCXIz/ywxSupzcp/mlBbnMfugmysvL3Ulkx+gg/nPrWSzbVsDUz7exq6CSWV/t5pVvs/ndgCRuzOhI1/jW2U2vsLCQLl3SsdlOPeH++QcUIiIAkyZNYuHChSxfvpykpCT39vj4eOrq6igrK2tylzs/P5/4+Hh3mdWrVzepLz8/373vaCZPnsz999/vfm6z2UhOTvbU5bRqw7vHEWw1c7CshrX7SjkrLdLXIXmFf1p/MgvNOHHRJSaYkUq2WzeXi1BHCdH1h4hqyCOyPp+IhkICnJX4O6vwdzWOL7/rTODMEOBzsH8OQJ3BSp3Bn2pTEJXGcCpNYVSYwqk0NX5fZo6mwhRxzMQ8NKB9Jn/NJdTfwtxbzuLKF79nX3E1d7y5jjdvHdzmJjQ8EUq425k6czDfp9zJxbufYui+2eyKutDXIZ22sJh4YjqkeqQug8HARd3juKBrLF9szWf2N7tZv7+MeatymLcqh65xIfymbyK/OTOR5MjWs/RKeXk5Nls5/zdtDhGxiSd9/NE+oBCR9svlcnH33Xfz4Ycf8vXXX5OWltZk/4ABA7BYLCxdupSxY8cCsH37dnJycsjIyAAgIyODv/3tbxQUFBAb27hc5ZIlSwgNDaVHjx5HPa/VasVqbf09jrwhwM/EqF7xvLfuAO+t3d8mE+71eXZir3oYJwY6xwRxSa94TEq2Wx1/RyUp9h3uR5ij9JTq8XPZ8XPZCXaWE0vuUcs0YKbMHE2pOZZSc8xPXxu/P0zjwj3rl8vN/fGsIP68tJbV2SXc8e+vmTQo7KQmKI6OjiYlJcXTYTYrJdzt0Oa4y+lR+BkdbOu5cPc01rp+6+uQWhyj0cAlveIZ2TOOVdklvPZdNl9vL2R7fgXPLN7OM4u30zkmiIzOUQztHM3gtEiiglv+m8CI2ESPfTghIu3XxIkTmT9/Ph9//DEhISHuMddhYWEEBAQQFhbGrbfeyv33309kZCShoaHcfffdZGRkMGTIEABGjBhBjx49uOGGG3j66afJy8vj4YcfZuLEiUqqT9E1g5J5b90BPt2YyyOX9WhT85B8t7OIv39fgsHsR2KAk1G9EpRstyIGl4OOtdvoWb2KTrVbMOF073NgosgST4k5jhJLPCXmWKqNIdQYg6g1BmE3+vPhwiV8u/B9Lr72Fi497yz8nLX4uWqxOmsJdFYS7CgjxFFGsKPc/X1YQxFmGohuyCO64ch5Ia5N92PzzYHsbnibnYuWsKs6mB1VQeyrDcThOrW7sO15XPjxlq7zT+tP7G//yld7a1gw5yVsq94/4XoDAgPZlpXVqpNuJdztkcHIl53/zPj14+lU+h0DLJ19HVGLZTAYGNIpiiGdoiivrmfRlkN8siGXFbuL2V1Yxe7CKt5cmQNAXKiVbvGhdEsIoUtMMB0iAkgKDyQ+zL9ddp8RkbbrpZdeAuD8889vsv3111/npptuAuD555/HaDQyduxY7HY7I0eO5MUXX3SXNZlMLFy4kDvvvJOMjAyCgoKYMGECU6ZMaa7LaHMGpEaQHhvMzoJKPv7xIDdkdPR1SB7x/a4ibp27hjoHVO9cyeAL+yvZ9qDSsjKP3eG1VVQ0eW511tCv8ht6V2US7PzfJIeF5gT2+Xclx3oGB/060WA8/odsTgw4XeDCgMNgocZkoYbjD/MzuJyEOkoIbygksqGgyddQRxnh5jrOTjFzNgVAgfu4BkwUGyIpNERRbIik1BD+s0cYdoP/Mc/ZnseF/9rSdbsrXKwvhYjzb2LUb8fTIdD1q3Xm5+xm3rQHKCoqUsItLUdlZRUlJSW/Wq6EMJZHjePCov9wdd37PHTs/x3yk7BAC9cMSuGaQSmUV9ezMruYzN3FrNxTzLa8CvJtdvJthXyzo7DJcQYDRAT6ERZgcT/CAxu/+ltMWEwG/Ewm/MzGxofJgJ/ZiMVkxGwyYjYaMBkNWEwGTMbG52ajAfPPn5t+2mY0/lTWSJDVRJCfWWPbRMTjXK5ff6Pk7+/PrFmzmDVr1jHLpKam8tlnn3kytHbNYDBw7VkpTFm4lXmrcrh+SOpJdd1siVbsbky27Q1OBiZa+eCZv2O86F1fh9Um1NTUAPDVsmUsX73eI3UevsNrcdRwVsUSBlR8hb+r8TzVxmCyAgeyJfAsii0JHjnf8bgMRsrN0ZSbo9lH9yb7zE4765d9TNWWpYy+YCCDkqxENhQQ0VCIxVVHnKuQOFfhUeutNQRQZQql2hhCtSmEamOw+2tkbBGBnU0k127HsW8VtcYgao2B1Bn8T3k53tbWTf1YS9clAa7tBWw4UM66Uj+6dE5uFb1DPUEJdxthr6sHGse/Lftu5Qkd8y+Dg+WDg+kWXMkzI/xZUVvrzRBbpFNdUqy+vp7OVgude1i5vkci1XVO9pba2VNiZ3eJnVxbHfmV9RRUNlDncFFSVUdJVfN/2mkwQLCfGX8zJNw6i8V76wkuOIjVYiTQz0yQn4lAPzOBPyXngX4mAvxMGFv5GzQRkfbqqv4d+PuibWzLq2D9/jL6pUT4OqRTlrm7mFvmrKG23smF3WK5o6eRD5wNvg6rzTi8xN7Arh0Y1K+XR+r8alklZ4VbeCr1U8Jsje97iszxrAoZwa6A3jgNLSP1aDBa2VkTyrdbGig9sydFfYY27nA5CXGUE9FQQGRDPqENJYQ6Sgl1NH4NcFbh76rBv6GGKPKPqPfiJPjT9UHAe3DgPfd2hwsqGizYGsyUNVgoq7dQWm+hrMFCab0fpfUW8uz+5Nr9OVjrT649gFqnCWhb3dTPTY+huLKOA2U1LNx4iHFnJWM1m3wdlte1jN96OW31jsa7DeefmUrfnl1P+LhvG5LpVvMyt/bzo8i+GRjspQhbltNdUgyDEVzOXy8HGAPDMQWGYfQPbnwEhLi/N5gs/3uYzRhMFnBvM4PBhMFkAqMJg8GEyeJH1+7dwWCkwemiweHC4XTR4HTS4HThcLiodzqp/2m7ywUV9gYq7OAXnUpxrYvi2uP/wzYAQVYzIf6HHxaMtQ78Ow1kb6mdBHsDQVb96xARaYnCA/0Y0zuBBT8e5PXv97bahHvVnv8l2xd0jeGl6/uzZeMGX4fVJoUEWkmICj3teiLr87mhz3p6BwcAdZSYY1gZcgk7Avqe9hJezcZgpMIcQYU5ghyOfD9tcdoJcZQS5Kwg0FFB4M++BjirqCjMxVVZRFxUCGF+LvyxY8KJyQDhlnrCLfWkUHNCoZQQToExmg2H6vk80IKjbCeHcs885TvlP+eru+ZGo4FRveN5a/V+ymrqWbwln8v6JLT6nji/Ru+a25ggq4XI0BOfPbuS7nyxoysjgrZzh3Meb9ddSY1f25vZ9JdOZ0mxvVt/5K1nHmr2Yw/PFP71zp106dLluGVdLhf2BicVtQ1U2hvI2pXN2GvG89v/9zQBYVHU1DuornNQbW+gqs5BdV1D4/M6By6g0t543KGfrSIW97vH+P0He+GDvYQHWugQHkBieAAdwgNIijj8CCQpIoCwAEub/+cpItJS3XJ2Ggt+PMh/Nx3iT6O6kRge4JM4cnJyKCoqOunjthbW8eS3JdQ2uOgXb+WOXia2bNxwxOzH0jIYXQ4GVixlcMUXmIMdVNhdzC3vT0Pf8bgMbevuZb3RSokxnhKOvnThhysW8e2n7zHiunFccv5QcLkwu+qwumrxc9ZiddVidVbj76zB31nd+L2rhgBHJUFO208TvpXj57ITSRmRzjK6xcE1VwQA/6Fw+zusLovgm9JoPiuI54D91P62fXnXPNDPzJg+Cby37gDZRVWszi5hcKeoZo+jOSnhFt6qGEBi1VZ6xVYwctfjfNT9+cY7uO3AqSwpVpJ/0CfHngyDwYC/xYS/xURMiBVHmT+1ORtJDjESk3DsT7GdThc19Q4qahuoqK3H9tPXojIb2bt3E5nchco6J2XV9ZRV17Ml13bUekKs5sZJ4yICSY4MINziJNzcQHyIhbgQC8F+J94Ah4WFaSkyEZGT0KtDGBmdosjcU8ycFXv586Xdf/0gD8vJyaFb9+7UnOQbemuH7sRePQWjXwA12T/w0bNP8JGjvkmZyspKT4YqpyHIUcaYkrkk1u0FILM8mmtey6b7mC5c0saS7VNiMNBgsNKAlSpT2Akf5u+oJKohn8iGfEp3rCKhdg+DkvyI8atjdGw+o2PzebrrFg4YEtls6sZ6Y29KjCd+w8zXk7vFhfpzQdcYvswqYGV2CbGh/qRFB/kkluaghFuox8y492v44a4I0kpX0O/Q2/yYeJ2vw5JjOJVx5yd6jNFoIMhqJshqJj7sfzPpFR6sYcUj97B8507iklI5WFZDblkNB0trOPDT14NlNewvqaGo0k6FvYFteRVsy6s46nkctZU0lOXhKC+gwVZAQ1keDeUFNJTn02ArwFX3v+5WoaFh7Nq1s9mT7sLCQsrLy3+94FHoQwIR8bXfn5NG5p5i3lqVw90XdiGkmZcIKyoqoqa6mvEPPUNcyomthlJsN/BdgZkGl4FYfydDz+mF6bx33PuzVn/D53NfoLYdzjnTEiXZd3JpyRsEOSupNfjzVfhvmfpDAftte2j+j3jallpTMAdNwRy0dubDAza+/XQzo8dfzfVDkulQt5u02q10qMsmyZVLUkMul7CMvdZubAgaSrZ/j1/tWRAa4NdMV3JsPRPDyLfZ2XSwnC+25nHdWSnN/n+quSjhFgC2FDqZb7ycm5zvc87emRwIHUBh8ImPBRfvO+1x50Dtr4zfPhEh/ha6xVvoFn/0O+U1dQ4OltVwoLSa/aU1bN6Ty2vvfERirwxqsWB3gMk/GFN8F4g/etd4qwmCLQaszhq2frWA99fmcFYPE6lRQUQF+Xm9u3phYSFduqRjs51awu2rDwlERA67oGssnWOC2F1YxRuZ+5h4wfGHInlLXErno85Y/EuHymtY8WMuDS4nyREBXHZmIhZT0952+Tm7vRWmnAyXi4GVyxhm+y9GXBSaE/k06ibKzTHAIl9H12bVu0wcsnbkkLUja0MuIsBRQefaLZxR8yOp9h10tG+jo30bFaZw1gWfz8agoTgMLTuBPfeMaPJttRRU2Pl8cx5j+ye1ySX/lHCL2zLDUM6OLKJLyddcuv3PvHXmXOrMwb4OS37iiXHndrv3uw4F+JnoEhtMl9jG351d0fU8Pf5pbrvyC2I6pFLvcGKraeyu3vi1HltNQ+PX2npq653YHWB3uAB/woddx7Rv8uCbPACC/BoT79SowJ99bfw+IdTfI8uglZeXY7OV83/T5hARm3hSxx4ea19eXq6EW0R8xmg0cPeF6dz7znpeXr6HGzJSCW2hd4/yymv56Mdc6hxOko6RbEvLYHQ5GF72Lj2rVwOwNWAgS8N/R4PR93dM25saUwibg4awOWgIYQ1F9K7KpGf1KkIcZZxf/hEDK75iVchwtgQNwdFCZof/JbPRyKhejZOoHSqvJXN3MWenR/s6LI9rma+++IbBwBddHiZu/VYia3MYteMRPun+bJub8KK1O52x46fLE93ZLSYjUcHWY669aG9wYKtpoLymnoN5BXy75L8MuvBSSuqMFFY2TvK29ZCNrYeOHD9uMRpICLGQEGqhQ6gfnWJD6JYcS3SIlaggP6KDrQScxPjxiNhEr461FxHxpsvOTGTmsp3sLqzi9e/28ofh6b4O6Qi5ZTV8vP6nZDs8gN8o2W6xzE47Y0rmkmbPwomRr8KuZGPQMI/Mmi2np9wczXdhl5EZOoru1WsYXPEFoY4yLir/gEGVy1ge9ht2+ntmhnNPCw/0Y3iPWD7blMe6nFISI/zpFN22bvgp4ZYm7JYwPu32DFdvvp1Opd9x9r5ZfNvxHl+HJT7WnN3ZrWYTMSGNk71Zinfz8eJZLF78z8adJjPmsHgs4fGYIxIxRyRgCU/AHJGAOSyOeszklNeRU14HVMGWUiCnSf2Bfiaigv2ICPQjLMBCeKAfYQFmwgMan4cFWqgpr8Ca1JMyu5OA2gb8LUbMegMoIq2MyWjg3uFncPdbP/Lvb/dwY0YqEUEt507kwdIaPt5wkHqHqzHZ7qtku6UKcFRyRfErxNfnUG+w8N+ICWQH/PpQAWleDoOZzUEZZAUOolfVSs6qWEKoo5QxJXPJtnbjq/CxlJtb3h3k9NgQ+ibVsv5AGV9syee6wdYW2yPnVCjhliPkh/RgcZdHGb3jLww8+B+KAzuxNXaMr8MSH/JVd/aTOa/T5aK6HirrXVTUuSgqr2DLxg2cmXE+VQ0GiqrqqGtwNi5/VtI4wdvxxI+fxmfZDZDduHSGyWjA32zE32LCajHib/7f12CrmbBAC+EBFhxO10lfp4iIt4zuncCsr3axLa+CfyzZzpNX9PZ1SADsL6nmkw25NDhdJEcGcFkfJdstVXBDKb8teokIRyE1xiA+ivo9eX4dfR2WHIfDYGZD8NlsDjqLsyqWMrBiKWn2bSTnT2N1yMV8Tcv7WxuWHsUhWw35Njufb8rjtwOSfB2SxyjhlqPaETOCqOo9DDnwKhfteopS/2QOhZ7p67DEx3zVnf1Uzlt4cB9fP/43Xnr6Jrp06YLL5aLS3kBxZR3FVXb30mZlNfWU19RTXl3n/j6vpIJN23YRHJtEnRNcLnA4XVTVOaiqc/zquRNvf5kHP9lJr6QiOkda6R4bQGTgif271QznIuJJRqOBx37Tk3Evr2T+qhyuPSuFnoknvjyRN+wtrmLhxkM4nC5SowIZ0ztBvYhaqJCGUn5bNItwRzHlpgg+jPo/Si2xvg5LTpDD4Edm6CiyAgZwYfkHpNp3MLTic/5/e/cdX0WVPn78c3vJTe8BUoAktNCLgFgQRbBjW0XWXrGvru7af65l19111XVt+1V314INbIhIEaSXkBBCQoAQCCUJ6clNbr/n90fgaqQG0nner9e8kjv3zMxzZpI789w5c85fksPIi+hc/3NNz3PH8/HaYkrrnKworKB3RwfVSiThFke0KvE2Ih07SK38kYvzH+LTjHeotiZ3dFhCnBCNRkOw2UCw2UDyMcZ63L59O6kPTeIP7/1AVEIibp8fl8eP0+PD6fXjOvDT6fHh9PiwO73UOJoSeLfPjyE8gQ37/WzYXxlYp6emFNeePFx783HtycNTUQwcejdcejgXQrS203pHcuHgeL7NKeGprzbz6e1jW6WDyROxpaSOBfll+BWkRAUxNSMOvbZzXfiLJsHeKq6seJ1QXxU1ukg+i5qJXR/e0WGJE1BjiGF25B2kO7KYWPM56ZYasm4P4j1fFl51cad5tjvUYuDcAbF8m1NCVnEN5qjOEdfJkoRbHJlGy/epzxDiLCW2IZ/LN8/k04x3qDO3rNdmITrSyXb0ptFoMOl1mPQ6QixHf55IKcWmzNXMeutlTrv2QbBFU+1S1LgUhrCmZ89tgyYCYNRCbJCG+CAtcVYtNqNGejgXQrSZxy7oz6L8/azfVc37K3dy0+kp7bp9pRQbimtYvr0CgLRYG+cNiOuWQwB1B82T7Sg+i7pLku2uTqOhwDqcvcYUxux4ncFBldzDXLYWOPmh7xN49Ee/GdFe+kTbGNorjOzdNayv0qML7vrXQ5JwiwC7vYGqqqpD5r+b8Aw373qIGHcxl+bcwb+T/obdENm0TH19e4cpxHHpiHHLNRoNJq3CuWsjA2It9B3QB2jqeb201sm+WiclNQ5K65y4fYrd9Yrd9T7AR5jFQLQpBkufUbi8/hOOWQghDic+1MIfL+jPE1/m8ufvtzAhNYrU2OB22bZSimXbKsjaXQPAsMQwJvSNQtNJ7qqJ5oJ8NYFku1oXxefRM7Hrwjo6LNFK7PpwHi8eS789n/PcJCtplYuIbNzB1/1fosbSOUZmOb1vFPtqHOyvdxF18cN4u3j/OJJwC1xuDwALFixg8fLVhy3zX1Mq80ZUkGwt4cLs27lg/VhqvEY81U1jIzudznaLV4jj0ZnGLTfpD44d3vTtsd+v2F/vYldVA8WVjZTUOZuapDsg5oqnuPyD7ZyRVsekAbFM7BdD1BGGUBNCiJa4bkwiC/PKWLq1nPtmZfPFneNaNFTiiXD74ZucEooqGgCY0DeK4Ulyp7SzMvsauLzizZ/vbEfPpEGS7W7Hj4aXVrrxj7uTp8O/JdJRxLUbr2de2rMURUzo6PDQaTVMGRTHh6t3Yu45gFm59Ywe2dFRnThJuAUeX9O3RmcNSWLowPQjlpvtH8otjW8z0FbPyomb+I/lRtbk2vgqbzEej6e9whWiRTpy3PIj0Wo1xIWaiQs1MyYlEpfXx55qBwXFZeQXl+IMieGHvDJ+yCtDAwyIMTM2ycbYRBuJYcaj3hWSTteEEEei0Wh46YrBnP/KMvJK6njw02xev3Z4mz3PbYhKYnGpgQZvAzqthkn9Y+gXF9Im2xInz+B3cmnl20R6y7BrQ/ki6k5Jtru5rb4efDjkv1y45VF61G/k0vwHWZF4J2t73tjhz3WHWY2MiPCxplLP7C0NXLK1nDPTuub1jSTcIiDIZCAixHqUEla+DLqTKyr+RYK/hNtc/6YkqOO/BROiqzPpdfSJtqGvKGThGzdjiEnG2ncMlr5jMMWnsnm/k837nfx7XQWeqr00bl+DY+sqXHu38OuO16TTNSHE0cSEmHlrxgiufWc183JL+cv8Ah45P73Vm3f/tMtB3G//RoNXQ7BZzwUZ8cSGmFt1G6L16JSHi6veJd5TjEMbxBdRd1Cnj+josEQ7aDRG8fmgNziz6O8MLf2c8cVvEOrcy6I+f8Cv7dhUsWeQn4ULvyN42FQe/CSbefdNIKYLfo5Iwi1apNIQz6dR9zCt8g0ivft5IvJ75nWyYQWE6KoONoO/6tYHAs3gGz2KvXY/e+x+yhoVhogehI6eRujoaZh10CtYS69gLTFWDbXlJdLpmhDimEYlR/DCtME89NlG3lxaCNBqSXdto4dnvtnM7KwatAYzMWY/l45OxGJo26br4sRp8TO16n8kurbh1piYE3kbVYa4jg5LtIP6ujpKSkoA+Mj6W3ZERXFpxdsM2v81hvrdfBD7CC7t0W7G/aympqZNYqxe/G8GnXUxu2rd3Dcrmw9uGdPlOluUhFu0WLUhhk+j7uXyijeIppxlN1r5p2rbJrhCnEp+3Qz+4G9ur59dVQ0UljdQVNGA0+tnW03TZNZrSQhq6nTN7ZNO14QQR3fFiJ7UNLr509x83lxaSE2jm6cvHoj5BBNjpRRfb9zH89/lU1bnQquBqhWzmHb1NEm2OzENcHfkavo6d+BFz1eRN1NmTOzosEQbc3p8AKxfv56sLTsC898GPokawbsZG0h3ZHH1plu5Mns0JS7LMdfp3l8EQGNjyzqcPRbldfO7seE8uriKVTsq+efi7dw3KbVVt9HWJOEWJ6ReH86n0fdw/u6XSbJV84TvVeZXxlAYeXZHhyZEt2XUa0mNCSY1JhifX7G7upHt++3sKG/A4fGxo7ap07UrPijknAENTBkUx5lp0QSZ5KNeCHGoWyb0xmzQ8cRXucxat5vs3TW8fPVQ+scf/3PWSilWFlby8oKtrN9VDTSNr33bYDPXvvgBmt9Ma6vwxUlT/PU8E5NsO/CjZW7Eb9lj6lqJjDgxbm9Twj2kTwzjRg075P3/8w/jRvdHDAquZ8UZmbxtuJ4q7dEfMVi90sOybeByt06Hs7/UM0TPny4dxIOfbuSVRVsZnRLB2D6Rrb6dtiJXYeKENeqCea5qMlfYP+C8PnDxlt+zMvF21vS8ucM7WhCiu9NpNSRHBpEcGYQ/XbGv1sGmohLyivfTGBzFNxv38c3GfZj0Ws5Mi+b8QXGc0z+W0GOMJS6EOLVcd1oSvSKsPPhJNltK65n66jIuH96Tm8an0D8++IjNzGsbPczdVMIn64rZuKcWAItBx8yz+3DLhN7kbdrYntUQJ+DqoPXMGNs0CsaCsKvZYcno4IhEewsyG4iPPPQLNh8hfOp9gGkVbxDhq+Ae77t8EXUnlYb4I64rxGJsy1CZNrwnqwor+SxzD/fNymLefROI7CKjuEjCLU5KozIy9cNG5j51AZPVMsYVv0Vk4w5+6PsEXt2xm58IIU6eVquhZ7gVU6OeBY/eyFcrNrK5Rs+83FKKqxoDPZ7rtRrG9Y1iyqA4zh0QK8ONCSEAODMtmnn3TeDpbzbz3aZSPs/cw+eZe+gTHcSwxHD6RNswG7S4vH72VDeyaW8dm/bUcHBoXJNeyzWjE7njzD7EhXa9Do1ORUNKPmVicNNQsO9UjcTeY3QHRyQ6mzp9BJ9G38O0ireI9u7jyvJ/MifqNsqMHTdW9zOXDCRrdw3b99t58NONvHfDqDYbZaE1ScItTppPwYe6aWiTzmDijj+TXrGAaHsB89KfY7+tZeMfCyFOliLIsZ8r05K4IrUnO6pcLNtpZ/nOenZWu/lpazk/bS3nsTmbGBRrYUJyMKen2IgOMsiQYkKcwmJCzPxr+giyd9fw5pJCFhfsp7C8qc+II0mLtXHFiJ5cNqwn0cHyBV5XMWD/t0zc8RIAzyx1kZncD3kgUBxOoy6Ez6JncmnF2yR4dnFFxRt8FXlzhz16YDXqef3a4Vz8z+Us3VrO28t2cMeZfToklpaQhFu0mty4S6myJjO14DEinMX8JudGlifNZEPCtaCRnsyFaGuNdTWAhkmTJh32fX1ED6xp47CmjcMUn0pOqYOcUgevr96Pa18Bvl0b+P6dFxie1qtd4xZCdB5De4Xx5owR1Dk9rNxeQX5JPburGvH4FToN9Ai30Cfaxtg+kcSHSku2rqZv5WLO3fYsAF81DOHpJcu46IaOjUl0bi6tldlRd3Jx1f+R6NrGZRVvMzfienZYBnVIPOlxwTxz8UAenb2Jl+YXMCo5nBFJnXsIO0m4RavaFzKU/w39iHO3/4nUqiWcufMVkqtXsbDvH6kz9+jo8ITo1g4OKzb9sVcDw4odSYNHsbvez+56P+UOhSkhHRLSmfZuDv3iipgyKJ7zB8WRFmtr9fF5hRCdX4jZwPmD4jl/0JGf2RRdS1L1KqYWPIYWP7kxF/HvnCRgWUeHJboAj9bEl5G3MrXqv/R15nJh1Xt8H34dW62HdrjWHq4e1YuVhZV8vXEf936czdx7TyfM2rbPkJ8MSbhFq3MZQvm231/IKJvDmUV/J6l2Lb/Nupo1vW4mM+E6/FrptEmItvTrYcUOJxpIPvB7g8vLxm3F/LRmPUEpw9hSWs+W0npeXriV3lFBTB4Ux5RBcWT0CJXkW3R7FRUV6GwlrbKuthqXVoiWSqjL5qItD6NTXrZGTmJh38dQOR92dFiiC/FpDMyNuIHzqj+mvyOTKdX/Q6885AW1//P/Go2G5y4bRM6eGnZWNvLw5zm8PWNEp71GkYRbtA2Nhk1x09gTMpyJO/5MYu16Tt/1L/rvn8fiPo+wJ3RER0cohDggyKQnNVzH5588wZffLWCPCmdZUT2ZexvZUdHAG0sKeWNJITE2PacnBzMh2caAGAu6X3RUIs9/i66upKQpyZ49ezY6W+s0T2yrcWnbQnFxMRUVFa22vvz8/FZblzg5MfZ8Ls27H4PfRVH4OOal/T+URsZGFy3n1+j4PvxavBoDGY2rmVzzMTq8bAoa1+6xBJsN/PPa4Uz710oW5JXx/sqd3Dg+pd3jOB6ScItWYbc3UFVVdcj8KkIojP8TQ4IWc37ZW0Q6irgy9w62BY2gun5UB0QqhDicg89/Xzr13MA8jdGCpc8orGljsfQeyX67hdm51czOrcZnr6Zx2yoat67EWbyJEJuN7du3SdItuqyDd6PPHtabfumt0yFQW45L25qKi4vp178/jjb4YsBut7f6OsXxi2rYxrTN92DyNbAnZBjfpv9ZWhqKk6PRsjDsSrwaPcMaljOp5jN0ysuiNtzk0b7A++1gG//OquO5uXkEOcroG3HspuVRUVEkJia2ZohHJQm3OCkutweABQsWsHj56qOWDdWP4fE+BdzQo5jUhkz+nz6T4Vdb2Ni4DRjSDtEKIY7kWM9/e/2K0gZFcb2fvXY/2MIJHjaV4GFTMWj8VOf8yNyNe7jqjHCsRjm1iK4r3GY+7Li0J6Ktx6VtLRUVFTgaG5n+yEvEJrZOj7/5a5cy7z+v4HQ6W2V9ouVi7PlM23wPFm8tpbb+fNX/73h1MmybaAUaLUtCp+HTGBhp/5Gza+ewM7I/c1t5M3VV5QBcd911Ry0XfekfsaaP44HPcil5/z6U++hfHlqsVrbk57db0i1XReKkeHxNg3CeNSSJoQPTj1m+mDN5zV/F2a7FDPZkc2k/A5e6/sy+nHlkx1/FtsiJ8s2rEB3oaM9/xwPDAJ9fsae6ke377RSWN+DwgC3jHJ5euI8Xl5YyITWa8wbEck7/WCKCukbCIYSA2MQ+9Ewd2CrrKisuBKC6pibQXP9kyTPxxy++LofL8u7F5GugxDaIOQNfwa23dXRYojvRaFgWchFejYHT6n/gxph8dp5pJAvVaptw2OsAuOD2x0gffOTHUd1+WFSiaAyPZ8wfZzE2ysuRHucuKy7kwz8/TEVFhSTcomsJMhmICLEeZ2krS/gtH2f3YkjJF1w92ERCfQ4J9Tk0GCLYEn0+W6POpdQ2kCP+twghOoxOqyEpMoikyCDO7qfI376T2V98TtrZV1Jq97Agr4wFeWVoNTAqOYLzBsZx3oBYekUc72eEEKKrczgcAPy4eDE/rc1ulXV2pWfiO1KP2kwuzXsAo9/BnpBhfNn/ZTz6oI4OS3RHGg2rQqbg1Rg4vW4uz5xl5nPXj+xWl7TqNXxkQtIxvwy0xjv5PHMPJQ4t+wxxjEmJbLXtnyxJuEWH2ecL46U5DlYPe45rEvYxuHQ2Nk8FI/Z9xIh9H1Frimdb5ER2hY9lX/CQIzaDqq+vP+zz40djr69vjSoIccrTajTEWLVUL/43f/rD1fiDk1i+y86KXXYKK12sKapiTVEVz36bR59IE+OTbIxPstE7whToTVQ6XBOi+3G5XACMTO/BqGGtM17vwWfiKyoq5K75EaRVLGDytmfQ+13sCh3N1/3/ilcn46WLtrUueBJ5W3dyW9xmrjCtJKvobyxJ+V273jiLCzFzdno0C/P3s3pHFdHBJnpHdY5WHZJwiw5XqwllTeIFrOt5I8nVK0irWECfqmWEukoYue9DRu77EK/GQElwBntCR1BmG0CZrR9uV9NzYXPmfInO0rKuGjzVpQDybJkQreBgh2vnnntus/m6kBisqadhTT0NU6+BFFa6KKx08d8NlXhrSmnctprGbasx1e1l+7YCSbqF6IaCraZWeybeqG/qWXv9+vVkbdlxYK4izuiit7WBBJOTYL2XYL2HYL0XHQqnX4fDr8Pp01LhMbHHaWG3w0KZ24RC033umivF6D3vMr74TQAKwycwt98L+LSmDg5MnCq+ru7NhvXrefNCC8NKPkHnd7Ooz6Og0bZbDAMTQtlf5yJnby3zc8v4zWgj4Z1gfG5JuEWn4dfq2RF5Jjsiz0Tnc5Jcs4o+VUvpVbOeEHcZveo20KtuQ6D8lSqYy6+x4EuoQEWGUaGNokIbhV0TfMxv1DblbOKrvMV4PJ62rpYQ3d6xOlwDcHoV+xr87Kn3U9KgICyOkFGXEjLqUnyNtTz+zRauOM3PhNQozAYZrkYIcSi310vfCC03jHAwKXkfvfz7iFRVmGh5L/BedOzXRLGxQsf3EUYsvu3ofE58XbBTMZ3fzbnb/0T/8nkAZCZcy7Lke2XoL9Hu3sr00O+cq7jXMpfBZXPQ+938kPo4StN+KecZadFU2F3sq3Xy7cYSrhrVE5O+Y/8XJOEWnZJPZ6Yw8mwKI88GpQhz7iaxZh3x9TnE2vOJcOwkQlPPBWkGYDO4NgeWdWnM1OijqNVHUquLPPB7FDW6SOy6MJRGi62L9BwrRFdytA7XAHoBYwCPz09xVSOF5XYKy+pxW0OZv7WO+VvXY9ZrGNkjiHHJNsYl2bAZj36SlOboQnRver+LJNdWejtz+W1GNpHDbUAW+H4u40dDnS6COl04Lq0Ft9aMW2NCoUWvPOiVB4NyY/XXE+yrwearRY+PBFVGQiRMOd8M/BfvmlmUBA9iT+gIdoeOoCR4CH5t575UDnaWMHXrYyTUb8KPjsV9fs+muGkdHZY4hS32DCF1yGlM2fokA8rnovO7+D7t2Xb7X9JpNUzNiOfjdcVUNbqZl1vKxYMT0Go7rl+ozv0pIgSARkONJZEaSyI58ZcDYPA1Ur38f+z9/jUunTSGtFAPEd5yQnyVmJSTWM8eYj17DlmVFx11+gjODjdy2hQz4f4l2Cp91Fp6UmPuKU2vhGgHBp2WPtE2+kTbKKKMt//2LNa007CmjsUZGsPyXXaW77Lj97hwbF9Dw+YlOIoywe87ZF0hIaEy/rcQ3YxOeejt3Ey/xkySnQXoOdAazdDUWma7JwpH9BBKjMlU6WOp1Ufgb8EdNI3yEeyrJcqzl4aC5QRVbub0tHAitfZAa7qxu9/BqbOxK3wsO8InsDN8LE5DWNtU+ASlVixk0vbnMfvqcepszO33IsVhYzo6LCHYGn0ePq2BCwr+SHrlQnQFHr5Lfx6ftn1ueAWZ9Fw0OIHPM/ewq7KRJVvLOTs9OtB3THuThFt0SR6dlQKS+TDTQ+P48QzrkwaATnkJ9VYQ5q0g1Fd54PdKQn0VhHqr0OMjwltOhAmGjjaC/yvY8hUAfrRUGRMoMyVTZkqhzJREmSmFKmN8s2ZZ0uGaEK3H7WzAtXsTV/z2Vnr16UG1S7Gn3s/uekUtJoL6n0FQ/zMw6SApWEtKqJYIswaNRkP1/n28+cgN1NbWSsItTjn5+fmdcl0nI9ZdzMDGNaQ3ZmFWjsD8Wl0EheZB/DerkTc+XcxZV1/F+X3HnfB2lKbpy/c6fQSLKsqZ++l6zrr5QaaMHUhvxyb6OHNJbczG5qslvWIB6RUL8KNlp7kf+dbRbA46jQpDwhHX39YdsVndFUzc8RKplYsBKLEN4rv0P1Fn7tGm2xWiJQojz+brfn/loi2/p2/VUi7Kf4hv+v2l3R7biA0xc/6gOL7NKWHT3lrCrQaGJYa3y7Z/TRJu0a34NHqqDHFUGeIOeU+j/Nh8tYT6KqgoWE9N/jLSe/ekt81NiqWBUIOXKPceotx7GFi/PLBcvVfHxvpQNtSGkVkXRubupm/apcM1IVpPaHQcMT2TiQHSAaUU5fUu8kvrKSitx+HxsbXGz9YaP9E2E4N7hhIZ1XpjfQrRVdRVlQNw3XXXtfq67XZ7q6/zWHTKS5oji6H25cR5igPz67Wh5FtHUmAdToU+HjQaNti/x31oQ5eT4vQ0rXD9+kyythQdmBuMltMZEVrD5KgypkSVMTC4nt7OPHo787ig6n222G18Vx7L3PI4NtSFofj5zllbdcRm0sEFajGXZj6J0d+IT6NjXY8bWNPrlk7f9F2cmnZGjOerAX/n4vzfkVKziml59/J1/7/i0rdOR4rH0ifaxoS+USzbXsFP2yoItRjoiIdK5b9TdDi7vaHFw3oB2BtadmGgNFrq9eHU68NZWlfFV4sWcmHiFIb2SAelsKl6Yv37ifWXEusrI8ZfRox/P8F6D6eHV3F6+IEYB8P+s2zsdr6Jfe829oYMozwoXU52QrQijUZDTIiZmBAzE/pGUVzVSH5pHYXlDZTbXSzash+DFsIn3c6uahd9OzpgIdqJw14HwAW3P0b64BGtss78tUuZ959X2vWL5CBfLYMbVpLRsJIgf9P53IuObZah5FlHsduUimqH3o3d3qaEe0ifGMaNGnbI+/uB/wDh/mr6+7cywF9AH38R/Wx2+tnsPJhSSB3B5OnSyNP2Y7s2heWrmoYvc7lb3pnb4Ri9dqboVvPSfTbi1XegoNQ2gIV9/ki5Lb1VtiFEWykOG8OcAa9xSf4D9KzL4uqcW5g98FXspkNvjrWFYYlhVDvc5O6tY15uKadHt3+zcskQRIdxuZvuFC9YsIDFy1e3ePmDQ3t5fd4TjiHIZCAixHrwFdXEUc1gthyYo1E+IrxlxLl3E+spJs5dTKR7HzFBEKNyYWcuAG6Nid2W/uyyZrDTOog9ln54tIc2mZHm6EK0nFarITkqiOSoIBweH/n76sjZW0utw0PIiIu4+YudjM2q57Yze3NWWsc9oyVEe4pMSKJn6sBWWVdZcWGrrOeYlCLBXcTQhuX0dWxEhx8AuzaUjUHj2BQ0FocuuH1i+ZUgs+EYw5eFUEQSRZyLye8g2ZlPH2cuyc48QlQ9p/kyOc2XiRc9m9ND+bTGiFu3B53fdUL9w+j8bnrWrietYiHpFQswGJxg0FJBGOtSH2BL9PntOtySECdjb+gwPsn4N9Py7iXSUcRvcm5mzoBXqAxq+6/LNRoNZ6XFUO/0squykZXlevSRPdt8u78kCbfoMB5fU3PQs4YkMXRgy7+hXbNuAwvywO/zt3ZoAUqjo9KQQKUhgc00dUSydtUqin54j0njMhgf3cBpYVWEG1z0acymT2M2AG6/hsy6MJZXR7KsKop1teE4/DoZ/1uIk2Qx6BieFM6wxDA2bdvJ3EXLCEoby6odlazaUUlKuJGrB0dwVp8Q9MfokVR6OBctZfQ7CfeWEekpI9hXjVG50Cs3BtV0J9OlseDSNk12XSjbTXWYZGQmdMpNemMWQxuWEevZG5i/x9ibbNsECs0Z+LvQEFYurYUC63AKrMPRKS89Xdvp48ylt3Mzwb4ahgRVMmSiGXgf/6r/UWVNZn9QOhXWvjQYI2k0RtJgiMStC0KDQu93YvHUEuLaR7hjF/H1ucTV52L0//wc+x5/FE9+sxsufZGMmHM6rvJCnKDKoL7MGvwul21uSrqv2nQr3/b7M7vDRrf5tnVaDRdkxDN7w15K65zEXvX/qHK08vMpRyEJt+hwze8yHz+rydAG0Rybw6dlzV4f0bbT0fROZ5XyE+0vJ8m3k2TfTpJ8uwjV1jI2rJqxYdU8nLIdLzr26HqytiKINxt14G7okNiF6C40Gg2hvjrK5zxPVXAkISMvwTZkMkXV8OLSUv70TQ51677EvvEHlOfwX3BJD+fiWKy+OpJcBSQ5C+jpLiTYV9Oi5S/sDa/+MZj9vE79llWUBGdQEpzBflu/duuttyMlh2m4IWwDU0pmY1FNzzN7MZBvHc7GoAmUG7t+J18+jZ5d5n7sMvdjsbqccG85jTnfElu1gUn9QgnVNhLVWEhUY8tbEdgNUeyIOIP8mKl8s24nH2b/nt9eJpfuouuqN8XxScY7XLLlIXrUZTNt87382Pt35MRf2ebbNui0XDw0gY9XFlJWsh2bcXCbb/Mg+a8V4gT98osCLzYKSaEQQClCfZX0dBXSy7WNnq7tBPtrSfbtIjkcrro+CI/vj5RtGtw01mfICEqCB7Vbr41CdBdORwOg+M29T5LYtx9un2JbjZ+CKh/OkBgizrmN+PNuY0CEjtRwbbM73tLDuTiSYI2D4fVL6OdY3+xu7EEN2mAq9bHU6qNwac14NUY8mqbk2eR3YPY3YlIOQrzVhDj3EqTzEk818ZWLSKtcBIBXY2BfyBCKw8awK+w09geldZ/mwcpPUs1qngz7hpH32tBq8kBBnS6cjUHjybWehlMX1NFRtg2NhmpDDIuqk5n72QoueuBpLpo4lpiGAqLtBYQ7dhHkqcLqqcLqrsTod6AAr9aMUx9CvSmWGnMvyoPS2RcymAprn1/8XezqyJoJ0WpchlC+GPhPJm1/ngHl33HOjr8Q1VjIkpSH2rw/JItBxxmxHv71/IsYn7i8Tbf1S5JwC9HaNBpq9VHU6qPYHDTmFwn4doJK1pLsKaRHCPSsy6JnXRan8W+8GiMlwYPYEzqCPaEHEnAZE1yI4xIaHUd0jyQAeiTC6T4/W0rrWb+rmlqHh6xyHwW1MDIpnIweoeh13SSxEa3H56GnfSNzrrZwYfhH6Ot+7gG/zNCTXaZ+7DKnUW7oiUtrOe7VLlq4iPVzP+aWO+/g/AGhxNdtIr5+E1ZvDYm160msXc/pu16nUR92IPkeTXHYGOym2LaoZZsKdpbQv/w7Bu7/ljDnHjADaNjgiGd3j6kUmQe0SydonYsGuykWuymWHRFndHQwQnQaPq2J+alPU2ntw+m7/smQ0i+IaNzJ3PTncRgj2nTbZh2g2u5x1MORhFuItvaLBDyz1sSHb23kzkef4rwkPymNOaQ0biTEW0Wvug30qtsAu9/BozGw29KfndYh7Agawh5zunS4JsRx0uu0DOoRyoD4ELaU1rOmqJI6p5eftlWQuauakckRxCFDiolfKFrKmSVvQT8DoCgxJJIXNJpt5sEn2YmXhrIGRY4vhcielzTNUopwxy4Sa9eSVLOGXjXrsXpr6Fcxn34V8wGotKRQHDaaXWFj2BMyHI++c94RNnlq6VP1E/3LvyOxdn1gvlNnY35dHx5+dwX9Lj6Hs/sO6sAohRCdkkbD+p6/pdKawtSCx+lVl8l12dP5Lv1P7A1tnREYOgtJuIVoRwd7Zv/fDxv4yBIMBAFj6W1pYEJEJaeHVzIhvJI4k4vejTn0bsxhYsX/cPi0rK+2Muw8Ezb7coyOMGrMvbpPE0Qh2oBWq2FAQgjpccHkl9SxdmcV9U4vS7eWY9GDbeiUQOeN4hTX+2wqTYm89+M2qgZcS/TA01t19fV1dZSUlARel2AijwkQNgFtqJdEZwFpjmxSHVn0cm0n0lFEpKOIYSWf4ENHsTmdbZYhFJozaKypaNXYWirYVUpK1TJSK3+kZ+0GtPzc8VBx6EjyYi5kW+RE5n/5GduqltGvA2MVQnR+RRET+HjIe1y45VEiHUVckXsXqxJvZ23PGzo6tFYjCbcQ7ehYPbPnADlKEaUqSPYWkeIrIsW3g2CdnQnRdiZEm8DzPmx4H5cuiDJbfyqtfaiypFBpTabKkoLDEA4yLJIQATqthkE9QukfH8LmfbWs21mN3eUlcvJMbvhsB7+bbGba8B7S1PxUptXxfa9HeHjBDH6bHk5rPdXv9DQlo+vXrydry47jWCKNUH0yZ0ZUcmZEBWdHlNPb2kiKM48UZx7wMTdHa8i8yUq5eza6chflQWnUWHqh2qKXb+Un1LmPOHsuvWrX06t2PWHO5s+1l1tT2RY1kfzoqdSZE1o/BiFEl/LrLxiPRwkWtsb+mcsq3mCk/UfGF79BdPkqsuuGtVGU7UsSbiE6wLF6ZvcTxA6S2MFZTc0PvftxbV2Ge+uPTBmdSrK2FJOvIfAM4C859SFUWZKoMyVQb4ql3hSLyVfNkFgtNn89GuVrmwszITo5nVbD4J5hDIgPYXX+TtZs308Zkfz+ixzeWFrI/ZNSuXBwArpjDCcmuqk2+KLS7W1KuIf0iWHcqJZdOBYcmML91aT5C+nr30GKfxchOjtje+mBlbB1JQAerYkKa19qLInUmns0TaZ4HIZwHPownIYQlOYwl3xKofe7CKOeEfFaRqocMvbuJdS1l+iGbUQ3bMXkaz6qhh8dpcED2R5xFtsjz6LW0usE9owQortp+ReMh3qdIK6NH8Jf+20izZHNK2E5aIcasDd27dF9JOEWorPTaKg2xJLp7MOH8+YxY9z9jBh1GhGOHcTatxDRuIMIx04iG4sIcZVg9taRUL+JhPpNgVVMBO66wwa1D8BKcOqCcRjCcOpDcRhCcetseHRmPFoLHp0Fr9bc7LXFV8TkPjr6egqIq9fh1ZoOTEa8WjNerQmf1iiJvOgS9Dot6eE65rx9G8998hOfba6lqKKB+2Zl8/qP23nw3DQmD4xDIy1FRCsJMhuIjww5waVDKCaJYiaCUuT+9C3uTXO54tzRDI10E+/eidHvIt6+mXj75iOuxa0x4UOHX6PDr9GiV15Mfgda/E0dnN1mA/Vf2Nl8Oa/GQEVQX/aEDGd36Cj2hQzBrbedYF2EEN3VyXzB2NwoXvdP4CrPlyQZ9/DeJRbWef5HlmskDaaY1gm2nUnCLUQXY7c3UFFTRwVRbDWcDqGnQ2jTewa/k0j3XqLcewj17CfUU0GoZz/m+p0ENewh1tbUZNbsq8fsqwd2H/d277guCOwvNbV7PwIv+qYkXGPEozXh1RhpcHn57U1WQmv+jH5j+IEhdEx4DpTzao14NGZcWjNurRWX1oJba8GltRBVX0RqhJZQfw0GbwMenUWeWxetRnldXDk4gnsuGM77K4p466cdbC2zc8cHGxjUI4TfnZvOWenRkniLzkOjYVejmUU5Hr7UBKOzRaClL72tDQy01ZFsaSTF0kiypZFelkYiDB7CDU19hxiVq2kdh+m2wK+g1O6n1twDd1gfqvXRlBqT2GfqzX5DT/wH7467gPJ64NideNZJR58n1LT2SGpqalplPUK0tZP7gvGgEOao+wnN+j+ujcxjlGE7QzZcyZpeN5OV8Bt8WmOrxNpeJOEWoos42OHaggULWLx8dQuWjMBT7aYxbwuhIy4kKthEhMFNhMFDhNFNhMFNsM6LVefDqvMR1Ox3H1adF5PfidFTR5AtGIteYdL6Met8WLQ+jNqfr970eNH7vUAjB/vRidZAci89qG1gb2Gl9fCne2xQ+xCsaZrl1lrx6Cy4dUG4dVbcOiueX/1064JI9OxHjTAw0r2GiKraA8v9/H5TeUngBdhMeu6emMqM05L59/IdvLu8iNy9ddz4/jqGJ4bxwLlpnN43ShJv0Skc7S6SA8g7MB2kVT4sODEpF1oUGvzo8ONDh0tjxImJRT+tYfX3c7ANSUFnCwM8wPYD0wnGub8IAK/Xe8Lr6Kpao2ntrx3cn42Nja2yPiE6O6XR8UVVX176fB2zb0+nn34vE3a9xqCyr1iS8iA7I8Z3dIjHTRJuIbqIY3W4djRr1m1gQR5MGJx8xGXdB6aaIy3/yXtceOONhyyvUX70eDEoD3o8B373YsCDXnkp3JpP/soFjDtnMn17RqFX3kD5g2UMuDEpN0ZcGJUbk3Jhwo3GbUfvbSTErEV74LaM0d+I0d9IkKfymPW+/EILNLwD+Ucu49IcuLOus+DWWHDpLNQ0uDlzmoXEhv9gLurVLFH3aC0//x6Y/3MyL7qWXbt2NXt9SW8dZ8Yn80lOFV/l1bChuIYZ/7eWtCgTvxkSyfgkW+AZ79DQUKKjW6t7LSFa5mTvIukPTEGAwdB0OXjyTUF/tnhxA5nbwOf3HbtwN9N6TWt/tnqlh2XbwOV2t8r6hOgq8iv8PNJ4A3eOMDBh56uEO4u5LP9+ikNHsSrxdvaFDOnoEI9JEm4huphjdbh2OFaT4YSXPZHlPQcmgDyvna+2eDGdlYY+smVjsWZmZvHhW//kskdeYeiQwRj9Dox+Bya/A5O/8cDvjRj9Tkz+Rkw+R6CMq2IXVds3EBYZjc0INp0Xm95L8IGfugM3K03KicnnJPiX14RaGJZhAPcy2NeikHEqA0//zgbVj+LLDMOlDcKpDcKpC8KltTa91llxaoNwHfx54H1j/R5sRkDJUFVtrbGuBtAwadKkI5bRBYUTctqV2Iacx9YK+H+L9uGp2kvdmi+wb15MSFAQ27dvk6RbdBut0xS0idXctZp8toXW3J8hFtmf4tSl0JAfcwGFEWcyZs+7DNv3MYm160jctI5dYWNY1etWSjpx4i0JtxCi0/q5Gf1CFi9f06JlPdUmGvMcXHzzJQzundb8TaXQ48WkXBhxNd1dVy5MB37ft2sbO7NWEJncjxCzjiCdl2C9tylp1/kIOvi73kuwzodN50V/oGm9WeMhzqYFKsDZwvFy9fDqH0LwV9+Ga1VTgu7UBeHUWnEdSNh/Tt5/nn9wXkR9EclhGqx+OxrlPXyvxAIAp6MBUEx/7FUS+x59pGCnV7G12sfWaj9E9CByyr0kTJ1JycJ3qa2tlYRbCCGEaAduvY1lyfeSHXclY/a8y4D935BUs4akmjXsCx5MVvzVbI88G7/W0NGhNiNXY0KITqs1mtFbDPpj3pU/2Jz+4CPmS/PhqzU/cuGAMxg6MJ1jNl4/kMAblZv8nEyyf/iCKdMuZ2ByLGbV9OykWTkx48SknJiVCxNNP5vedzYl+34Heo1Cq1FY/HYsfju05PFHPTx/XzDU3g8rwa1tetbdpbfh1tkO/AzCpbPh1gcdmNf02urbwzkpOpK8OwhvDA0s49WauvW47qHRcUT3SDpmuV5JMMHrJ3dfLVnFNdhdYIzt0w4RCiHEz1qzIzbp2E50VfXmeBb2fYy1PW9k9J53GbD/WxLqc0ioz8FuiGJT3GXkR0+l1tKzo0MFJOEWQnQBJ9OMvr23W6cNZ9N+PwPoSVxEy5rQL12+mh8+eocrrr+JEWk9D5uUm5Uz8NqM60AC31RO57FjVg4shqYE+WDzepvn+O603/7bIKh/HrJ+nufT6HDrbL9I3JsSdJc+BIchFIc+jBhvBeX99aR6thDREITTEIZDH9rpvmE+WUa9luGJ4QzpGcb6/CJm//sz4M6ODksIcQpoy47YTsWO7UT3UGdOYGHfx1mVeAcZpXMYXPoFNk8FY3e/w9jd71BiG8SW6MlsjZpEozGqw+KUhFsIIToNDQ4vuA2h+MOTcNDU6/DxWrlqLZ+/9xbhIy4gLNhCiN5DqN5LsN5DiN57YPIQrDvw8xfzbDgI9tUSFxOJTefB5G9Ei0KnfFi8tVi8tU1DAh3G6cD0q6xg/ytk/zzfpbXQqAuhQReKXR+OXR9OvT4Cuy6i6ac+HEv9bsxd7Eyk02roHabDU3n8w+oJIcTJaIuO2E7lju1E99JgjGJ14q2s7XkDfSt/ZOD+b0isWUu8PZd4ey5nF/2NUlt/doaPZ40nHm07N9zrYpc5R/b666/z0ksvUVpaypAhQ3jttdcYPXp0R4clhBDt5mAT/PGDU47aBN8NVByYDsrckMW8j97FNnwiOkswGhRBOt8hifnBZD3c4AkMLxdOPWG+CqLDQ4g0eQk3uNFpONC5nYNwT9mRg9bDy4+F0FB1N43rog4k4hGB5LwpQQ+nXh9JvT4Chy440MTdLs0huwU5fwtx/KRjO3EqasmjFHvJYGlEBraQaoY0LGeYfSmJrq3E2fOJs+dzGnDt72zsc7ffNUS3SLg/+eQTHnzwQd58803GjBnDP/7xDyZPnkxBQQExMTEdHZ4QQrSrE2kKb9Q3nQ6O93l5Pz8n7T8PG3cTQwemo1F+TLiwqkasqoEg1YDNbydY1WNT9QQre+B1kK8Wo9ZPkMZJkHsP0e49R92u26+hzG2izGWmxA7jLzCTUD+boNJCGoxRNBiisBujcBgi8Gu7xSmuW5PztxBCiCNpnUcp0og1JjIpspxJUfs5O2I/ZQ0+9lTaaa9+zbvF1cjf//53br31Vm688UYA3nzzTebOncu7777Lo48+2sHRCSFE19F6w87ZgEgagUag/AjLLl2+miWfvMM1v53ByD5RB5JyO8H++l8k6PUE++ux4sCoVfQyO+lldkIo0MMI3u+g8Ltm61VocBjCcOjDcOpDcOpDcB346TSEEO+toG6QngGeXCLqtXi0Fry6pjHZPTrLgc7itC3aD6Ll5PwthBDiSFr7UYpVwH8LCsia8xbPja856fUdry6fcLvdbjIzM/nDH/4QmKfVapk0aRKrVq3qwMiEEEIcm4ZaF1TroqiLGETdUUrqlBerr54gfx1BvjoqijazO/snxo4fT2KYHpu3imBvFTZvNTp8WD3VWD3Vh13XOOA3l1vB/g/IOfz23BoTbq0Zj9bc9FNjwqcx4NUYcLh9uMZKc8yTIedvIYQQx6M1H6Uos1nZVataZV3Hq8sn3BUVFfh8PmJjY5vNj42NZcuWLYddxuVy4XL93PtPbW0tAHV1R7vUOz4NDQ0A7NpVjNt1hB6GjqCspBSAffv2kmdp2YXcqbZsR277VFu2I7cty7ZMV4z7xJc1kb/FyoolLqylXjQmIxAFRKFBEWHwEm1yE270EK73Emb0EWbwEGbwEmbwEkIDIb4aIsNshJianle36PwE6f2/2IYTcKIDLAemX0qP0FBcXHzSTZ8PnnuUat8LgI7W2c7fjY2NAGzfvgO3u2Xn7yMp27cPgH27d7N2/QZZp6xT1tmJ1ivrPDXXWVy8F2j6zD/Zc8dxn79VF7d3714FqJUrVzab//DDD6vRo0cfdpmnnnpKATLJJJNMMsnUaabdu3e3x2mz05Dzt0wyySSTTN1hOtb5u8vf4Y6KikKn01FW1rwX3LKyMuLi4g67zB/+8AcefPDBwGu/309VVRWRkZFoNCfeT3xdXR29evVi9+7dhIS0TrMH0UT2bduS/dt2ZN+2re6wf5VS1NfXk5CQ0NGhtKu2Pn93h7+No+nu9YPuX8fuXj/o/nXs7vUDqePRHO/5u8sn3EajkREjRrBo0SIuvfRSoOkEvGjRIu6+++7DLmMymTCZTM3mhYWFtVpMISEh3fYPsqPJvm1bsn/bjuzbttXV929oaGhHh9Du2uv83dX/No6lu9cPun8du3v9oPvXsbvXD6SOR3I85+8un3ADPPjgg1x//fWMHDmS0aNH849//IOGhoZAr6dCCCGE6Hzk/C2EEKK76xYJ99VXX015eTlPPvkkpaWlDB06lO+///6QjliEEEII0XnI+VsIIUR31y0SboC77777iE3Q2ovJZOKpp546pLmbOHmyb9uW7N+2I/u2bcn+7fra6vzd3f82unv9oPvXsbvXD7p/Hbt7/UDq2Bo0Sp1i45AIIYQQQgghhBDtQNvRAQghhBBCCCGEEN2RJNxCCCGEEEIIIUQbkIRbCCGEEEIIIYRoA5Jwt5LXX3+d5ORkzGYzY8aMYe3atR0dUqfzwgsvMGrUKIKDg4mJieHSSy+loKCgWRmn08nMmTOJjIzEZrNx+eWXU1ZW1qxMcXExF1xwAVarlZiYGB5++GG8Xm+zMkuWLGH48OGYTCb69u3L+++/39bV61RefPFFNBoN999/f2Ce7NuTs3fvXq677joiIyOxWCxkZGSwfv36wPtKKZ588kni4+OxWCxMmjSJbdu2NVtHVVUV06dPJyQkhLCwMG6++WbsdnuzMjk5OUyYMAGz2UyvXr34y1/+0i716yg+n48nnniClJQULBYLffr04dlnn+WX3YvIvhVH0pJz7/vvv49Go2k2mc3mdoy2ZX766ScuuugiEhIS0Gg0fPnll8dcpit9Pre0fkuWLDnk+Gk0GkpLS9sn4BY6nmuew/nss8/o168fZrOZjIwMvvvuu3aI9sScSB272v/hG2+8weDBgwPjM48dO5Z58+YddZmudAxbWr+udvx+7XDXx4fT6sdQiZM2a9YsZTQa1bvvvqs2b96sbr31VhUWFqbKyso6OrROZfLkyeq9995Tubm5Kjs7W02dOlUlJiYqu90eKHPHHXeoXr16qUWLFqn169er0047TY0bNy7wvtfrVYMGDVKTJk1SWVlZ6rvvvlNRUVHqD3/4Q6DMjh07lNVqVQ8++KDKy8tTr732mtLpdOr7779v1/p2lLVr16rk5GQ1ePBgdd999wXmy749cVVVVSopKUndcMMNas2aNWrHjh1q/vz5avv27YEyL774ogoNDVVffvml2rhxo7r44otVSkqKcjgcgTLnn3++GjJkiFq9erVatmyZ6tu3r7rmmmsC79fW1qrY2Fg1ffp0lZubqz7++GNlsVjUW2+91a71bU/PPfecioyMVN9++60qKipSn332mbLZbOqVV14JlJF9Kw6npefe9957T4WEhKiSkpLAVFpa2s5RH7/vvvtOPfbYY2r27NkKUHPmzDlq+a72+dzS+v34448KUAUFBc2Ooc/na5+AW+h4rnl+bcWKFUqn06m//OUvKi8vTz3++OPKYDCoTZs2tWPkx+9E6tjV/g+//vprNXfuXLV161ZVUFCg/vjHPyqDwaByc3MPW76rHcOW1q+rHb9fOtL18a+1xTGUhLsVjB49Ws2cOTPw2ufzqYSEBPXCCy90YFSd3/79+xWgli5dqpRSqqamRhkMBvXZZ58FyuTn5ytArVq1SinVdILWarXN/rnfeOMNFRISolwul1JKqd///vdq4MCBzbZ19dVXq8mTJ7d1lTpcfX29Sk1NVQsWLFBnnnlm4ANF9u3JeeSRR9Tpp59+xPf9fr+Ki4tTL730UmBeTU2NMplM6uOPP1ZKKZWXl6cAtW7dukCZefPmKY1Go/bu3auUUupf//qXCg8PD+zvg9tOT09v7Sp1GhdccIG66aabms2bNm2amj59ulJK9q04spaee9977z0VGhraTtG1ruNJSLvy53NLEu7q6up2iam1/fqa53CuuuoqdcEFFzSbN2bMGHX77be3dXit4njq2JX/Dw8KDw9X//73vw/7Xlc/hkodvX5d9fgd6fr4cNriGEqT8pPkdrvJzMxk0qRJgXlarZZJkyaxatWqDoys86utrQUgIiICgMzMTDweT7N92a9fPxITEwP7ctWqVWRkZBAbGxsoM3nyZOrq6ti8eXOgzC/XcbDMqXA8Zs6cyQUXXHBI/WXfnpyvv/6akSNHcuWVVxITE8OwYcN45513Au8XFRVRWlrabN+EhoYyZsyYZvs3LCyMkSNHBspMmjQJrVbLmjVrAmXOOOMMjEZjoMzkyZMpKCigurq6ravZIcaNG8eiRYvYunUrABs3bmT58uVMmTIFkH0rDu9Ez712u52kpCR69erFJZdcEvhs6w5Olc/noUOHEh8fz7nnnsuKFSs6Opzj9utrnsPp6sfweOoIXff/0OfzMWvWLBoaGhg7duxhy3TlY3g89YOuefyOdH18OG1xDCXhPkkVFRX4fL5mSQpAbGxsp32uqDPw+/3cf//9jB8/nkGDBgFQWlqK0WgkLCysWdlf7svS0tLD7uuD7x2tTF1dHQ6Hoy2q0ynMmjWLDRs28MILLxzynuzbk7Njxw7eeOMNUlNTmT9/PnfeeSf33nsv//nPf4Cf98/RPgdKS0uJiYlp9r5eryciIqJFx6C7efTRR/nNb35Dv379MBgMDBs2jPvvv5/p06cDsm/F4Z3IuTc9PZ13332Xr776ig8++AC/38+4cePYs2dPe4Tc5rr753N8fDxvvvkmX3zxBV988QW9evXirLPOYsOGDR0d2jEd7prncI50DLvCZ9Tx1rEr/h9u2rQJm82GyWTijjvuYM6cOQwYMOCwZbviMWxJ/bri8Tva9fHhtMUx1J/wkkKchJkzZ5Kbm8vy5cs7OpRuYffu3dx3330sWLCgS3Ve0VX4/X5GjhzJ888/D8CwYcPIzc3lzTff5Prrr+/g6Lq2Tz/9lA8//JCPPvqIgQMHkp2dzf33309CQoLsW9Gqxo4d2+yuzbhx4+jfvz9vvfUWzz77bAdGJo5Heno66enpgdfjxo2jsLCQl19+mf/9738dGNmxnQrXPMdbx674f5ienk52dja1tbV8/vnnXH/99SxduvSISWlX05L6dbXj11muj+UO90mKiopCp9Md0ttzWVkZcXFxHRRV53b33Xfz7bff8uOPP9KzZ8/A/Li4ONxuNzU1Nc3K/3JfxsXFHXZfH3zvaGVCQkKwWCytXZ1OITMzk/379zN8+HD0ej16vZ6lS5fy6quvotfriY2NlX17EuLj4w858fTv35/i4mLg5/1ztM+BuLg49u/f3+x9r9dLVVVVi45Bd/Pwww8H7nJnZGQwY8YMHnjggcA30bJvxeG0xrn3YIuK7du3t0WI7e5U/HwePXp0pz9+R7rmOZwjHcPO/hnVkjr+Wlf4PzQajfTt25cRI0bwwgsvMGTIEF555ZXDlu2Kx7Al9fu1zn78jnV97PP5DlmmLY6hJNwnyWg0MmLECBYtWhSY5/f7WbRo0VGffzgVKaW4++67mTNnDosXLyYlJaXZ+yNGjMBgMDTblwUFBRQXFwf25dixY9m0aVOzi+sFCxYQEhISSIjGjh3bbB0Hy3Tn43HOOeewadMmsrOzA9PIkSOZPn164HfZtydu/Pjxhwx1snXrVpKSkgBISUkhLi6u2b6pq6tjzZo1zfZvTU0NmZmZgTKLFy/G7/czZsyYQJmffvoJj8cTKLNgwQLS09MJDw9vs/p1pMbGRrTa5qcinU6H3+8HZN+Kw2uNc6/P52PTpk3Ex8e3VZjt6lT8fM7Ozu60x+9Y1zyH09WO4YnU8de64v+h3+/H5XId9r2udgwP52j1+7XOfvyOdX2s0+kOWaZNjuEJd7cmAmbNmqVMJpN6//33VV5enrrttttUWFhYl+kmv73ceeedKjQ0VC1ZsqTZcAKNjY2BMnfccYdKTExUixcvVuvXr1djx45VY8eODbx/cOiq8847T2VnZ6vvv/9eRUdHH3boqocffljl5+er119/vVMPjdJWft0Lo+zbE7d27Vql1+vVc889p7Zt26Y+/PBDZbVa1QcffBAo8+KLL6qwsDD11VdfqZycHHXJJZccduiqYcOGqTVr1qjly5er1NTUZkNX1dTUqNjYWDVjxgyVm5urZs2apaxWa7ceuur6669XPXr0CAwLNnv2bBUVFaV+//vfB8rIvhWHc6xz74wZM9Sjjz4aKP/MM8+o+fPnq8LCQpWZmal+85vfKLPZrDZv3txRVTiq+vp6lZWVpbKyshSg/v73v6usrCy1a9cupZRSjz76qJoxY0agfFf7fG5p/V5++WX15Zdfqm3btqlNmzap++67T2m1WrVw4cKOqsJRHc81z6//RlesWKH0er3661//qvLz89VTTz3VqYeUOpE6drX/w0cffVQtXbpUFRUVqZycHPXoo48qjUajfvjhB6VU1z+GLa1fVzt+h/Pr6+P2OIaScLeS1157TSUmJiqj0ahGjx6tVq9e3dEhdTrAYaf33nsvUMbhcKi77rpLhYeHK6vVqi677DJVUlLSbD07d+5UU6ZMURaLRUVFRanf/e53yuPxNCvz448/qqFDhyqj0ah69+7dbBunil9/oMi+PTnffPONGjRokDKZTKpfv37q7bffbva+3+9XTzzxhIqNjVUmk0mdc845qqCgoFmZyspKdc011yibzaZCQkLUjTfeqOrr65uV2bhxozr99NOVyWRSPXr0UC+++GKb160j1dXVqfvuu08lJiYqs9msevfurR577LFmw3fJvhVHcrRz75lnnqmuv/76wOv7778/UDY2NlZNnTpVbdiwoQOiPj4Hh8H69XSwTtdff70688wzD1mmq3w+t7R+f/7zn1WfPn2U2WxWERER6qyzzlKLFy/umOCPw/Fc8/z6b1QppT799FOVlpamjEajGjhwoJo7d277Bt4CJ1LHrvZ/eNNNN6mkpCRlNBpVdHS0OueccwLJqFJd/xi2tH5d7fgdzq+vj9vjGGqUUurE748LIYQQQgghhBDicOQZbiGEEEIIIYQQog1Iwi2EEEIIIYQQQrQBSbiFEEIIIYQQQog2IAm3EEIIIYQQQgjRBiThFkIIIYQQQggh2oAk3EIIIYQQQgghRBuQhFsIIYQQQgghhGgDknALIYQQQgghhBBtQBJuIbogjUbDl19+2dFhdFlPP/00Q4cO7egwhBBCnELk3H1kycnJ/OMf/wi8ln0luhNJuIXohEpLS7nnnnvo3bs3JpOJXr16cdFFF7Fo0aKODq1VPf3002g0mqNOR3PDDTdw6aWXtk+wQgghxFGcKudugJ07dzY7VwcHBzNw4EBmzpzJtm3bWry+devWcdttt7VBpEJ0PH1HByCEaG7nzp2MHz+esLAwXnrpJTIyMvB4PMyfP5+ZM2eyZcuWNtmu2+3GaDS2ybqP5KGHHuKOO+4IvB41ahS33XYbt956a7vGIYQQQpyMU+nc/UsLFy5k4MCBNDY2smnTJl555RWGDBnCN998wznnnHPc64mOjm7DKIXoWHKHW4hO5q677kKj0bB27Vouv/xy0tLSGDhwIA8++CCrV68OlKuoqOCyyy7DarWSmprK119/HXjP5/Nx8803k5KSgsViIT09nVdeeaXZdg7eHX7uuedISEggPT0dgJUrVzJ06FDMZjMjR47kyy+/RKPRkJ2dHVg2NzeXKVOmYLPZiI2NZcaMGVRUVATe//zzz8nIyMBisRAZGcmkSZNoaGg4pK42m424uLjApNPpCA4ODrwuLy9n4sSJgfXcdttt2O12oOnu+H/+8x+++uqrwDfsS5YsAeCRRx4hLS0Nq9VK7969eeKJJ/B4PCd9bIQQQojDOZXO3b8UGRlJXFwcvXv35pJLLmHhwoWMGTOGm2++GZ/PB0BhYSGXXHIJsbGx2Gw2Ro0axcKFC5ut59dNyn9p4sSJ3H333c3mlZeXYzQau2XrAdH9SMItRCdSVVXF999/z8yZMwkKCjrk/bCwsMDvzzzzDFdddRU5OTlMnTqV6dOnU1VVBYDf76dnz5589tln5OXl8eSTT/LHP/6RTz/9tNn6Fi1aREFBAQsWLODbb7+lrq6Oiy66iIyMDDZs2MCzzz7LI4880myZmpoaJk6cyLBhw1i/fj3ff/89ZWVlXHXVVQCUlJRwzTXXcNNNN5Gfn8+SJUuYNm0aSqkW7YuGhgYmT55MeHg469at47PPPmPhwoWBk+5DDz3EVVddxfnnn09JSQklJSWMGzcOgODgYN5//33y8vJ45ZVXeOedd3j55ZdbtH0hhBDieMi5+2darZb77ruPXbt2kZmZCYDdbmfq1KksWrSIrKwszj//fC666CKKi4uPa5233HILH330ES6XKzDvgw8+oEePHkycOLFF8QnRIZQQotNYs2aNAtTs2bOPWg5Qjz/+eOC13W5XgJo3b94Rl5k5c6a6/PLLA6+vv/56FRsbq1wuV2DeG2+8oSIjI5XD4QjMe+eddxSgsrKylFJKPfvss+q8885rtu7du3crQBUUFKjMzEwFqJ07dx5XnX8pKSlJvfzyy0oppd5++20VHh6u7HZ74P25c+cqrVarSktLA3W45JJLjrnel156SY0YMSLw+qmnnlJDhgxpcXxCCCHEr52K5+6ioqJm6/+l/Px8BahPPvnkiMsPHDhQvfbaa4HXvzz/K9W0r+bMmaOUUsrhcKjw8PBm6xs8eLB6+umnjytWITqaPMMtRCeiWvBN8uDBgwO/BwUFERISwv79+wPzXn/9dd59912Ki4txOBy43e5DeubOyMho9uxXQUEBgwcPxmw2B+aNHj262TIbN27kxx9/xGazHRJTYWEh5513Hueccw4ZGRlMnjyZ8847jyuuuILw8PDjrhtAfn4+Q4YMaXa3YPz48fj9fgoKCoiNjT3isp988gmvvvoqhYWF2O12vF4vISEhLdq+EEIIcTzk3N3cwf1xsONTu93O008/zdy5cykpKcHr9eJwOI77DrfZbGbGjBm8++67XHXVVWzYsIHc3NxmzfGF6MykSbkQnUhqaioajea4OlcxGAzNXms0Gvx+PwCzZs3ioYce4uabb+aHH34gOzubG2+8Ebfb3WyZwzV9Oxa73c5FF11EdnZ2s2nbtm2cccYZ6HQ6FixYwLx58xgwYACvvfYa6enpFBUVtXhbJ2LVqlVMnz6dqVOn8u2335KVlcVjjz12SN2FEEKI1iDn7uby8/MBSElJAZoeAZszZw7PP/88y5YtIzs7m4yMjBadl2+55RYWLFjAnj17eO+995g4cSJJSUktjk2IjiAJtxCdSEREBJMnT+b1118/bEclNTU1x7WeFStWMG7cOO666y6GDRtG3759KSwsPOZy6enpbNq0qdlzUuvWrWtWZvjw4WzevJnk5GT69u3bbDp4EaDRaBg/fjzPPPMMWVlZGI1G5syZc1yxH9S/f382btzYbD+sWLECrVYb6CTGaDQGOmU5aOXKlSQlJfHYY48xcuRIUlNT2bVrV4u2LYQQQhwvOXf/zO/38+qrr5KSksKwYcMC9brhhhu47LLLyMjIIC4ujp07d7ZovRkZGYwcOZJ33nmHjz76iJtuuqlFywvRkSThFqKTef311/H5fIwePZovvviCbdu2kZ+fz6uvvsrYsWOPax2pqamsX7+e+fPns3XrVp544olDTr6Hc+211+L3+7ntttvIz89n/vz5/PWvfwV+bho2c+ZMqqqquOaaa1i3bh2FhYXMnz+fG2+8EZ/Px5o1a3j++edZv349xcXFzJ49m/Lycvr37w/AnDlz6Nev3zFjmT59Omazmeuvv57c3Fx+/PFH7rnnHmbMmBFoTp6cnExOTg4FBQVUVFTg8XhITU2luLiYWbNmUVhYyKuvvtriCwYhhBCiJU7Vc3dlZSWlpaXs2LGDr7/+mkmTJrF27Vr+7//+D51OF6jX7Nmzyc7OZuPGjYF4W+qWW27hxRdfRCnFZZdd1uLlhegoknAL0cn07t2bDRs2cPbZZ/O73/2OQYMGce6557Jo0SLeeOON41rH7bffzrRp07j66qsZM2YMlZWV3HXXXcdcLiQkhG+++Ybs7GyGDh3KY489xpNPPgkQeDYsISGBFStW4PP5OO+888jIyOD+++8nLCwMrVZLSEgIP/30E1OnTiUtLY3HH3+cv/3tb0yZMgWA2tpaCgoKjhmL1Wpl/vz5VFVVMWrUKK644grOOecc/vnPfwbK3HrrraSnpzNy5Eiio6NZsWIFF198MQ888AB33303Q4cOZeXKlTzxxBPHtd+EEEKIE3GqnrsnTZpEfHw8GRkZPProo/Tv35+cnBzOPvvsQJm///3vhIeHM27cOC666CImT57M8OHDj2uf/NI111yDXq/nmmuuafa8uhCdnUa1pKcHIcQp58MPP+TGG2+ktrYWi8XS0eEIIYQQ4hi647l7586d9OnTh3Xr1p1Qwi5ER5FeyoUQzfz3v/+ld+/e9OjRg40bN/LII49w1VVXdZsTthBCCNHddOdzt8fjobKykscff5zTTjtNkm3R5UjCLYRoprS0lCeffJLS0lLi4+O58soree655zo6LCGEEEIcQXc+d69YsYKzzz6btLQ0Pv/8844OR4gWkyblQgghhBBCCCFEG5BO04QQQgghhBBCiDYgCbcQQgghhBBCCNEGJOEWQgghhBBCCCHagCTcQgghhBBCCCFEG5CEWwghhBBCCCGEaAOScAshhBBCCCGEEG1AEm4hhBBCCCGEEKINSMIthBBCCCGEEEK0AUm4hRBCCCGEEEKINvD/ASThuU0REZVMAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 911
        },
        "id": "0dd30008",
        "outputId": "1b340145-4d63-4881-f7e9-5a77336ff440"
      },
      "source": [
        "import seaborn as sns\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data=datos_telecom, x='Charges.Total', hue='Churn', kde=True)\n",
        "plt.title('Distribution of Charges.Total by Churn')\n",
        "plt.xlabel('Charges Total')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(data=datos_telecom, x='Churn', y='Charges.Total')\n",
        "plt.title('Box Plot of Charges.Total by Churn')\n",
        "plt.xlabel('Churn')\n",
        "plt.ylabel('Charges Total')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "840b5277",
        "outputId": "7aa6efef-9f6c-4519-c4d8-ab9a925c4f06"
      },
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data=datos_telecom, x='tenure', hue='Churn', kde=True)\n",
        "plt.title('Distribution of Tenure by Churn')\n",
        "plt.xlabel('Tenure (months)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(data=datos_telecom, x='Churn', y='tenure')\n",
        "plt.title('Box Plot of Tenure by Churn')\n",
        "plt.xlabel('Churn')\n",
        "plt.ylabel('Tenure (months)')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data=datos_telecom, x='Charges.Monthly', hue='Churn', kde=True)\n",
        "plt.title('Distribution of Charges.Monthly by Churn')\n",
        "plt.xlabel('Charges Monthly')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(data=datos_telecom, x='Churn', y='Charges.Monthly')\n",
        "plt.title('Box Plot of Charges.Monthly by Churn')\n",
        "plt.xlabel('Churn')\n",
        "plt.ylabel('Charges Monthly')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 📄Informe final"
      ],
      "metadata": {
        "id": "Wh8igpfPIomL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "V4Cf6ty3Iv2x"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}